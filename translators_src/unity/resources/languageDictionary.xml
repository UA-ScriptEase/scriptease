<LanguageDictionary xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation='../../../scriptease2/scriptease/resources/schema/LanguageDictionarySchema.xsd'>
	<IndentString>	</IndentString>
	<LineBreak>
	</LineBreak>
	<ReservedWords>
		<!-- Word lists from http://www.quackit.com/javascript/javascript_reserved_words.cfm -->
		<!-- Direct javascript reserved words -->
		<Word>break</Word>
		<Word>case</Word>
		<Word>comment</Word>
		<Word>continue</Word>
		<Word>default</Word>
		<Word>delete</Word>
		<Word>do</Word>
		<Word>else</Word>
		<Word>export</Word>
		<Word>for</Word>
		<Word>function</Word>
		<Word>if</Word>
		<Word>import</Word>
		<Word>in</Word>
		<Word>label</Word>
		<Word>new</Word>
		<Word>return</Word>
		<Word>switch</Word>
		<Word>this</Word>
		<Word>typeof</Word>
		<Word>var</Word>
		<Word>void</Word>
		<Word>while</Word>
		<Word>with</Word>
		<!-- Java Keywords (Reserved by JavaScript) -->
		<Word>abstract</Word>
		<Word>boolean</Word>
		<Word>byte</Word>
		<Word>char</Word>
		<Word>double</Word>
		<Word>false</Word>
		<Word>final</Word>
		<Word>float</Word>
		<Word>goto</Word>
		<Word>implements</Word>
		<Word>instanceOf</Word>
		<Word>int</Word>
		<Word>interface</Word>
		<Word>long</Word>
		<Word>native</Word>
		<Word>null</Word>
		<Word>package</Word>
		<Word>private</Word>
		<Word>protected</Word>
		<Word>public</Word>
		<Word>short</Word>
		<Word>static</Word>
		<Word>synchronized</Word>
		<Word>throws</Word>
		<Word>transient</Word>
		<Word>true</Word>
		<Word>this</Word>		

		<!-- ECMAScipt Reserved Words -->
		<Word>catch</Word>
		<Word>class</Word>
		<Word>const</Word>
		<Word>debugger</Word>
		<Word>enum</Word>
		<Word>extends</Word>
		<Word>finally</Word>
		<Word>super</Word>
		<Word>throw</Word>
		<Word>try</Word>

		<!-- Other JavaScript Keywords -->
		<Word>alert</Word>
		<Word>Anchor</Word>
		<Word>Area</Word>
		<Word>arguments</Word>
		<Word>Array</Word>
		<Word>assign</Word>
		<Word>blur</Word>
		<Word>Boolean</Word>
		<Word>Button</Word>
		<Word>callee</Word>
		<Word>caller</Word>
		<Word>captureEvents</Word>
		<Word>Checkbox</Word>
		<Word>clearInterval</Word>
		<Word>clearTimeout</Word>
		<Word>close</Word>
		<Word>closed</Word>
		<Word>confirm</Word>
		<Word>constructor</Word>
		<Word>Date</Word>
		<Word>defaultStatus</Word>
		<Word>document</Word>
		<Word>Document</Word>
		<Word>Element</Word>
		<Word>escape</Word>
		<Word>eval</Word>
		<Word>FileUpload</Word>
		<Word>find</Word>
		<Word>focus</Word>
		<Word>Form</Word>
		<Word>Frame</Word>
		<Word>frames</Word>
		<Word>Function</Word>
		<Word>getClass</Word>
		<Word>Hidden</Word>
		<Word>history</Word>
		<Word>History</Word>
		<Word>home</Word>
		<Word>Image</Word>
		<Word>Infinity</Word>
		<Word>innerHeight</Word>
		<Word>innerWidth</Word>
		<Word>isFinite</Word>
		<Word>isNan</Word>
		<Word>java</Word>
		<Word>JavaArray</Word>
		<Word>JavaClass</Word>
		<Word>JavaObject</Word>
		<Word>JavaPackage</Word>
		<Word>length</Word>
		<Word>Link</Word>
		<Word>location</Word>
		<Word>Location</Word>
		<Word>locationbar</Word>
		<Word>Math</Word>
		<Word>menubar</Word>
		<Word>MimeType</Word>
		<Word>moveBy</Word>
		<Word>moveTo</Word>
		<Word>name</Word>
		<Word>NaN</Word>
		<Word>navigate</Word>
		<Word>navigator</Word>
		<Word>Navigator</Word>
		<Word>netscape</Word>
		<Word>Number</Word>
		<Word>Object</Word>
		<Word>onBlur</Word>
		<Word>onError</Word>
		<Word>onFocus</Word>
		<Word>onLoad</Word>
		<Word>onUnload</Word>
		<Word>open</Word>
		<Word>opener</Word>
		<Word>Option</Word>
		<Word>outerHeight</Word>
		<Word>outerWidth</Word>
		<Word>Packages</Word>
		<Word>pageXoffset</Word>
		<Word>pageYoffset</Word>
		<Word>parent</Word>
		<Word>parseFloat</Word>
		<Word>parseInt</Word>
		<Word>Password</Word>
		<Word>personalbar</Word>
		<Word>Plugin</Word>
		<Word>print</Word>
		<Word>prompt</Word>
		<Word>prototype</Word>
		<Word>Radio</Word>
		<Word>ref</Word>
		<Word>RegExp</Word>
		<Word>releaseEvents</Word>
		<Word>Reset</Word>
		<Word>resizeBy</Word>
		<Word>resizeTo</Word>
		<Word>routeEvent</Word>
		<Word>scroll</Word>
		<Word>scrollbars</Word>
		<Word>scrollBy</Word>
		<Word>scrollTo</Word>
		<Word>Select</Word>
		<Word>self</Word>
		<Word>setInterval</Word>
		<Word>setTimeout</Word>
		<Word>status</Word>
		<Word>statusbar</Word>
		<Word>stop</Word>
		<Word>String</Word>
		<Word>Submit</Word>
		<Word>sun</Word>
		<Word>taint</Word>
		<Word>Text</Word>
		<Word>Textarea</Word>
		<Word>toolbar</Word>
		<Word>top</Word>
		<Word>toString</Word>
		<Word>unescape</Word>
		<Word>untaint</Word>
		<Word>unwatch</Word>
		<Word>valueOf</Word>
		<Word>watch</Word>
		<Word>window</Word>
		<Word>Window</Word>

		<!-- Unity Reserved -->
		<Word>GameObject</Word>
		<Word>Animation</Word>
		<Word>AudioClip</Word>
		<Word>Function</Word>
		<Word>Transform</Word>
		<Word>Rigidbody</Word>
		<Word>Animation</Word>
		<Word>AudioSource</Word>
		<Word>Component</Word>
		<Word>Behaviour</Word>
		<Word>ParticleAnimator</Word>
		<Word>Camera</Word>
		<Word>Material</Word>
		<Word>MeshRenderer</Word>
		<Word>Renderer</Word>				
		<Word>ParticleRenderer</Word>
		<Word>Texture</Word>
		<Word>Texture2D</Word>
		<Word>Scene</Word>				
		<Word>MeshFilter</Word>		
		<Word>OcclusionPortal</Word>
		<Word>Mesh</Word>
		<Word>Skybox</Word>
		<Word>QualitySettings</Word>
		<Word>Shader</Word>
		<Word>TextAsset</Word>
		<Word>Collider</Word>
		<Word>Joint</Word>
		<Word>HingeJoint</Word>
		<Word>MeshCollider</Word>
		<Word>BoxCollider</Word>
		<Word>AnimationClip</Word>
		<Word>ConstantForce</Word>
		<Word>AudioListenerr</Word>
		<Word>RenderTexture</Word>
		<Word>ParticleEmitter</Word>
		<Word>Cubemap</Word>
		<Word>GUILayer</Word>
		<Word>TrailRenderer</Word>
		<Word>TextMesh</Word>
		<Word>RenderSettings</Word>
		<Word>Light</Word>
		<Word>MonoBehaviour</Word>
		<Word>MonoScript</Word>
		<Word>Texture3D</Word>
		<Word>Projector</Word>
		<Word>LineRenderer</Word>
		<Word>Flare</Word>
		<Word>Halo</Word>
		<Word>LensFlare</Word>
		<Word>Font</Word>
		<Word>PlayerSettings</Word>
		<Word>GUITexture</Word>
		<Word>GUIText</Word>
		<Word>GUIElement</Word>
		<Word>SphereCollider</Word>
		<Word>CapsuleCollider</Word>
		<Word>SkinnedMeshRenderer</Word>
		<Word>FixedJoint</Word>		
		<Word>AssetBundle</Word>
		<Word>CharacterController</Word>
		<Word>CharacterJoint</Word>
		<Word>SpringJoint</Word>
		<Word>WheelCollider</Word>
		<Word>NetworkView</Word>
		<Word>MovieTexture</Word>
		<Word>ConfigurableJoint</Word>
		<Word>TerrainCollider</Word>
		<Word>TerrainData</Word>
		<Word>LightmapSettings</Word>
		<Word>WebCamTexture</Word>
		<Word>EditorSettings</Word>
		<Word>InteractiveCloth</Word>
		<Word>ClothRenderer</Word>
		<Word>SkinnedCloth</Word>
		<Word>AudioReverbFilter</Word>
		<Word>AudioHighPassFilter</Word>	
		<Word>AudioChorusFilter</Word>
		<Word>AudioReverbZone</Word>
		<Word>AudioEchoFilter</Word>
		<Word>AudioLowPassFilter</Word>
		<Word>AudioDistortionFilter</Word>
		<Word>Cloth</Word>
		<Word>SubstanceArchive</Word>
		<Word>ProceduralMaterial</Word>
		<Word>ProceduralTexture</Word>
		<Word>OffMeshLink</Word>
		<Word>OcclusionArea</Word>
		<Word>Tree</Word>
		<Word>NavMesh</Word>
		<Word>NavMeshAgent</Word>
		<Word>ParticleSystem</Word>
		<Word>ParticleSystemRenderer</Word>
		<Word>LODGroup</Word>
		<Word>LightProbeGroup</Word>
		<Word>Prefab</Word>		
		<Word>AssetImporter</Word>
		<Word>AssetDatabase</Word>
		<Word>TextureImporter</Word>
		<Word>SubstanceImporter</Word>																													
		<Word>GUI</Word>
	</ReservedWords>
	<FunctionCallFormat>functionHeader</FunctionCallFormat>
	<Formats>
		<!-- Variables -->
		<!-- Adds the type of the variable in front of it -->
		<Format id="variableWithType">
			<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
			<Literal> : </Literal>
			<Fragment data="type" default="void" />
		</Format>
		<!-- Declares a variable with type -->
		<Format id="variableDeclaration">
			<Line>
				<Literal>var</Literal>
				<Literal> </Literal>
				<FormatRef ref="variableWithType" />
				<Literal>;</Literal>
			</Line>
		</Format>
		<!-- Declares all variables in the series -->
		<Format id="variablesDeclaration">
			<Line>
				<Literal>// Variable Declarations</Literal>
			</Line>
			<Series data="variables">
				<FormatRef ref="variableDeclaration" />
			</Series>
			<Line />
		</Format>
		<!-- Defines the variable with its value -->
		<Format id="variableDefinition">
			<Line>
				<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
				<Literal> = </Literal>
				<Fragment data="formattedValue" />
				<Literal>;</Literal>
			</Line>
		</Format>
		<!-- Defines all variables in the series -->
		<Format id="variablesDefinition">
			<Line>
				<Literal>// Variable Definitions</Literal>
			</Line>
			<Series data="variables">
				<FormatRef ref="variableDefinition" />
			</Series>
			<Line />
		</Format>
		<Format id="childVariablesDeclaration">
			<Line>
				<Literal>// Variable Declarations</Literal>
			</Line>
			<Series data="children">
				<Series data="variables">
					<FormatRef ref="variableDeclaration" />
				</Series>
			</Series>
			<Line />
		</Format>
		<Format id="childVariablesDefinition">
			<Line>
				<Literal>// Variable Definitions</Literal>
			</Line>
			<Series data="children">
				<Series data="variables">
					<FormatRef ref="variableDefinition" />
				</Series>
			</Series>
			<Line />
		</Format>
		<!-- Implicits -->
		<!-- Declares all implicits -->
		<Format id="implicitsDeclaration">
			<Line>
				<Literal>// Implicit Declarations</Literal>
			</Line>
			<Series data="implicits">
				<FormatRef ref="variableDeclaration" />
			</Series>
		</Format>
		<!-- Defines all implicits -->
		<Format id="implicitsDefinition">
			<Line>
				<Literal>// Implicit Definitions</Literal>
			</Line>
			<Series data="implicits">
				<FormatRef ref="variableDefinition" />
			</Series>
		</Format>

		<!-- Functions -->
		<!-- Function signature with type in front -->
		<Format id="functionSignature">
			<Literal>function </Literal>
			<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
			<Literal>(</Literal>
			<Series data="parametersWithSlot" unique="true" separator=", ">
				<!-- Parameters are just the type and the name -->
				<FormatRef ref="variableWithType" />
			</Series>
			<Literal>)</Literal>
		</Format>
		<!-- Same as functionSignature, but without types. Used to call it -->
		<Format id="functionHeader">
			<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
			<Literal>(</Literal>
			<Series data="parametersWithSlot" unique="true" separator=", ">
				<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
			</Series>
			<Literal>)</Literal>
		</Format>
		<!-- Calls the function in the main code block -->
		<Format id="functionCall">
			<!-- Code block context -->
			<Scope data="mainCodeBlock">
				<Line>
					<FormatRef ref="functionHeader" />
					<Literal>;</Literal>
				</Line>
			</Scope>
		</Format>
		<!-- Defines the variables in codeblock and then calls the function -->
		<Format id="causeFunctionCall">
			<!-- Code block context -->
			<Scope data="mainCodeBlock">
				<Series data="parameters">
					<FormatRef ref="variableDefinition" />
				</Series>
				<Line>
					<FormatRef ref="functionHeader" />
					<Literal>;</Literal>
				</Line>
			</Scope>
		</Format>
		<!-- Writes the entire function with code inside it -->
		<Format id="functionDefinition">
			<Line>
				<FormatRef ref="functionSignature" />
				<Literal> {</Literal>
			</Line>
			<Indent>
				<Fragment data="code" />
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>
		<!-- Format to return a function header -->
		<Format id="returnFunction">
			<Series data="parameters">
				<FormatRef ref="variableDefinition" />
			</Series>
			<Line>
				<Literal>return </Literal>
				<FormatRef ref="functionHeader" />
				<Literal>;</Literal>
			</Line>
		</Format>

		<!-- Children of a Cause. Called from Cause Format Fragments -->
		<Format id="children">
			<FormatRef ref="implicitsDeclaration" />
			<FormatRef ref="implicitsDefinition" />
			<Series data="identicalCauses">
				<FormatRef ref="childVariablesDeclaration" />
				<FormatRef ref="childVariablesDefinition" />
				<FormatRef ref="storyComponentChildren" />
				<Line />
			</Series>
		</Format>
		<!-- Gets the children of the story component -->
		<Format id="storyComponentChildren">
			<Line>
				<Literal>// Children</Literal>
			</Line>
			<Series data="children">
				<FormatRef data="scriptIt" ref="functionCall" />
				<FormatRef data="askIt" ref="askItConditional" />
				<FormatRef data="pickIt" ref="pickItConditional" />
				<FormatRef data="note" ref="noteFormat" />
				<FormatRef data="controlIt" ref="controlItCall" />
				<FormatRef data="activityIt" ref="activityItCall" />
			</Series>
		</Format>
		<!-- Gets the appropriate format for the type -->
		<Format id="childrenWithoutImplicits">
			<FormatRef ref="variablesDeclaration" />
			<FormatRef ref="variablesDefinition" />
			<FormatRef ref="storyComponentChildren" />
		</Format>

		<!-- Format for delay it children -->
		<Format id="delayItChildren">
			<Scope data="Cause">
				<FormatRef ref="implicitsDeclaration" />
				<FormatRef ref="implicitsDefinition" />
			</Scope>
			<Line>
				<Literal>yield WaitForSeconds(</Literal>
				<Scope data="argument" ref="Number">
					<Fragment data="value" />
				</Scope>
				<Literal>);</Literal>
			</Line>
			<FormatRef ref="childrenWithoutImplicits" />
		</Format>

		<!-- Format for GUI Group children -->
		<Format id="GUIGroupChildren">
			<Scope data="Cause">
				<FormatRef ref="implicitsDeclaration" />
				<FormatRef ref="implicitsDefinition" />
			</Scope>
			<Line>
				<Literal>GUI.BeginGroup(Rect(</Literal>
				<Scope data="argument" ref="x">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="y">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Width">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Height">
					<Fragment data="value" />
				</Scope>
				<Literal>));</Literal>
			</Line>
			<FormatRef ref="childrenWithoutImplicits" />
			<Line>
				<Literal>GUI.EndGroup();</Literal>
			</Line>
		</Format>

		<!-- Format for Scroll View children -->
		<Format id="ScrollViewChildren">
			<Scope data="Cause">
				<FormatRef ref="implicitsDeclaration" />
				<FormatRef ref="implicitsDefinition" />
			</Scope>
			<Line>
				<Literal>GUI.BeginScrollView(Rect(</Literal>
				<Scope data="argument" ref="x">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="y">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Width">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Height">
					<Fragment data="value" />
				</Scope>
				<Literal>), Vector2(</Literal>
				<Scope data="argument" ref="Position x">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Position y">
					<Fragment data="value" />
				</Scope>
				<Literal>), Rect(</Literal>
				<Scope data="argument" ref="Content x">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Content y">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Content Width">
					<Fragment data="value" />
				</Scope>
				<Literal>, </Literal>
				<Scope data="argument" ref="Content Height">
					<Fragment data="value" />
				</Scope>
				<Literal>));</Literal>
			</Line>
			<FormatRef ref="childrenWithoutImplicits" />
			<Line>
				<Literal>GUI.EndScrollView();</Literal>
			</Line>
		</Format>

		<!-- Format for control it children -->
		<Format id="controlItChildren">
			<Scope data="Cause">
				<FormatRef ref="implicitsDeclaration" />
				<FormatRef ref="implicitsDefinition" />
			</Scope>
			<FormatRef ref="childrenWithoutImplicits" />
		</Format>

		<!-- Finds the format for the ControlIt and uses it -->
		<Format id="controlItCall">
			<Fragment data="controlItFormat" />
		</Format>

		<!-- Format for activity it children -->
		<Format id="activityItChildren">
			<Scope data="Cause">
				<FormatRef ref="implicitsDeclaration" />
				<FormatRef ref="implicitsDefinition" />
			</Scope>
			<FormatRef ref="childrenWithoutImplicits" />
		</Format>

		<!-- Finds the format for the ActivityIt and uses it -->
		<Format id="activityItCall">
		    <FormatRef ref="functionCall" />
		</Format>
		
		<!-- Turns a Note into a comment -->
		<Format id="noteFormat">
			<Line>
				<Literal>// </Literal>
				<Fragment data="note" />
			</Line>
		</Format>

		<!-- Format for the delay controller -->
		<Format id="delay">
			<Line>
				<FormatRef ref="functionHeader" />
				<Literal>;</Literal>
			</Line>
		</Format>

		<!-- Format for the block controller -->
		<Format id="block">
			<Line>
				<FormatRef ref="functionHeader" />
				<Literal>;</Literal>
			</Line>
		</Format>

		<!-- Format for the repeat controller -->
		<Format id="repeat">
			<Line>
				<Literal>for(var i=0; i &lt; </Literal>
				<Scope data="argument" ref="Number">
					<Fragment data="value" />
				</Scope>
				<Literal>; i++) {</Literal>
			</Line>
			<Indent>
				<Line>
					<FormatRef ref="functionHeader" />
					<Literal>;</Literal>
				</Line>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>

		<!-- Format for askits -->
		<Format id="askItConditional">
			<Line>
				<Literal>if (</Literal>
				<Fragment data="condition" />
				<Literal>){</Literal>
			</Line>
			<Indent>
				<Scope data="ifChild">
					<FormatRef ref="childrenWithoutImplicits" />
				</Scope>
			</Indent>
			<Line>
				<Literal>} else {</Literal>
			</Line>
			<Indent>
				<Scope data="elseChild">
					<FormatRef ref="childrenWithoutImplicits" />
				</Scope>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>
		
		<!-- Format for pickIts -->
		<Format id="pickItConditional">
			
			<Line>
				<Literal>// PickIt Choices</Literal>
			</Line>
			<Line>
				<Literal>int random = Random.Range(0, </Literal>
				<Fragment data="totalChoiceProbability" />
				<Literal>);</Literal>
			</Line>
			<Series data="choices" unique="true">
				<Line>
					<Literal>if (random &gt;= </Literal>
					<Fragment data="choiceProbabilityLowerBound" />
					<Literal> &amp;&amp; random &lt; </Literal>
					<Fragment data="choiceProbabilityUpperBound" />		
					<Literal>) {</Literal>
				</Line>
				<Indent>
					<FormatRef ref="childrenWithoutImplicits" />
				</Indent>
				<Line>
					<Literal>}</Literal>
				</Line>
			</Series>
		</Format>

		<!-- Format for the main method in normal script files -->
		<Format id="SECauseMain">
			<Line>
				<Literal>function Start() {</Literal>
			</Line>
			<!-- TODO We should probably add stuff here. Maybe. -->
			<Line>
				<Literal>}</Literal>
			</Line>

			<Line>
				<Literal>function Update() {</Literal>
			</Line>
			<Indent>
				<Line>
				</Line>
				<Series data="causes" unique="true">
					<Line>
						<Literal>if (</Literal>
						<Fragment data="slotConditional" />
						<Literal>) {</Literal>
					</Line>
					<Indent>
						<FormatRef ref="variablesDeclaration" />
						<Line>
							<Literal>//Function Calls</Literal>
						</Line>
						<FormatRef ref="causeFunctionCall" />
					</Indent>
					<Line>
						<Literal>}</Literal>
					</Line>
				</Series>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>

		<!-- Format for the main method in normal script files -->
		<Format id="UnityCauseMain">
			<Line>
			</Line>
			<Line>
				<Literal>function </Literal>
				<Scope data="firstCause">
					<Fragment data="slotConditional" />
					<Literal>(</Literal>
					<Series data="slotParameters" unique="true" separator=", ">
						<!-- Parameters are just the type and the name -->
						<FormatRef ref="variableWithType" />
					</Series>
					<Literal>) {</Literal>
				</Scope>
			</Line>
			<Indent>
				<Series data="causes" unique="true">
					<FormatRef ref="variablesDeclaration" />
					<Line>
						<Literal>//Function Calls</Literal>
					</Line>
					<FormatRef ref="causeFunctionCall" />
				</Series>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>


		<!-- File formats -->
		<!-- Default format for most files -->
		<Format id="SECause">
			<Line>
				<Literal>#pragma strict</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>import System.Collections.Generic;</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>// Main</Literal>
			</Line>
			<FormatRef ref="SECauseMain" />
			<Line />
			<Line>
				<Literal>// Function Definitions</Literal>
			</Line>
			<!-- Function definitions last -->
			<Series data="codeBlocks" unique="true">
				<FormatRef ref="functionDefinition" />
			</Series>
			<Line />
			<Line />
		</Format>

		<Format id="UnityCause">
			<Line>
				<Literal>#pragma strict</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>import System.Collections.Generic;</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>// Function</Literal>
			</Line>
			<FormatRef ref="UnityCauseMain" />
			<Line />
			<Line>
				<Literal>// Function Definitions</Literal>
			</Line>
			<!-- Function definitions last -->
			<Series data="codeBlocks" unique="true">
				<FormatRef ref="functionDefinition" />
			</Series>
			<Line />
			<Line />
		</Format>

		<!-- Special format for ScriptEase game object awake functions -->
		<Format id="ScriptEaseObjectAwakeCause">
			<Line>
				<Literal>#pragma strict</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>import System.Collections.Generic;</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>function Awake() {</Literal>
			</Line>
			<Indent>
				<Line>
					<Literal>SEVariable.PutGameObject("</Literal>
					<Scope data="RESOURCE">
						<Fragment data="TEMPLATEID" />
					</Scope>
					<Literal>", gameObject);</Literal>
				</Line>
			</Indent>
			<Line />
			<Scope data="start">
				<Indent>
					<Line>
						<Literal>if(!SEStory.storyInitialized) {</Literal>
					</Line>
					<Indent>
						<Line>
							<Literal>SEStory.RegisterRoot(</Literal>
							<Fragment data="formattedValue" />
							<Literal>, </Literal>
							<Fragment data="fanIn" />
							<Literal>);</Literal>
						</Line>
						<Line>
							<Literal>var parentName:String;</Literal>
						</Line>
						<Series data="orderedStoryPoints" unique="true">
							<Line>
								<Literal>parentName = </Literal>
								<Fragment data="formattedValue" />
								<Literal>;</Literal>
							</Line>
							<Series data="childrenNodes" unique="true">
								<Line>
									<Literal>SEStory.RegisterChild(parentName, </Literal>
									<Fragment data="formattedValue" />
									<Literal>, </Literal>
									<Fragment data="fanIn" />
									<Literal>);</Literal>
								</Line>
							</Series>
						</Series>
						<Line>
							<Literal>SEStory.SucceedStoryPoint(</Literal>
							<Fragment data="formattedValue" />
							<Literal>);</Literal>
						</Line>
					</Indent>
					<Line>
						<Literal>}</Literal>
					</Line>
				</Indent>
			</Scope>
			<Line />
			<Indent>
				<Line>
					<Literal>//Initialize the Dialogue system.</Literal>
				</Line>
				<Line>
					<Literal>if(!SEDialogue.DialoguesInitialized){</Literal>
				</Line>
				<Indent>
					<Series data="dialogueRoots" unique="true">
						<Line>
							<Literal>SEDialogue.RegisterRoot(&quot;</Literal>
							<Fragment data="text" />
							<Literal>&quot;, </Literal>
							<Fragment data="formattedValue" />
							<Literal>, </Literal>
							<Fragment data="speaker" />
							<Literal>, </Literal>
							<Fragment data="enabled" />
							<Literal>, </Literal>
							<Scope data="image">
								<Fragment data="formattedValue" />
							</Scope>
							<Literal>, </Literal>
							<Scope data="audio">
								<Fragment data="formattedValue" />
							</Scope>
							<Literal>);</Literal>
						</Line>
						<Line>
							<Literal>var parentID:int;</Literal>
						</Line>
						<Series data="orderedDialogueLines" unique="true">
							<Line>
								<Literal>parentID = </Literal>
								<Fragment data="formattedValue" />
								<Literal>;</Literal>
							</Line>
							<Series data="childLines" unique="true">
								<Line>
									<Literal>SEDialogue.RegisterChild(parentID, &quot;</Literal>
									<Fragment data="text" />
									<Literal>&quot;, </Literal>
									<Fragment data="formattedValue" />
									<Literal>, </Literal>
									<Fragment data="speaker" />
									<Literal>, </Literal>
									<Fragment data="enabled" />
									<Literal>, </Literal>
									<Scope data="image">
										<Fragment data="formattedValue" />
									</Scope>
									<Literal>, </Literal>
									<Scope data="audio">
										<Fragment data="formattedValue" />
									</Scope>
									<Literal>);</Literal>
								</Line>
							</Series>
						</Series>
					</Series>
				</Indent>
				<Line>
					<Literal>}</Literal>
				</Line>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>

		<!-- Special format needed for game object awake functions -->
		<Format id="GameObjectAwakeCause">
			<Line>
				<Literal>#pragma strict</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>import System.Collections.Generic;</Literal>
			</Line>
			<Line>
				<Literal>function Awake() {</Literal>
			</Line>
			<Indent>
				<Line>
					<Literal>SEVariable.PutGameObject("</Literal>
					<Scope data="RESOURCE">
						<Fragment data="TEMPLATEID" />
					</Scope>
					<Literal>", gameObject);</Literal>
				</Line>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>
	</Formats>
</LanguageDictionary>