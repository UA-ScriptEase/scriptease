<LibraryModel name="DefaultHackEBotLibrary" author="ScriptEase Team" description="Robots" readonly="false">
  <IncludeFiles>
    <IncludeFile>includes/HEBStory.cpp</IncludeFile>
    <IncludeFile>includes/HEBStory.h</IncludeFile>
    <IncludeFile>includes/HackEBot_Move.cpp</IncludeFile>
    <IncludeFile>includes/HackEBot_Move.h</IncludeFile>
    <IncludeFile>includes/HackEBot_Sonar.cpp</IncludeFile>
    <IncludeFile>includes/HackEBot_Sonar.h</IncludeFile>
  </IncludeFiles>
  <Types>
    <Type>
      <Name>Story Point</Name>
      <CodeSymbol>String</CodeSymbol>
      <Format>
        <Literal>&quot;</Literal>
        <Fragment data="unique32charname"/>
        <Literal>&quot;</Literal>
      </Format>
      <LegalValues>[^\&quot;]*</LegalValues>
      <WidgetName>SP</WidgetName>
    </Type>
    <Type>
      <Name>Story Group</Name>
      <CodeSymbol>String</CodeSymbol>
      <Format>
        <Fragment data="uniqueID"/>
      </Format>
      <LegalValues>[^\&quot;]*</LegalValues>
      <WidgetName>SG</WidgetName>
    </Type>
    <Type>
      <Name>Story &lt;Module&gt;</Name>
      <CodeSymbol></CodeSymbol>
      <WidgetName>S</WidgetName>
    </Type>
    <Type>
      <Name>Robot</Name>
      <CodeSymbol>int</CodeSymbol>
      <Format>
        <Literal>&quot;</Literal>
        <Fragment data="uniqueID"/>
        <Literal>&quot;</Literal>
      </Format>
      <WidgetName>Ro</WidgetName>
    </Type>
    <Type>
      <Name>GameObject</Name>
      <CodeSymbol>GameObject</CodeSymbol>
      <Slots>
        <Slot>Default</Slot>
      </Slots>
      <WidgetName>G</WidgetName>
    </Type>
    <Type>
      <Name>Void</Name>
      <CodeSymbol>void</CodeSymbol>
      <WidgetName>V</WidgetName>
    </Type>
    <Type>
      <Name>Question</Name>
      <CodeSymbol>int</CodeSymbol>
      <WidgetName>?</WidgetName>
    </Type>
    <Type>
      <Name>Number</Name>
      <CodeSymbol>float</CodeSymbol>
      <GUI>JSPINNER</GUI>
      <WidgetName>#</WidgetName>
    </Type>
    <Type>
      <Name>Right Left</Name>
      <CodeSymbol>int</CodeSymbol>
      <Enum>1&lt;Left&gt;|0&lt;Right&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Forward Back</Name>
      <CodeSymbol>int</CodeSymbol>
      <Enum>1&lt;Back&gt;|0&lt;Forward&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Number Operator</Name>
      <CodeSymbol>int</CodeSymbol>
      <Enum>3&lt;Greater Than or Equal To&gt;|2&lt;Equal To&gt;|1&lt;Less Than&gt;|0&lt;Greater Than&gt;|4&lt;Less Than or Equal To&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
  </Types>
  <Slots defaultFormat="file">
    <Slot>
      <Name>Default</Name>
      <Keyword>Default</Keyword>
      <Condition>Default</Condition>
      <Parameters/>
      <Implicits/>
    </Slot>
  </Slots>
  <Causes>
    <CauseIt>
      <Name>For &lt;Seconds&gt; seconds</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>For &lt;Seconds&gt; seconds</Name>
          <Labels/>
          <Subject>robot</Subject>
          <Slot>Default</Slot>
          <Types>
            <Type>Void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>robot</Name>
              <Labels/>
              <Types>
                <Type>Robot</Type>
              </Types>
              <Binding flavour="automatic"/>
            </KnowIt>
            <KnowIt>
              <Name>Seconds</Name>
              <Labels/>
              <Types>
                <Type>Number</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Number</Type>
                <Value>0.0</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if(((int)</Literal>
              <Scope data="ARGUMENT" ref="Seconds">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>* 1000)  &gt;  SE_GlobalTime){</Literal>
            </Line>
            <Indent>
              <FormatRef data="NONE" ref="children"/>
            </Indent>
            <Line>
              <Literal>} else if (((int) </Literal>
              <Scope data="ARGUMENT" ref="Seconds">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>* 1000) &lt;= SE_GlobalTime){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>if ((SE_ChildCount - 1) == 0){</Literal>
              </Line>
              <Indent>
                <Line>
                  <Literal>SE_GlobalTime = 0;</Literal>
                </Line>
                <Line>
                  <Literal>//Succeed Story Point EEDIT try autobinding a StoryPoint Variable</Literal>
                </Line>
              </Indent>
              <Line>
                <Literal>} else {</Literal>
              </Line>
              <Indent>
                <Line>
                  <Literal>SE_ChildCount--;</Literal>
                </Line>
                <Line>
                  <Literal>//Succeed Story Point</Literal>
                </Line>
              </Indent>
              <Line>
                <Literal>}</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </CauseIt>
    <CauseIt>
      <Name>When robot is within &lt;Distance&gt; centimeters from an obstacle</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When robot is within &lt;Distance&gt; centimeters from an obstacle</Name>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Default</Slot>
          <Types/>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Labels/>
              <Types>
                <Type>Robot</Type>
              </Types>
              <Binding flavour="automatic"/>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Labels/>
              <Types>
                <Type>Number</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Number</Type>
                <Value>0.0</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>while(obstacle.Ping(</Literal>
              <Scope data="ARGUMENT" ref="Distance">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)){</Literal>
            </Line>
            <Indent>
              <FormatRef data="NONE" ref="children"/>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </CauseIt>
    <CauseIt>
      <Name>Do Once</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Do Once</Name>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Default</Slot>
          <Types/>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Labels/>
              <Types>
                <Type>Robot</Type>
              </Types>
              <Binding flavour="automatic"/>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
            <Line>
              <Literal>SE_GlobalTime = 0;</Literal>
            </Line>
            <Line>
              <Literal>//Succeed Story Point</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </CauseIt>
  </Causes>
  <Effects>
    <ScriptIt>
      <Name>Turn &lt;Direction&gt;</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Turn &lt;Direction&gt;</Name>
          <Labels/>
          <Types>
            <Type>Void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Direction</Name>
              <Labels/>
              <Types>
                <Type>Right Left</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Right Left</Type>
                <Value>1</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if(</Literal>
              <Scope data="ARGUMENT" ref="Direction">
                <Fragment data="NAME"/>
              </Scope>
              <Literal> == 0){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>hackebot.TurnL(8 , 500);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>} else {</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>hackebot.TurnR(8 , 500);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
            <Line>
              <Literal>SE_GlobalTime = SE_GlobalTime + 500;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Move &lt;Direction&gt; at speed &lt;Speed&gt; </Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Move &lt;Direction&gt; at speed &lt;Speed&gt; </Name>
          <Labels/>
          <Types>
            <Type>Void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Speed</Name>
              <Labels/>
              <Types>
                <Type>Number</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Number</Type>
                <Value>0.0</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Direction</Name>
              <Labels/>
              <Types>
                <Type>Forward Back</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Forward Back</Type>
                <Value>1</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if(</Literal>
              <Scope data="ARGUMENT" ref="Direction">
                <Fragment data="NAME"/>
              </Scope>
              <Literal> == 0){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>hackebot.MoveF(((int)</Literal>
                <Scope data="ARGUMENT" ref="Speed">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>+ 0.5) , 250);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>} else { </Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>hackebot.MoveB(((int) </Literal>
                <Scope data="ARGUMENT" ref="Speed">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>+ 0.5) , 250);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
            <Line>
              <Literal>SE_GlobalTime = SE_GlobalTime + 250;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Delay the Robot</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Delay the Robot</Name>
          <Labels/>
          <Types>
            <Type>Void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>hackebot.MoveStop(250);</Literal>
            </Line>
            <Line>
              <Literal>SE_GlobalTime = SE_GlobalTime + 250;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Succeed &lt;Story Point&gt;</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Succeed &lt;Story Point&gt;</Name>
          <Labels/>
          <Types>
            <Type>Void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Labels/>
              <Types>
                <Type>Story Point</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SucceedStoryPoint(</Literal>
              <Scope data="ARGUMENT" ref="Story Point">
                <Fragment data="NAME" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Continue at &lt;Story Point&gt;</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Continue at &lt;Story Point&gt;</Name>
          <Labels/>
          <Types>
            <Type>Void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Labels/>
              <Types>
                <Type>Story Point</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ContinueAtStoryPoint(</Literal>
              <Scope data="ARGUMENT" ref="Story Point">
                <Fragment data="NAME" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Fail &lt;Story Point&gt;</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Fail &lt;Story Point&gt;</Name>
          <Labels/>
          <Types>
            <Type>Void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Labels/>
              <Types>
                <Type>Story Point</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>FailStoryPoint(</Literal>
              <Scope data="ARGUMENT" ref="Story Point">
                <Fragment data="NAME" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Story Point&gt; is active</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Story Point&gt; is active</Name>
          <Labels/>
          <Types>
            <Type>Question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Labels/>
              <Types>
                <Type>Story Point</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return StoryPoint::CheckEnabled(</Literal>
              <Scope data="ARGUMENT" ref="Story Point">
                <Fragment data="NAME" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Story Point&gt; has succeeded</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Story Point&gt; has succeeded</Name>
          <Labels/>
          <Types>
            <Type>Question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Labels/>
              <Types>
                <Type>Story Point</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return StoryPoint::CheckSucceeded(</Literal>
              <Scope data="ARGUMENT" ref="Story Point">
                <Fragment data="NAME" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Story Point&gt; has failed</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Story Point&gt; has failed</Name>
          <Labels/>
          <Types>
            <Type>Question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Labels/>
              <Types>
                <Type>Story Point</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return StoryPoint::CheckFailed(</Literal>
              <Scope data="ARGUMENT" ref="Story Point">
                <Fragment data="NAME" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;X&gt; is &lt;Number Operator&gt; &lt;Y&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;X&gt; is &lt;Number Operator&gt; &lt;Y&gt;</Name>
          <Labels/>
          <Types>
            <Type>Question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>X</Name>
              <Labels/>
              <Types>
                <Type>Number</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Number</Type>
                <Value>0.0</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Y</Name>
              <Labels/>
              <Types>
                <Type>Number</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Number</Type>
                <Value>0.0</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Number Operator</Name>
              <Labels/>
              <Types>
                <Type>Number Operator</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Number Operator</Type>
                <Value>3</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int SE_NumberOperator =</Literal>
              <Scope data="ARGUMENT" ref="Number Operator">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>if(SE_NumberOperator == 0 )</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return</Literal>
                <Scope data="ARGUMENT" ref="X">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>&gt;</Literal>
                <Scope data="ARGUMENT" ref="Y">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(SE_NumberOperator == 1)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return</Literal>
                <Scope data="ARGUMENT" ref="X">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>&lt;</Literal>
                <Scope data="ARGUMENT" ref="Y">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(SE_NumberOperator == 2)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return</Literal>
                <Scope data="ARGUMENT" ref="X">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>==</Literal>
                <Scope data="ARGUMENT" ref="Y">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(SE_NumberOperator == 3)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return</Literal>
                <Scope data="ARGUMENT" ref="X">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>&gt;=</Literal>
                <Scope data="ARGUMENT" ref="Y">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(SE_NumberOperator == 4)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return</Literal>
                <Scope data="ARGUMENT" ref="X">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>&lt;=</Literal>
                <Scope data="ARGUMENT" ref="Y">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return FALSE;</Literal>
              </Line>
            </Indent>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Turn Randomly Right or Left</Name>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Turn Randomly Right or Left</Name>
          <Labels/>
          <Types>
            <Type>Void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>int SE_RandTurn = random(200);</Literal>
            </Line>
            <Line>
              <Literal>if(SE_RandTurn &lt; 99)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>hackebot.TurnR(8,500);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(SE_RandTurn &gt; 100)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>hackebot.TurnL(8,500);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>SE_GlobalTime = SE_GlobalTime + 500;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if robot is within &lt;Centimeters&gt; centimeters of an object</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if robot is within &lt;Centimeters&gt; centimeters of an object</Name>
          <Visible>false</Visible>
          <Labels/>
          <Types>
            <Type>Question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Centimeters</Name>
              <Labels/>
              <Types>
                <Type>Number</Type>
              </Types>
              <Binding flavour="constant">
                <Type>Number</Type>
                <Value>0.0</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return obstacle.Ping(</Literal>
              <Scope data="ARGUMENT" ref="Centimeters">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
  </Effects>
  <DescribeIts>
    <DescribeIt>
      <Name>SP Active</Name>
      <Types>
        <Type>Question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/LibraryModel/DescribeIts/DescribeIt/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/LibraryModel/Effects/ScriptIt[7]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Distance To Object</Name>
      <Types>
        <Type>Question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/LibraryModel/DescribeIts/DescribeIt[2]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/LibraryModel/Effects/ScriptIt[12]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
  </DescribeIts>
  <ControlIts/>
  <ActivityIts/>
  <Behaviours/>
  <TypeConverters/>
</LibraryModel>