<APIDictionary name="DefaultNWNAPIDictionary" author="ScriptEase2" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation='../../../scriptease2/scriptease/resources/schema/ApiDictionarySchema.xsd'>
  <Types>
  	<Type>
		<Name>Dialogue Line</Name>
		<Keyword>dialogue_line</Keyword>
		<CodeSymbol>string</CodeSymbol>
		<Format>
			<Literal>&quot;</Literal>
			<Fragment data="value"/>
			<Literal>&quot;</Literal>
		</Format> 
		<Slots>
			<Slot>Script</Slot>
			<Slot>Active</Slot>
		</Slots>
	</Type>
	<Type>
      <Name>Enable</Name>
      <Keyword>enable_disable</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TRUE&lt;Enable&gt;|FALSE&lt;Disable&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
    <Type>
      <Name>Store</Name>
      <Keyword>store</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnOpenStore</Slot>
        <Slot>OnStoreClosed</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Location</Name>
      <Keyword>location</Keyword>
      <CodeSymbol>location</CodeSymbol>
    </Type>
    <Type>
      <Name>Waypoint</Name>
      <Keyword>waypoint</Keyword>
      <CodeSymbol>object</CodeSymbol>
    </Type>
    <Type>
      <Name>Door</Name>
      <Keyword>door</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnClosed</Slot>
        <Slot>OnDamaged</Slot>
        <Slot>OnDeath</Slot>
        <Slot>OnDisarm</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnLock</Slot>
        <Slot>OnMeleeAttacked</Slot>
        <Slot>OnOpen</Slot>
        <Slot>OnSpellCastAt</Slot>
        <Slot>OnTrapTriggered</Slot>
        <Slot>OnUnlock</Slot>
        <Slot>OnUserDefined</Slot>
        <Slot>OnClick</Slot>
        <Slot>OnFailToOpen</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Dialogue</Name>
      <Keyword>dialogue</Keyword>
      <CodeSymbol>null</CodeSymbol>
      <Slots>
        <Slot>EndConversation</Slot>
        <Slot>EndConverAbort</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Encounter</Name>
      <Keyword>encounter</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnEntered</Slot>
        <Slot>OnExhausted</Slot>
        <Slot>OnExit</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnUserDefined</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Object</Name>
      <Keyword>object</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <LegalValues>journal|creature|placeable|door|item|trigger|</LegalValues>
    </Type>
    <Type>
      <Name>Number</Name>
      <Keyword>float</Keyword>
      <CodeSymbol>float</CodeSymbol>
      <LegalValues>[-]?[0-9]*\.?[0-9]+</LegalValues>
      <GUI>JSpinner</GUI>
    </Type>
    <Type>
      <Name>LockModify</Name>
      <Keyword>lock_modify</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TRUE&lt;Lock&gt;|FALSE&lt;Unlock&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
    <Type>
      <Name>Journal</Name>
      <Keyword>journal</Keyword>
      <CodeSymbol>object</CodeSymbol>
    </Type>
    <Type>
      <Name>Area</Name>
      <Keyword>area</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnEnter</Slot>
        <Slot>OnExit</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnUserDefined</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Event</Name>
      <Keyword>event</Keyword>
      <CodeSymbol>event</CodeSymbol>
    </Type>
      <!-- ENUM TYPES -->
	<Type>
      <Name>Cheat</Name>
      <Keyword>cheat</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TRUE&lt;Yes&gt;|FALSE&lt;No&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>MetaMagic</Name>
      <Keyword>meta_magic</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>METAMAGIC_ANY&lt;Any&gt;|METAMAGIC_EMPOWER&lt;Empower&gt;|METAMAGIC_EXTEND&lt;Extend&gt;|METAMAGIC_MAXIMIZE&lt;Maximize&gt;|METAMAGIC_NONE&lt;None&gt;|METAMAGIC_QUICKEN&lt;Quicken&gt;|METAMAGIC_SILENT&lt;Silent&gt;|METAMAGIC_STILL&lt;Still&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>DisturbanceType</Name>
      <Keyword>disturbance_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>INVENTORY_DISTURB_TYPE_ADDED&lt;Added&gt;|INVENTORY_DISTURB_TYPE_REMOVED&lt;Removed&gt;|INVENTORY_DISTURB_TYPE_STOLEN&lt;Stolen&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	  <Type>
      <Name>DamageType</Name>
      <Keyword>damage_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>DAMAGE_TYPE_ACID&lt;Acid&gt;|DAMAGE_TYPE_BASE_WEAPON&lt;Base Weapon&gt;|DAMAGE_TYPE_BLUDGEONING&lt;Bludgeoning&gt;|DAMAGE_TYPE_COLD&lt;Cold&gt;|DAMAGE_TYPE_DIVINE&lt;Divine&gt;|DAMAGE_TYPE_ELECTRICAL&lt;Electrical&gt;|DAMAGE_TYPE_FIRE&lt;Fire&gt;|DAMAGE_TYPE_MAGICAL&lt;Magical&gt;|DAMAGE_TYPE_NEGATIVE&lt;Negative&gt;|DAMAGE_TYPE_PIERCING&lt;Piercing&gt;|DAMAGE_TYPE_POSITIVE&lt;Positive&gt;|DAMAGE_TYPE_SLASHING&lt;Slashing&gt;|DAMAGE_TYPE_SONIC&lt;Sonic&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Gender</Name>
      <Keyword>gender</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>GENDER_BOTH&lt;Gender Both&gt;|GENDER_FEMALE&lt;Gender Female&gt;|GENDER_MALE&lt;Gender Male&gt;|GENDER_NONE&lt;Gender None&gt;|GENDER_OTHER&lt;Gender Other&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>CombatMode</Name>
      <Keyword>combat_mode</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>COMBAT_MODE_INVALID&lt;Invalid&gt;|COMBAT_MODE_PARRY&lt;Parry&gt;|COMBAT_MODE_POWER_ATTACK&lt;Power Attack&gt;|COMBAT_MODE_IMPROVED_POWER_ATTACK&lt;Improved Power Attack&gt;|COMBAT_MODE_FLURRY_OF_BLOWS&lt;Flurry Of Blows&gt;|COMBAT_MODE_RAPID_SHOT&lt;Rapid Shot&gt;|COMBAT_MODE_EXPERTISE&lt;Expertise&gt;|COMBAT_MODE_IMPROVED_EXPERTISE&lt;Improved Expertise&gt;|COMBAT_MODE_DEFENSIVE_CASTING&lt;Defensive Casting&gt;|COMBAT_MODE_DIRTY_FIGHTING&lt;Dirty Fighting&gt;|COMBAT_MODE_DEFENSIVE_STANCE&lt;Defensive Stance&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
    <Type>
      <Name>Question</Name>
      <Keyword>question</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TRUE&lt;Yes&gt;|FALSE&lt;No&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Spell</Name>
      <Keyword>spell</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SPELL_ACID_FOG&lt;Spell Acid Fog&gt;|SPELL_AID&lt;Spell Aid&gt;|SPELL_ANIMATE_DEAD&lt;Spell Animate Dead&gt;|SPELL_AWAKEN&lt;Spell Awaken&gt;|SPELL_BANE&lt;Spell Bane&gt;|SPELL_BARKSKIN&lt;Spell Barkskin&gt;|SPELL_BESTOW_CURSE&lt;Spell Bestow Curse&gt;|SPELL_BLADE_BARRIER&lt;Spell Blade Barrier&gt;|SPELL_BLESS_WEAPON&lt;Spell Bless Weapon&gt;|SPELL_BLINDNESS_AND_DEAFNESS&lt;Spell Blindness And Deafness&gt;|SPELL_BURNING_HANDS&lt;Spell Burning Hands&gt;|SPELL_CALL_LIGHTNING&lt;Spell Call Lightning&gt;|SPELL_CATS_GRACE&lt;Spell Cats Grace&gt;|SPELL_CHAIN_LIGHTNING&lt;Spell Chain Lightning&gt;|SPELL_CHARM_MONSTER&lt;Spell Charm Monster&gt;|SPELL_CHARM_PERSON&lt;Spell Charm Person&gt;|SPELL_CHARM_PERSON_OR_ANIMAL&lt;Spell Charm Person Or Animal&gt;|SPELL_CIRCLE_OF_DEATH&lt;Spell Circle Of Death&gt;|SPELL_CIRCLE_OF_DOOM&lt;Spell Circle Of Doom&gt;|SPELL_CLAIRAUDIENCE_AND_CLAIRVOYANCE&lt;Spell Clairaudience And Clairvoyance&gt;|SPELL_CLARITY&lt;Spell Clarity&gt;|SPELL_CLOAK_OF_CHAOS&lt;Spell Cloak Of Chaos&gt;|SPELL_CLOUDKILL&lt;Spell Cloudkill&gt;|SPELL_COLOR_SPRAY&lt;Spell Color Spray&gt;|SPELL_CONE_OF_COLD&lt;Spell Cone Of Cold&gt;|SPELL_CONFUSION&lt;Spell Confusion&gt;|SPELL_CONTAGION&lt;Spell Contagion&gt;|SPELL_CONTROL_UNDEAD&lt;Spell Control Undead&gt;|SPELL_CREATE_GREATER_UNDEAD&lt;Spell Create Greater Undead&gt;|SPELL_CREATE_UNDEAD&lt;Spell Create Undead&gt;|SPELL_CREEPING_DOOM&lt;Spell Creeping Doom&gt;|SPELL_CURE_CRITICAL_WOUNDS&lt;Spell Cure Critical Wounds&gt;|SPELL_CURE_LIGHT_WOUNDS&lt;Spell Cure Light Wounds&gt;|SPELL_CURE_MINOR_WOUNDS&lt;Spell Cure Minor Wounds&gt;|SPELL_CURE_MODERATE_WOUNDS&lt;Spell Cure Moderate Wounds&gt;|SPELL_CURE_SERIOUS_WOUNDS&lt;Spell Cure Serious Wounds&gt;|SPELL_DARKNESS&lt;Spell Darkness&gt;|SPELL_DARKVISION&lt;Spell Darkvision&gt;|SPELL_DAZE&lt;Spell Daze&gt;|SPELL_DEATH_WARD&lt;Spell Death Ward&gt;|SPELL_DELAYED_BLAST_FIREBALL&lt;Spell Delayed Blast Fireball&gt;|SPELL_DESTRUCTION&lt;Spell Destruction&gt;|SPELL_DISMISSAL&lt;Spell Dismissal&gt;|SPELL_DISPEL_MAGIC&lt;Spell Dispel Magic&gt;|SPELL_DIVINE_POWER&lt;Spell Divine Power&gt;|SPELL_DOMINATE_ANIMAL&lt;Spell Dominate Animal&gt;|SPELL_DOMINATE_PERSON&lt;Spell Dominate Person&gt;|SPELL_DOOM&lt;Spell Doom&gt;|SPELL_EAGLE_SPLEDOR&lt;Spell Eagle Spledor&gt;|SPELL_ELEMENTAL_SHIELD&lt;Spell Elemental Shield&gt;|SPELL_ELEMENTAL_SWARM&lt;Spell Elemental Swarm&gt;|SPELL_ENDURANCE&lt;Spell Endurance&gt;|SPELL_ENDURE_ELEMENTS&lt;Spell Endure Elements&gt;|SPELL_ENERGY_BUFFER&lt;Spell Energy Buffer&gt;|SPELL_ENERVATION&lt;Spell Enervation&gt;|SPELL_ENTANGLE&lt;Spell Entangle&gt;|SPELL_ETHEREAL_VISAGE&lt;Spell Ethereal Visage&gt;|SPELL_EVARDS_BLACK_TENTACLES&lt;Spell Evards Black Tentacles&gt;|SPELL_FEAR&lt;Spell Fear&gt;|SPELL_FEEBLEMIND&lt;Spell Feeblemind&gt;|SPELL_FIND_TRAPS&lt;Spell Find Traps&gt;|SPELL_FINGER_OF_DEATH&lt;Spell Finger Of Death&gt;|SPELL_FIRE_STORM&lt;Spell Fire Storm&gt;|SPELL_FIREBALL&lt;Spell Fireball&gt;|SPELL_FLAME_ARROW&lt;Spell Flame Arrow&gt;|SPELL_FLAME_LASH&lt;Spell Flame Lash&gt;|SPELL_FLAME_STRIKE&lt;Spell Flame Strike&gt;|SPELL_FOXS_CUNNING&lt;Spell Foxs Cunning&gt;|SPELL_FREEDOM_OF_MOVEMENT&lt;Spell Freedom Of Movement&gt;|SPELL_GATE&lt;Spell Gate&gt;|SPELL_GHOSTLY_VISAGE&lt;Spell Ghostly Visage&gt;|SPELL_GHOUL_TOUCH&lt;Spell Ghoul Touch&gt;|SPELL_GREASE&lt;Spell Grease&gt;|SPELL_GREATER_BULLS_STRENGTH&lt;Spell Greater Bulls Strength&gt;|SPELL_GREATER_CATS_GRACE&lt;Spell Greater Cats Grace&gt;|SPELL_GREATER_DISPELLING&lt;Spell Greater Dispelling&gt;|SPELL_GREATER_EAGLE_SPLENDOR&lt;Spell Greater Eagle Splendor&gt;|SPELL_GREATER_ENDURANCE&lt;Spell Greater Endurance&gt;|SPELL_GREATER_FOXS_CUNNING&lt;Spell Greater Foxs Cunning&gt;|SPELL_GREATER_MAGIC_WEAPON&lt;Spell Greater Magic Weapon&gt;|SPELL_GREATER_OWLS_WISDOM&lt;Spell Greater Owls Wisdom&gt;|SPELL_GREATER_PLANAR_BINDING&lt;Spell Greater Planar Binding&gt;|SPELL_GREATER_RESTORATION&lt;Spell Greater Restoration&gt;|SPELL_GREATER_SHADOW_CONJURATION_ACID_ARROW&lt;Spell Greater Shadow Conjuration Acid Arrow&gt;|SPELL_GREATER_SHADOW_CONJURATION_MINOR_GLOBE&lt;Spell Greater Shadow Conjuration Minor Globe&gt;|SPELL_GREATER_SHADOW_CONJURATION_MIRROR_IMAGE&lt;Spell Greater Shadow Conjuration Mirror Image&gt;|SPELL_GREATER_SHADOW_CONJURATION_SUMMON_SHADOW&lt;Spell Greater Shadow Conjuration Summon Shadow&gt;|SPELL_GREATER_SHADOW_CONJURATION_WEB&lt;Spell Greater Shadow Conjuration Web&gt;|SPELL_GREATER_SPELL_BREACH&lt;Spell Greater Spell Breach&gt;|SPELL_GREATER_SPELL_MANTLE&lt;Spell Greater Spell Mantle&gt;|SPELL_GREATER_STONESKIN&lt;Spell Greater Stoneskin&gt;|SPELL_HAMMER_OF_THE_GODS&lt;Spell Hammer Of The Gods&gt;|SPELL_HARM&lt;Spell Harm&gt;|SPELL_HASTE&lt;Spell Haste&gt;|SPELL_HEAL&lt;Spell Heal&gt;|SPELL_HEALING_CIRCLE&lt;Spell Healing Circle&gt;|SPELL_HOLD_ANIMAL&lt;Spell Hold Animal&gt;|SPELL_HOLD_MONSTER&lt;Spell Hold Monster&gt;|SPELL_HOLD_PERSON&lt;Spell Hold Person&gt;|SPELL_HOLY_AURA&lt;Spell Holy Aura&gt;|SPELL_HOLY_SWORD&lt;Spell Holy Sword&gt;|SPELL_HORRID_WILTING&lt;Spell Horrid Wilting&gt;|SPELL_ICE_STORM&lt;Spell Ice Storm&gt;|SPELL_IDENTIFY&lt;Spell Identify&gt;|SPELL_IMPLOSION&lt;Spell Implosion&gt;|SPELL_IMPROVED_INVISIBILITY&lt;Spell Improved Invisibility&gt;|SPELL_INCENDIARY_CLOUD&lt;Spell Incendiary Cloud&gt;|SPELL_INVISIBILITY&lt;Spell Invisibility&gt;|SPELL_INVISIBILITY_PURGE&lt;Spell Invisibility Purge&gt;|SPELL_INVISIBILITY_SPHERE&lt;Spell Invisibility Sphere&gt;|SPELL_KNOCK&lt;Spell Knock&gt;|SPELL_LEGEND_LORE&lt;Spell Legend Lore&gt;|SPELL_LESSER_DISPEL&lt;Spell Lesser Dispel&gt;|SPELL_LESSER_MIND_BLANK&lt;Spell Lesser Mind Blank&gt;|SPELL_LESSER_PLANAR_BINDING&lt;Spell Lesser Planar Binding&gt;|SPELL_LESSER_RESTORATION&lt;Spell Lesser Restoration&gt;|SPELL_LESSER_SPELL_BREACH&lt;Spell Lesser Spell Breach&gt;|SPELL_LESSER_SPELL_MANTLE&lt;Spell Lesser Spell Mantle&gt;|SPELL_LIGHT&lt;Spell Light&gt;|SPELL_LIGHTNING_BOLT&lt;Spell Lightning Bolt&gt;|SPELL_MAGE_ARMOR&lt;Spell Mage Armor&gt;|SPELL_MAGIC_CIRCLE_AGAINST_CHAOS&lt;Spell Magic Circle Against Chaos&gt;|SPELL_MAGIC_CIRCLE_AGAINST_EVIL&lt;Spell Magic Circle Against Evil&gt;|SPELL_MAGIC_CIRCLE_AGAINST_GOOD&lt;Spell Magic Circle Against Good&gt;|SPELL_MAGIC_CIRCLE_AGAINST_LAW&lt;Spell Magic Circle Against Law&gt;|SPELL_MAGIC_MISSILE&lt;Spell Magic Missile&gt;|SPELL_MAGIC_VESTMENT&lt;Spell Magic Vestment&gt;|SPELL_MAGIC_WEAPON&lt;Spell Magic Weapon&gt;|SPELL_MASS_BLINDNESS_AND_DEAFNESS&lt;Spell Mass Blindness And Deafness&gt;|SPELL_MASS_CHARM&lt;Spell Mass Charm&gt;|SPELL_MELFS_ACID_ARROW&lt;Spell Melfs Acid Arrow&gt;|SPELL_METEOR_SWARM&lt;Spell Meteor Swarm&gt;|SPELL_MIND_BLANK&lt;Spell Mind Blank&gt;|SPELL_MIND_FOG&lt;Spell Mind Fog&gt;|SPELL_MINOR_GLOBE_OF_INVULNERABILITY&lt;Spell Minor Globe Of Invulnerability&gt;|SPELL_MORDENKAINENS_DISJUNCTION&lt;Spell Mordenkainens Disjunction&gt;|SPELL_MORDENKAINENS_SWORD&lt;Spell Mordenkainens Sword&gt;|SPELL_NATURES_BALANCE&lt;Spell Natures Balance&gt;|SPELL_NEGATIVE_ENERGY_BURST&lt;Spell Negative Energy Burst&gt;|SPELL_NEGATIVE_ENERGY_PROTECTION&lt;Spell Negative Energy Protection&gt;|SPELL_NEGATIVE_ENERGY_RAY&lt;Spell Negative Energy Ray&gt;|SPELL_NEUTRALIZE_POISON&lt;Spell Neutralize Poison&gt;|SPELL_OWLS_WISDOM&lt;Spell Owls Wisdom&gt;|SPELL_PHANTASMAL_KILLER&lt;Spell Phantasmal Killer&gt;|SPELL_PLANAR_BINDING&lt;Spell Planar Binding&gt;|SPELL_POISON&lt;Spell Poison&gt;|SPELL_POLYMORPH_SELF&lt;Spell Polymorph Self&gt;|SPELL_POWER_WORD_KILL&lt;Spell Power Word Kill&gt;|SPELL_POWER_WORD_STUN&lt;Spell Power Word Stun&gt;|SPELL_PRAYER&lt;Spell Prayer&gt;|SPELL_PREMONITION&lt;Spell Premonition&gt;|SPELL_PRISMATIC_SPRAY&lt;Spell Prismatic Spray&gt;|SPELL_PROTECTION__FROM_CHAOS&lt;Spell Protection  From Chaos&gt;|SPELL_PROTECTION_FROM_ELEMENTS&lt;Spell Protection From Elements&gt;|SPELL_PROTECTION_FROM_EVIL&lt;Spell Protection From Evil&gt;|SPELL_PROTECTION_FROM_GOOD&lt;Spell Protection From Good&gt;|SPELL_PROTECTION_FROM_LAW&lt;Spell Protection From Law&gt;|SPELL_PROTECTION_FROM_SPELLS&lt;Spell Protection From Spells&gt;|SPELL_RAISE_DEAD&lt;Spell Raise Dead&gt;|SPELL_RAY_OF_ENFEEBLEMENT&lt;Spell Ray Of Enfeeblement&gt;|SPELL_RAY_OF_FROST&lt;Spell Ray Of Frost&gt;|SPELL_REGENERATE&lt;Spell Regenerate&gt;|SPELL_REMOVE_BLINDNESS_AND_DEAFNESS&lt;Spell Remove Blindness And Deafness&gt;|SPELL_REMOVE_CURSE&lt;Spell Remove Curse&gt;|SPELL_REMOVE_DISEASE&lt;Spell Remove Disease&gt;|SPELL_REMOVE_FEAR&lt;Spell Remove Fear&gt;|SPELL_REMOVE_PARALYSIS&lt;Spell Remove Paralysis&gt;|SPELL_RESIST_ELEMENTS&lt;Spell Resist Elements&gt;|SPELL_RESISTANCE&lt;Spell Resistance&gt;|SPELL_RESTORATION&lt;Spell Restoration&gt;|SPELL_RESURRECTION&lt;Spell Resurrection&gt;|SPELL_SANCTUARY&lt;Spell Sanctuary&gt;|SPELL_SCARE&lt;Spell Scare&gt;|SPELL_SEARING_LIGHT&lt;Spell Searing Light&gt;|SPELL_SEE_INVISIBILITY&lt;Spell See Invisibility&gt;|SPELL_SHADES_CONE_OF_COLD&lt;Spell Shades Cone Of Cold&gt;|SPELL_SHADES_FIREBALL&lt;Spell Shades Fireball&gt;|SPELL_SHADES_STONESKIN&lt;Spell Shades Stoneskin&gt;|SPELL_SHADES_SUMMON_SHADOW&lt;Spell Shades Summon Shadow&gt;|SPELL_SHADES_WALL_OF_FIRE&lt;Spell Shades Wall Of Fire&gt;|SPELL_SHADOW_CONJURATION_DARKNESS&lt;Spell Shadow Conjuration Darkness&gt;|SPELL_SHADOW_CONJURATION_INIVSIBILITY&lt;Spell Shadow Conjuration Inivsibility&gt;|SPELL_SHADOW_CONJURATION_MAGE_ARMOR&lt;Spell Shadow Conjuration Mage Armor&gt;|SPELL_SHADOW_CONJURATION_MAGIC_MISSILE&lt;Spell Shadow Conjuration Magic Missile&gt;|SPELL_SHADOW_CONJURATION_SUMMON_SHADOW&lt;Spell Shadow Conjuration Summon Shadow&gt;|SPELL_SHADOW_SHIELD&lt;Spell Shadow Shield&gt;|SPELL_SHAPECHANGE&lt;Spell Shapechange&gt;|SPELL_SHIELD_OF_LAW&lt;Spell Shield Of Law&gt;|SPELL_SILENCE&lt;Spell Silence&gt;|SPELL_SLAY_LIVING&lt;Spell Slay Living&gt;|SPELL_SLEEP&lt;Spell Sleep&gt;|SPELL_SLOW&lt;Spell Slow&gt;|SPELL_SOUND_BURST&lt;Spell Sound Burst&gt;|SPELL_SPELL_MANTLE&lt;Spell Spell Mantle&gt;|SPELL_SPELL_RESISTANCE&lt;Spell Spell Resistance&gt;|SPELL_SPHERE_OF_CHAOS&lt;Spell Sphere Of Chaos&gt;|SPELL_STINKING_CLOUD&lt;Spell Stinking Cloud&gt;|SPELL_STONESKIN&lt;Spell Stoneskin&gt;|SPELL_STORM_OF_VENGEANCE&lt;Spell Storm Of Vengeance&gt;|SPELL_SUMMON_CREATURE_I&lt;Spell Summon Creature I&gt;|SPELL_SUMMON_CREATURE_II&lt;Spell Summon Creature Ii&gt;|SPELL_SUMMON_CREATURE_III&lt;Spell Summon Creature Iii&gt;|SPELL_SUMMON_CREATURE_IV&lt;Spell Summon Creature Iv&gt;|SPELL_SUMMON_CREATURE_V&lt;Spell Summon Creature V&gt;|SPELL_SUMMON_CREATURE_VI&lt;Spell Summon Creature Vi&gt;|SPELL_SUMMON_CREATURE_VII&lt;Spell Summon Creature Vii&gt;|SPELL_SUMMON_CREATURE_VIII&lt;Spell Summon Creature Viii&gt;|SPELL_SUMMON_CREATURE_IX&lt;Spell Summon Creature Ix&gt;|SPELL_SUNBEAM&lt;Spell Sunbeam&gt;|SPELL_TENSERS_TRANSFORMATION&lt;Spell Tensers Transformation&gt;|SPELL_TIME_STOP&lt;Spell Time Stop&gt;|SPELL_TRUE_SEEING&lt;Spell True Seeing&gt;|SPELL_UNHOLY_AURA&lt;Spell Unholy Aura&gt;|SPELL_VAMPIRIC_TOUCH&lt;Spell Vampiric Touch&gt;|SPELL_VIRTUE&lt;Spell Virtue&gt;|SPELL_WAIL_OF_THE_BANSHEE&lt;Spell Wail Of The Banshee&gt;|SPELL_WALL_OF_FIRE&lt;Spell Wall Of Fire&gt;|SPELL_WAR_CRY&lt;Spell War Cry&gt;|SPELL_WEB&lt;Spell Web&gt;|SPELL_WEIRD&lt;Spell Weird&gt;|SPELL_WORD_OF_FAITH&lt;Spell Word Of Faith&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>SpellVisualEffect</Name>
      <Keyword>spell_visual_effect</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_DUR_ANTI_LIGHT_10&lt;Dur Anti Light 10&gt;|VFX_DUR_AURA_COLD&lt;Dur Aura Cold&gt;|VFX_DUR_AURA_DISEASE&lt;Dur Aura Disease&gt;|VFX_DUR_AURA_DRAGON_FEAR&lt;Dur Aura Dragon Fear&gt;|VFX_DUR_AURA_FIRE&lt;Dur Aura Fire&gt;|VFX_DUR_AURA_ODD&lt;Dur Aura Odd&gt;|VFX_DUR_AURA_POISON&lt;Dur Aura Poison&gt;|VFX_DUR_AURA_SILENCE&lt;Dur Aura Silence&gt;|VFX_DUR_BARD_SONG&lt;Dur Bard Song&gt;|VFX_DUR_BIGBYS_CLENCHED_FIST&lt;Dur Bigbys Clenched Fist&gt;|VFX_DUR_BIGBYS_CRUSHING_HAND&lt;Dur Bigbys Crushing Hand&gt;|VFX_DUR_BIGBYS_GRASPING_HAND&lt;Dur Bigbys Grasping Hand&gt;|VFX_DUR_BIGBYS_INTERPOSING_HAND&lt;Dur Bigbys Interposing Hand&gt;|VFX_DUR_BLACKOUT&lt;Dur Blackout&gt;|VFX_DUR_BLIND&lt;Dur Blind&gt;|VFX_DUR_BLUR&lt;Dur Blur&gt;|VFX_DUR_CALTROPS&lt;Dur Caltrops&gt;|VFX_DUR_CESSATE_NEGATIVE&lt;Dur Cessate Negative&gt;|VFX_DUR_CESSATE_NEUTRAL&lt;Dur Cessate Neutral&gt;|VFX_DUR_CESSATE_POSITIVE&lt;Dur Cessate Positive&gt;|VFX_DUR_CUTSCENE_INVISIBILITY&lt;Dur Cutscene Invisibility&gt;|VFX_DUR_DARKNESS&lt;Dur Darkness&gt;|VFX_DUR_DARKVISION&lt;Dur Darkvision&gt;|VFX_DUR_ELEMENTAL_SHIELD&lt;Dur Elemental Shield&gt;|VFX_DUR_ENTANGLE&lt;Dur Entangle&gt;|VFX_DUR_ETHEREAL_VISAGE&lt;Dur Ethereal Visage&gt;|VFX_DUR_FLAG_BLUE&lt;Dur Flag Blue&gt;|VFX_DUR_FLAG_PURPLE&lt;Dur Flag Purple&gt;|VFX_DUR_FLAG_RED&lt;Dur Flag Red&gt;|VFX_DUR_FLAG_YELLOW&lt;Dur Flag Yellow&gt;|VFX_DUR_FREEDOM_OF_MOVEMENT&lt;Dur Freedom Of Movement&gt;|VFX_DUR_FREEZE_ANIMATION&lt;Dur Freeze Animation&gt;|VFX_DUR_GHOSTLY_PULSE&lt;Dur Ghostly Pulse&gt;|VFX_DUR_GHOSTLY_VISAGE&lt;Dur Ghostly Visage&gt;|VFX_DUR_GLOBE_INVULNERABILITY&lt;Dur Globe Invulnerability&gt;|VFX_DUR_GLOBE_MINOR&lt;Dur Globe Minor&gt;|VFX_DUR_INVISIBILITY&lt;Dur Invisibility&gt;|VFX_DUR_LIGHT&lt;Dur Light&gt;|VFX_DUR_LIGHT_BLUE_5&lt;Dur Light Blue 5&gt;|VFX_DUR_LIGHT_BLUE_10&lt;Dur Light Blue 10&gt;|VFX_DUR_LIGHT_BLUE_15&lt;Dur Light Blue 15&gt;|VFX_DUR_LIGHT_BLUE_20&lt;Dur Light Blue 20&gt;|VFX_DUR_LIGHT_GREY_5&lt;Dur Light Grey 5&gt;|VFX_DUR_LIGHT_GREY_15&lt;Dur Light Grey 15&gt;|VFX_DUR_LIGHT_GREY_10&lt;Dur Light Grey 10&gt;|VFX_DUR_LIGHT_GREY_20&lt;Dur Light Grey 20&gt;|VFX_DUR_LIGHT_ORANGE_5&lt;Dur Light Orange 5&gt;|VFX_DUR_LIGHT_ORANGE_10&lt;Dur Light Orange 10&gt;|VFX_DUR_LIGHT_ORANGE_15&lt;Dur Light Orange 15&gt;|VFX_DUR_LIGHT_ORANGE_20&lt;Dur Light Orange 20&gt;|VFX_DUR_LIGHT_PURPLE_5&lt;Dur Light Purple 5&gt;|VFX_DUR_LIGHT_PURPLE_10&lt;Dur Light Purple 10&gt;|VFX_DUR_LIGHT_PURPLE_15&lt;Dur Light Purple 15&gt;|VFX_DUR_LIGHT_PURPLE_20&lt;Dur Light Purple 20&gt;|VFX_DUR_LIGHT_RED_5&lt;Dur Light Red 5&gt;|VFX_DUR_LIGHT_RED_10&lt;Dur Light Red 10&gt;|VFX_DUR_LIGHT_RED_15&lt;Dur Light Red 15&gt;|VFX_DUR_LIGHT_RED_20&lt;Dur Light Red 20&gt;|VFX_DUR_LIGHT_WHITE_5&lt;Dur Light White 5&gt;|VFX_DUR_LIGHT_WHITE_10&lt;Dur Light White 10&gt;|VFX_DUR_LIGHT_WHITE_15&lt;Dur Light White 15&gt;|VFX_DUR_LIGHT_WHITE_20&lt;Dur Light White 20&gt;|VFX_DUR_LIGHT_YELLOW_5&lt;Dur Light Yellow 5&gt;|VFX_DUR_LIGHT_YELLOW_10&lt;Dur Light Yellow 10&gt;|VFX_DUR_LIGHT_YELLOW_15&lt;Dur Light Yellow 15&gt;|VFX_DUR_LIGHT_YELLOW_20&lt;Dur Light Yellow 20&gt;|VFX_DUR_LOWLIGHTVISION&lt;Dur Lowlightvision&gt;|VFX_DUR_MAGIC_RESISTANCE&lt;Dur Magic Resistance&gt;|VFX_DUR_MAGICAL_SIGHT&lt;Dur Magical Sight&gt;|VFX_DUR_MIND_AFFECTING_DISABLED&lt;Dur Mind Affecting Disabled&gt;|VFX_DUR_MIND_AFFECTING_DOMINATED&lt;Dur Mind Affecting Dominated&gt;|VFX_DUR_MIND_AFFECTING_FEAR&lt;Dur Mind Affecting Fear&gt;|VFX_DUR_MIND_AFFECTING_NEGATIVE&lt;Dur Mind Affecting Negative&gt;|VFX_DUR_MIND_AFFECTING_POSITIVE&lt;Dur Mind Affecting Positive&gt;|VFX_DUR_MIRV_ACID&lt;Dur Mirv Acid&gt;|VFX_DUR_PARALYZE_HOLD&lt;Dur Paralyze Hold&gt;|VFX_DUR_PARALYZED&lt;Dur Paralyzed&gt;|VFX_DUR_PETRIFY&lt;Dur Petrify&gt;|VFX_DUR_PROT_BARKSKIN&lt;Dur Prot Barkskin&gt;|VFX_DUR_PROTECTION_EVIL_MAJOR&lt;Dur Protection Evil Major&gt;|VFX_DUR_PROTECTION_EVIL_MINOR&lt;Dur Protection Evil Minor&gt;|VFX_DUR_PROTECTION_GOOD_MAJOR&lt;Dur Protection Good Major&gt;|VFX_DUR_PROTECTION_GOOD_MINOR&lt;Dur Protection Good Minor&gt;|VFX_DUR_PROT_GREATER_STONESKIN&lt;Dur Prot Greater Stoneskin&gt;|VFX_DUR_PROT_PREMONITION&lt;Dur Prot Premonition&gt;|VFX_DUR_PROT_SHADOW_ARMOR&lt;Dur Prot Shadow Armor&gt;|VFX_DUR_PROT_STONESKIN&lt;Dur Prot Stoneskin&gt;|VFX_DUR_SANCTUARY&lt;Dur Sanctuary&gt;|VFX_DUR_SPELLTURNING&lt;Dur Spellturning&gt;|VFX_DUR_ULTRAVISION&lt;Dur Ultravision&gt;|VFX_DUR_WEB&lt;Dur Web&gt;|VFX_DUR_WEB_MASS&lt;Dur Web Mass&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>SpellAbility</Name>
      <Keyword>spell_ability</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SPELLABILITY_TURN_UNDEAD&lt;Spellability Turn Undead&gt;|SPELLABILITY_AA_ARROW_OF_DEATH&lt;Spellability Aa Arrow Of Death&gt;|SPELLABILITY_AA_HAIL_OF_ARROWS&lt;Spellability Aa Hail Of Arrows&gt;|SPELLABILITY_AA_IMBUE_ARROW&lt;Spellability Aa Imbue Arrow&gt;|SPELLABILITY_AA_SEEKER_ARROW_1&lt;Spellability Aa Seeker Arrow 1&gt;|SPELLABILITY_AA_SEEKER_ARROW_2&lt;Spellability Aa Seeker Arrow 2&gt;|SPELLABILITY_ACTIVATE_ITEM&lt;Spellability Activate Item&gt;|SPELLABILITY_AS_DARKNESS&lt;Spellability As Darkness&gt;|SPELLABILITY_AS_GHOSTLY_VISAGE&lt;Spellability As Ghostly Visage&gt;|SPELLABILITY_AS_IMPROVED_INVISIBLITY&lt;Spellability As Improved Invisiblity&gt;|SPELLABILITY_AS_INVISIBILITY&lt;Spellability As Invisibility&gt;|SPELLABILITY_AURA_BLINDING&lt;Spellability Aura Blinding&gt;|SPELLABILITY_AURA_COLD&lt;Spellability Aura Cold&gt;|SPELLABILITY_AURA_ELECTRICITY&lt;Spellability Aura Electricity&gt;|SPELLABILITY_AURA_FEAR&lt;Spellability Aura Fear&gt;|SPELLABILITY_AURA_FIRE&lt;Spellability Aura Fire&gt;|SPELLABILITY_AURA_MENACE&lt;Spellability Aura Menace&gt;|SPELLABILITY_AURA_OF_COURAGE&lt;Spellability Aura Of Courage&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>VisualEffectImpact</Name>
      <Keyword>visual_effect_impact</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_IMP_AC_BONUS&lt;Imp Ac Bonus&gt;|VFX_IMP_ACID_L&lt;Imp Acid L&gt;|VFX_IMP_ACID_S&lt;Imp Acid S&gt;|VFX_IMP_AURA_FEAR&lt;Imp Aura Fear&gt;|VFX_IMP_AURA_HOLY&lt;Imp Aura Holy&gt;|VFX_IMP_AURA_NEGATIVE_ENERGY&lt;Imp Aura Negative Energy&gt;|VFX_IMP_AURA_UNEARTHLY&lt;Imp Aura Unearthly&gt;|VFX_IMP_BLIND_DEAF_M&lt;Imp Blind Deaf M&gt;|VFX_IMP_BREACH&lt;Imp Breach&gt;|VFX_IMP_CHARM&lt;Imp Charm&gt;|VFX_IMP_CONFUSION_S&lt;Imp Confusion S&gt;|VFX_IMP_DAZED_S&lt;Imp Dazed S&gt;|VFX_IMP_DEATH&lt;Imp Death&gt;|VFX_IMP_DEATH_L&lt;Imp Death L&gt;|VFX_IMP_DEATH_WARD&lt;Imp Death Ward&gt;|VFX_IMP_DESTRUCTION&lt;Imp Destruction&gt;|VFX_IMP_DISEASE_S&lt;Imp Disease S&gt;|VFX_IMP_DISPEL&lt;Imp Dispel&gt;|VFX_IMP_DISPEL_DISJUNCTION&lt;Imp Dispel Disjunction&gt;|VFX_IMP_DIVINE_STRIKE_FIRE&lt;Imp Divine Strike Fire&gt;|VFX_IMP_DOMINATE_S&lt;Imp Dominate S&gt;|VFX_IMP_DOOM&lt;Imp Doom&gt;|VFX_IMP_ELEMENTAL_PROTECTION&lt;Imp Elemental Protection&gt;|VFX_IMP_EVIL_HELP&lt;Imp Evil Help&gt;|VFX_IMP_FEAR_S&lt;Imp Fear S&gt;|VFX_IMP_FLAME_M&lt;Imp Flame M&gt;|VFX_IMP_FLAME_S&lt;Imp Flame S&gt;|VFX_IMP_FORTITUDE_SAVING_THROW_USE&lt;Imp Fortitude Saving Throw Use&gt;|VFX_IMP_FROST_L&lt;Imp Frost L&gt;|VFX_IMP_FROST_S&lt;Imp Frost S&gt;|VFX_IMP_GLOBE_USE&lt;Imp Globe Use&gt;|VFX_IMP_GOOD_HELP&lt;Imp Good Help&gt;|VFX_IMP_GREASE&lt;Imp Grease&gt;|VFX_IMP_HARM&lt;Imp Harm&gt;|VFX_IMP_HASTE&lt;Imp Haste&gt;|VFX_IMP_HEAD_ACID&lt;Imp Head Acid&gt;|VFX_IMP_HEAD_COLD&lt;Imp Head Cold&gt;|VFX_IMP_HEAD_ELECTRICITY&lt;Imp Head Electricity&gt;|VFX_IMP_HEAD_EVIL&lt;Imp Head Evil&gt;|VFX_IMP_HEAD_FIRE&lt;Imp Head Fire&gt;|VFX_IMP_HEAD_HEAL&lt;Imp Head Heal&gt;|VFX_IMP_HEAD_HOLY&lt;Imp Head Holy&gt;|VFX_IMP_HEAD_MIND&lt;Imp Head Mind&gt;|VFX_IMP_HEAD_NATURE&lt;Imp Head Nature&gt;|VFX_IMP_HEAD_ODD&lt;Imp Head Odd&gt;|VFX_IMP_HEAD_SONIC&lt;Imp Head Sonic&gt;|VFX_IMP_HEALING_X&lt;Imp Healing X&gt;|VFX_IMP_HEALING_G&lt;Imp Healing G&gt;|VFX_IMP_HEALING_L&lt;Imp Healing L&gt;|VFX_IMP_HEALING_M&lt;Imp Healing M&gt;|VFX_IMP_HEALING_S&lt;Imp Healing S&gt;|VFX_IMP_HOLY_AID&lt;Imp Holy Aid&gt;|VFX_IMP_IMPROVE_ABILITY_SCORE&lt;Imp Improve Ability Score&gt;|VFX_IMP_KNOCK&lt;Imp Knock&gt;|VFX_IMP_LIGHTNING_M&lt;Imp Lightning M&gt;|VFX_IMP_LIGHTNING_S&lt;Imp Lightning S&gt;|VFX_IMP_MAGBLUE&lt;Imp Magblue&gt;|VFX_IMP_MAGIC_PROTECTION&lt;Imp Magic Protection&gt;|VFX_IMP_MAGIC_RESISTANCE_USE&lt;Imp Magic Resistance Use&gt;|VFX_IMP_MAGICAL_VISION&lt;Imp Magical Vision&gt;|VFX_IMP_MIRV&lt;Imp Mirv&gt;|VFX_IMP_MIRV_FLAME&lt;Imp Mirv Flame&gt;|VFX_IMP_NEGATIVE_ENERGY&lt;Imp Negative Energy&gt;|VFX_IMP_POISON_L&lt;Imp Poison L&gt;|VFX_IMP_POISON_S&lt;Imp Poison S&gt;|VFX_IMP_POLYMORPH&lt;Imp Polymorph&gt;|VFX_IMP_PULSE_COLD&lt;Imp Pulse Cold&gt;|VFX_IMP_PULSE_FIRE&lt;Imp Pulse Fire&gt;|VFX_IMP_PULSE_HOLY&lt;Imp Pulse Holy&gt;|VFX_IMP_PULSE_NATURE&lt;Imp Pulse Nature&gt;|VFX_IMP_PULSE_NEGATIVE&lt;Imp Pulse Negative&gt;|VFX_IMP_PULSE_WATER&lt;Imp Pulse Water&gt;|VFX_IMP_PULSE_WIND&lt;Imp Pulse Wind&gt;|VFX_IMP_RAISE_DEAD&lt;Imp Raise Dead&gt;|VFX_IMP_REDUCE_ABILITY_SCORE&lt;Imp Reduce Ability Score&gt;|VFX_IMP_REFLEX_SAVE_THROW_USE&lt;Imp Reflex Save Throw Use&gt;|VFX_IMP_REMOVE_CONDITION&lt;Imp Remove Condition&gt;|VFX_IMP_RESTORATION&lt;Imp Restoration&gt;|VFX_IMP_RESTORATION_GREATER&lt;Imp Restoration Greater&gt;|VFX_IMP_RESTORATION_LESSER&lt;Imp Restoration Lesser&gt;|VFX_IMP_SILENCE&lt;Imp Silence&gt;|VFX_IMP_SLEEP&lt;Imp Sleep&gt;|VFX_IMP_SLOW&lt;Imp Slow&gt;|VFX_IMP_SONIC&lt;Imp Sonic&gt;|VFX_IMP_SPELL_MANTLE_USE&lt;Imp Spell Mantle Use&gt;|VFX_IMP_SPIKE_TRAP&lt;Imp Spike Trap&gt;|VFX_IMP_STUN&lt;Imp Stun&gt;|VFX_IMP_SUNSTRIKE&lt;Imp Sunstrike&gt;|VFX_IMP_SUPER_HEROISM&lt;Imp Super Heroism&gt;|VFX_IMP_UNSUMMON&lt;Imp Unsummon&gt;|VFX_IMP_WILL_SAVING_THROW_USE&lt;Imp Will Saving Throw Use&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>VisualEffectBeam</Name>
      <Keyword>visual_effect_beam</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_BEAM_COLD&lt;Beam Cold&gt;|VFX_BEAM_EVIL&lt;Beam Evil&gt;|VFX_BEAM_FIRE&lt;Beam Fire&gt;|VFX_BEAM_FIRE_LASH&lt;Beam Fire Lash&gt;|VFX_BEAM_HOLY&lt;Beam Holy&gt;|VFX_BEAM_LIGHTNING&lt;Beam Lightning&gt;|VFX_BEAM_MIND&lt;Beam Mind&gt;|VFX_BEAM_ODD&lt;Beam Odd&gt;|VFX_BEAM_SILENT_COLD&lt;Beam Silent Cold&gt;|VFX_BEAM_SILENT_EVIL&lt;Beam Silent Evil&gt;|VFX_BEAM_SILENT_FIRE&lt;Beam Silent Fire&gt;|VFX_BEAM_SILENT_HOLY&lt;Beam Silent Holy&gt;|VFX_BEAM_SILENT_LIGHTNING&lt;Beam Silent Lightning&gt;|VFX_BEAM_SILENT_MIND&lt;Beam Silent Mind&gt;|VFX_BEAM_SILENT_ODD&lt;Beam Silent Odd&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>VisualEffectCombat</Name>
      <Keyword>visual_effect_combat</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_COM_BLOOD_LRG_GREEN&lt;Com Blood Lrg Green&gt;|VFX_COM_BLOOD_LRG_RED&lt;Com Blood Lrg Red&gt;|VFX_COM_BLOOD_LRG_WIMP&lt;Com Blood Lrg Wimp&gt;|VFX_COM_BLOOD_LRG_YELLOW&lt;Com Blood Lrg Yellow&gt;|VFX_COM_BLOOD_REG_GREEN&lt;Com Blood Reg Green&gt;|VFX_COM_BLOOD_REG_RED&lt;Com Blood Reg Red&gt;|VFX_COM_BLOOD_REG_WIMP&lt;Com Blood Reg Wimp&gt;|VFX_COM_BLOOD_REG_YELLOW&lt;Com Blood Reg Yellow&gt;|VFX_COM_BLOOD_CRT_GREEN&lt;Com Blood Crt Green&gt;|VFX_COM_BLOOD_CRT_RED&lt;Com Blood Crt Red&gt;|VFX_COM_BLOOD_CRT_WIMP&lt;Com Blood Crt Wimp&gt;|VFX_COM_BLOOD_CRT_YELLOW&lt;Com Blood Crt Yellow&gt;|VFX_COM_BLOOD_SPARK_LARGE&lt;Com Blood Spark Large&gt;|VFX_COM_BLOOD_SPARK_MEDIUM&lt;Com Blood Spark Medium&gt;|VFX_COM_BLOOD_SPARK_SMALL&lt;Com Blood Spark Small&gt;|VFX_COM_CHUNK_RED_LARGE&lt;Com Chunk Red Large&gt;|VFX_COM_CHUNK_BONE_MEDIUM&lt;Com Chunk Bone Medium&gt;|VFX_COM_CHUNK_GREEN_MEDIUM&lt;Com Chunk Green Medium&gt;|VFX_COM_CHUNK_RED_MEDIUM&lt;Com Chunk Red Medium&gt;|VFX_COM_CHUNK_YELLOW_MEDIUM&lt;Com Chunk Yellow Medium&gt;|VFX_COM_CHUNK_GREEN_SMALL&lt;Com Chunk Green Small&gt;|VFX_COM_CHUNK_RED_SMALL&lt;Com Chunk Red Small&gt;|VFX_COM_CHUNK_YELLOW_SMALL&lt;Com Chunk Yellow Small&gt;|VFX_COM_HIT_ACID&lt;Com Hit Acid&gt;|VFX_COM_HIT_DIVINE&lt;Com Hit Divine&gt;|VFX_COM_HIT_ELECTRICAL&lt;Com Hit Electrical&gt;|VFX_COM_HIT_FIRE&lt;Com Hit Fire&gt;|VFX_COM_HIT_FROST&lt;Com Hit Frost&gt;|VFX_COM_HIT_NEGATIVE&lt;Com Hit Negative&gt;|VFX_COM_HIT_SONIC&lt;Com Hit Sonic&gt;|VFX_COM_SPARKS_PARRY&lt;Com Sparks Parry&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>VisualEffectFiredEffect</Name>
      <Keyword>visual_effect_effect</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_FNF_BLINDDEAF&lt;Fnf Blinddeaf&gt;|VFX_FNF_DISPEL&lt;Fnf Dispel&gt;|VFX_FNF_DISPEL_DISJUNCTION&lt;Fnf Dispel Disjunction&gt;|VFX_FNF_DISPEL_GREATER&lt;Fnf Dispel Greater&gt;|VFX_FNF_FIREBALL&lt;Fnf Fireball&gt;|VFX_FNF_FIRESTORM&lt;Fnf Firestorm&gt;|VFX_FNF_GAS_EXPLOSION_ACID&lt;Fnf Gas Explosion Acid&gt;|VFX_FNF_GAS_EXPLOSION_EVIL&lt;Fnf Gas Explosion Evil&gt;|VFX_FNF_GAS_EXPLOSION_FIRE&lt;Fnf Gas Explosion Fire&gt;|VFX_FNF_GAS_EXPLOSION_GREASE&lt;Fnf Gas Explosion Grease&gt;|VFX_FNF_GAS_EXPLOSION_MIND&lt;Fnf Gas Explosion Mind&gt;|VFX_FNF_GAS_EXPLOSION_NATURE&lt;Fnf Gas Explosion Nature&gt;|VFX_FNF_HORRID_WILTING&lt;Fnf Horrid Wilting&gt;|VFX_FNF_HOWL_MIND&lt;Fnf Howl Mind&gt;|VFX_FNF_HOWL_ODD&lt;Fnf Howl Odd&gt;|VFX_FNF_HOWL_WAR_CRY&lt;Fnf Howl War Cry&gt;|VFX_FNF_HOWL_WAR_CRY_FEMALE&lt;Fnf Howl War Cry Female&gt;|VFX_FNF_STRIKE_HOLY&lt;Fnf Strike Holy&gt;|VFX_FNF_ICESTORM&lt;Fnf Icestorm&gt;|VFX_FNF_IMPLOSION&lt;Fnf Implosion&gt;|VFX_FNF_PWKILL&lt;Fnf Pwkill&gt;|VFX_FNF_MASS_HEAL&lt;Fnf Mass Heal&gt;|VFX_FNF_MASS_MIND_AFFECTING&lt;Fnf Mass Mind Affecting&gt;|VFX_FNF_METEOR_SWARM&lt;Fnf Meteor Swarm&gt;|VFX_FNF_NATURES_BALANCE&lt;Fnf Natures Balance&gt;|VFX_FNF_LOS_EVIL_10&lt;Fnf Los Evil 10&gt;|VFX_FNF_LOS_EVIL_20&lt;Fnf Los Evil 20&gt;|VFX_FNF_LOS_EVIL_30&lt;Fnf Los Evil 30&gt;|VFX_FNF_LOS_HOLY_10&lt;Fnf Los Holy 10&gt;|VFX_FNF_LOS_HOLY_20&lt;Fnf Los Holy 20&gt;|VFX_FNF_LOS_HOLY_30&lt;Fnf Los Holy 30&gt;|VFX_FNF_LOS_NORMAL_10&lt;Fnf Los Normal 10&gt;|VFX_FNF_LOS_NORMAL_20&lt;Fnf Los Normal 20&gt;|VFX_FNF_LOS_NORMAL_30&lt;Fnf Los Normal 30&gt;|VFX_FNF_SCREEN_BUMP&lt;Fnf Screen Bump&gt;|VFX_FNF_SCREEN_SHAKE&lt;Fnf Screen Shake&gt;|VFX_FNF_SMOKE_PUFF&lt;Fnf Smoke Puff&gt;|VFX_FNF_SOUND_BURST&lt;Fnf Sound Burst&gt;|VFX_FNF_STORM&lt;Fnf Storm&gt;|VFX_FNF_PWSTUN&lt;Fnf Pwstun&gt;|VFX_FNF_SUMMON_CELESTIAL&lt;Fnf Summon Celestial&gt;|VFX_FNF_SUMMON_GATE&lt;Fnf Summon Gate&gt;|VFX_FNF_SUMMON_MONSTER_1&lt;Fnf Summon Monster 1&gt;|VFX_FNF_SUMMON_MONSTER_2&lt;Fnf Summon Monster 2&gt;|VFX_FNF_SUMMON_MONSTER_3&lt;Fnf Summon Monster 3&gt;|VFX_FNF_SUMMON_UNDEAD&lt;Fnf Summon Undead&gt;|VFX_FNF_SUNBEAM&lt;Fnf Sunbeam&gt;|VFX_FNF_TIME_STOP&lt;Fnf Time Stop&gt;|VFX_FNF_WAIL_O_BANSHEES&lt;Fnf Wail O Banshees&gt;|VFX_FNF_WEIRD&lt;Fnf Weird&gt;|VFX_FNF_WORD&lt;Fnf Word&gt;|VFX_FNF_BLINDDEAF&lt;Fnf Blinddeaf&gt;|VFX_FNF_DISPEL&lt;Fnf Dispel&gt;|VFX_FNF_DISPEL_DISJUNCTION&lt;Fnf Dispel Disjunction&gt;|VFX_FNF_DISPEL_GREATER&lt;Fnf Dispel Greater&gt;|VFX_FNF_FIREBALL&lt;Fnf Fireball&gt;|VFX_FNF_FIRESTORM&lt;Fnf Firestorm&gt;|VFX_FNF_GAS_EXPLOSION_ACID&lt;Fnf Gas Explosion Acid&gt;|VFX_FNF_GAS_EXPLOSION_EVIL&lt;Fnf Gas Explosion Evil&gt;|VFX_FNF_GAS_EXPLOSION_FIRE&lt;Fnf Gas Explosion Fire&gt;|VFX_FNF_GAS_EXPLOSION_GREASE&lt;Fnf Gas Explosion Grease&gt;|VFX_FNF_GAS_EXPLOSION_MIND&lt;Fnf Gas Explosion Mind&gt;|VFX_FNF_GAS_EXPLOSION_NATURE&lt;Fnf Gas Explosion Nature&gt;|VFX_FNF_HORRID_WILTING&lt;Fnf Horrid Wilting&gt;|VFX_FNF_HOWL_MIND&lt;Fnf Howl Mind&gt;|VFX_FNF_HOWL_ODD&lt;Fnf Howl Odd&gt;|VFX_FNF_HOWL_WAR_CRY&lt;Fnf Howl War Cry&gt;|VFX_FNF_HOWL_WAR_CRY_FEMALE&lt;Fnf Howl War Cry Female&gt;|VFX_FNF_STRIKE_HOLY&lt;Fnf Strike Holy&gt;|VFX_FNF_ICESTORM&lt;Fnf Icestorm&gt;|VFX_FNF_IMPLOSION&lt;Fnf Implosion&gt;|VFX_FNF_PWKILL&lt;Fnf Pwkill&gt;|VFX_FNF_MASS_HEAL&lt;Fnf Mass Heal&gt;|VFX_FNF_MASS_MIND_AFFECTING&lt;Fnf Mass Mind Affecting&gt;|VFX_FNF_METEOR_SWARM&lt;Fnf Meteor Swarm&gt;|VFX_FNF_NATURES_BALANCE&lt;Fnf Natures Balance&gt;|VFX_FNF_LOS_EVIL_10&lt;Fnf Los Evil 10&gt;|VFX_FNF_LOS_EVIL_20&lt;Fnf Los Evil 20&gt;|VFX_FNF_LOS_EVIL_30&lt;Fnf Los Evil 30&gt;|VFX_FNF_LOS_HOLY_10&lt;Fnf Los Holy 10&gt;|VFX_FNF_LOS_HOLY_20&lt;Fnf Los Holy 20&gt;|VFX_FNF_LOS_HOLY_30&lt;Fnf Los Holy 30&gt;|VFX_FNF_LOS_NORMAL_10&lt;Fnf Los Normal 10&gt;|VFX_FNF_LOS_NORMAL_20&lt;Fnf Los Normal 20&gt;|VFX_FNF_LOS_NORMAL_30&lt;Fnf Los Normal 30&gt;|VFX_FNF_SCREEN_BUMP&lt;Fnf Screen Bump&gt;|VFX_FNF_SCREEN_SHAKE&lt;Fnf Screen Shake&gt;|VFX_FNF_SMOKE_PUFF&lt;Fnf Smoke Puff&gt;|VFX_FNF_SOUND_BURST&lt;Fnf Sound Burst&gt;|VFX_FNF_STORM&lt;Fnf Storm&gt;|VFX_FNF_PWSTUN&lt;Fnf Pwstun&gt;|VFX_FNF_SUMMON_CELESTIAL&lt;Fnf Summon Celestial&gt;|VFX_FNF_SUMMON_GATE&lt;Fnf Summon Gate&gt;|VFX_FNF_SUMMON_MONSTER_1&lt;Fnf Summon Monster 1&gt;|VFX_FNF_SUMMON_MONSTER_2&lt;Fnf Summon Monster 2&gt;|VFX_FNF_SUMMON_MONSTER_3&lt;Fnf Summon Monster 3&gt;|VFX_FNF_SUMMON_UNDEAD&lt;Fnf Summon Undead&gt;|VFX_FNF_SUNBEAM&lt;Fnf Sunbeam&gt;|VFX_FNF_TIME_STOP&lt;Fnf Time Stop&gt;|VFX_FNF_WAIL_O_BANSHEES&lt;Fnf Wail O Banshees&gt;|VFX_FNF_WEIRD&lt;Fnf Weird&gt;|VFX_FNF_WORD&lt;Fnf Word&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>RacialType</Name>
      <Keyword>racial_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>RACIAL_TYPE_ABERRATION&lt;Racial Type Aberration&gt;|RACIAL_TYPE_ALL&lt;Racial Type All&gt;|RACIAL_TYPE_ANIMAL&lt;Racial Type Animal&gt;|RACIAL_TYPE_BEAST&lt;Racial Type Beast&gt;|RACIAL_TYPE_CONSTRUCT&lt;Racial Type Construct&gt;|RACIAL_TYPE_DRAGON&lt;Racial Type Dragon&gt;|RACIAL_TYPE_DWARF&lt;Racial Type Dwarf&gt;|RACIAL_TYPE_ELEMENTAL&lt;Racial Type Elemental&gt;|RACIAL_TYPE_ELF&lt;Racial Type Elf&gt;|RACIAL_TYPE_FEY&lt;Racial Type Fey&gt;|RACIAL_TYPE_GNOME&lt;Racial Type Gnome&gt;|RACIAL_TYPE_GIANT&lt;Racial Type Giant&gt;|RACIAL_TYPE_HALFELF&lt;Racial Type Halfelf&gt;|RACIAL_TYPE_HALFLING&lt;Racial Type Halfling&gt;|RACIAL_TYPE_HALFORC&lt;Racial Type Halforc&gt;|RACIAL_TYPE_HUMAN&lt;Racial Type Human&gt;|RACIAL_TYPE_HUMANOID_GOBLINOID&lt;Racial Type Humanoid Goblinoid&gt;|RACIAL_TYPE_HUMANOID_MONSTROUS&lt;Racial Type Humanoid Monstrous&gt;|RACIAL_TYPE_HUMANOID_ORC&lt;Racial Type Humanoid Orc&gt;|RACIAL_TYPE_HUMANOID_REPTILIAN&lt;Racial Type Humanoid Reptilian&gt;|RACIAL_TYPE_MAGICAL_BEAST&lt;Racial Type Magical Beast&gt;|RACIAL_TYPE_OOZE&lt;Racial Type Ooze&gt;|RACIAL_TYPE_OUTSIDER&lt;Racial Type Outsider&gt;|RACIAL_TYPE_SHAPECHANGER&lt;Racial Type Shapechanger&gt;|RACIAL_TYPE_UNDEAD&lt;Racial Type Undead&gt;|RACIAL_TYPE_VERMIN&lt;Racial Type Vermin&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Alignment</Name>
      <Keyword>alignment</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ALIGNMENT_ALL&lt;Alignment All&gt;|ALIGNMENT_CHAOTIC&lt;Alignment Chaotic&gt;|ALIGNMENT_EVIL&lt;Alignment Evil&gt;|ALIGNMENT_GOOD&lt;Alignment Good&gt;|ALIGNMENT_LAWFUL&lt;Alignment Lawful&gt;|ALIGNMENT_NEUTRAL&lt;Alignment Neutral&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>AppearanceType</Name>
      <Keyword>appearance_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>APPEARANCE_TYPE_ALLIP&lt;Appearance Type Allip&gt;|APPEARANCE_TYPE_ARANEA&lt;Appearance Type Aranea&gt;|APPEARANCE_TYPE_ARCH_TARGET&lt;Appearance Type Arch Target&gt;|APPEARANCE_TYPE_ASABI_CHIEFTAIN&lt;Appearance Type Asabi Chieftain&gt;|APPEARANCE_TYPE_ASABI_SHAMAN&lt;Appearance Type Asabi Shaman&gt;|APPEARANCE_TYPE_ASABI_WARRIOR&lt;Appearance Type Asabi Warrior&gt;|APPEARANCE_TYPE_BADGER&lt;Appearance Type Badger&gt;|APPEARANCE_TYPE_BADGER_DIRE&lt;Appearance Type Badger Dire&gt;|APPEARANCE_TYPE_BALOR&lt;Appearance Type Balor&gt;|APPEARANCE_TYPE_BARTENTER&lt;Appearance Type Bartenter&gt;|APPEARANCE_TYPE_BASILISK&lt;Appearance Type Basilisk&gt;|APPEARANCE_TYPE_BAT&lt;Appearance Type Bat&gt;|APPEARANCE_TYPE_BAT_HORROR&lt;Appearance Type Bat Horror&gt;|APPEARANCE_TYPE_BEAR_BLACK&lt;Appearance Type Bear Black&gt;|APPEARANCE_TYPE_BEAR_BROWN&lt;Appearance Type Bear Brown&gt;|APPEARANCE_TYPE_BEAR_DIRE&lt;Appearance Type Bear Dire&gt;|APPEARANCE_TYPE_BEAR_KODIAK&lt;Appearance Type Bear Kodiak&gt;|APPEARANCE_TYPE_BEAR_POLAR&lt;Appearance Type Bear Polar&gt;|APPEARANCE_TYPE_SPIDER_DEMON&lt;Appearance Type Spider Demon&gt;|APPEARANCE_TYPE_BEETLE_FIRE&lt;Appearance Type Beetle Fire&gt;|APPEARANCE_TYPE_BEETLE_SLICER&lt;Appearance Type Beetle Slicer&gt;|APPEARANCE_TYPE_BEETLE_STAG&lt;Appearance Type Beetle Stag&gt;|APPEARANCE_TYPE_BEETLE_STINK&lt;Appearance Type Beetle Stink&gt;|APPEARANCE_TYPE_BEGGER&lt;Appearance Type Begger&gt;|APPEARANCE_TYPE_BEHOLDER&lt;Appearance Type Beholder&gt;|APPEARANCE_TYPE_BEHOLDER_EYEBALL&lt;Appearance Type Beholder Eyeball&gt;|APPEARANCE_TYPE_BEHOLDER_MAGE&lt;Appearance Type Beholder Mage&gt;|APPEARANCE_TYPE_BEHOLDER_MOTHER&lt;Appearance Type Beholder Mother&gt;|APPEARANCE_TYPE_BLOOD_SAILER&lt;Appearance Type Blood Sailer&gt;|APPEARANCE_TYPE_BOAR&lt;Appearance Type Boar&gt;|APPEARANCE_TYPE_BOAR_DIRE&lt;Appearance Type Boar Dire&gt;|APPEARANCE_TYPE_BODAK&lt;Appearance Type Bodak&gt;|APPEARANCE_TYPE_BUGBEAR_A&lt;Appearance Type Bugbear A&gt;|APPEARANCE_TYPE_BUGBEAR_B&lt;Appearance Type Bugbear B&gt;|APPEARANCE_TYPE_BUGBEAR_CHIEFTAN&lt;Appearance Type Bugbear Chieftan&gt;|APPEARANCE_TYPE_BUGBEAR_CHIEFTAIN_B&lt;Appearance Type Bugbear Chieftain B&gt;|APPEARANCE_TYPE_BUGBEAR_SHAMAN_A&lt;Appearance Type Bugbear Shaman A&gt;|APPEARANCE_TYPE_BUGBEAR_SHAMAN_B&lt;Appearance Type Bugbear Shaman B&gt;|APPEARANCE_TYPE_BULETTE&lt;Appearance Type Bulette&gt;|APPEARANCE_TYPE_OBJECT_CANDLE&lt;Appearance Type Object Candle&gt;|APPEARANCE_TYPE_CAT_CAT_DIRE&lt;Appearance Type Cat Cat Dire&gt;|APPEARANCE_TYPE_COUGAR&lt;Appearance Type Cougar&gt;|APPEARANCE_TYPE_CRAG_CAT&lt;Appearance Type Crag Cat&gt;|APPEARANCE_TYPE_JAGUAR&lt;Appearance Type Jaguar&gt;|APPEARANCE_TYPE_KRENSHAR&lt;Appearance Type Krenshar&gt;|APPEARANCE_TYPE_LEOPARD&lt;Appearance Type Leopard&gt;|APPEARANCE_TYPE_LION&lt;Appearance Type Lion&gt;|APPEARANCE_TYPE_MPANTHER&lt;Appearance Type Mpanther&gt;|APPEARANCE_TYPE_PANTHER&lt;Appearance Type Panther&gt;|APPEARANCE_TYPE_RAKSHASA_BEAR_MALE&lt;Appearance Type Rakshasa Bear Male&gt;|APPEARANCE_TYPE_OBJECT_CHAIR&lt;Appearance Type Object Chair&gt;|APPEARANCE_TYPE_OBJECT_CHEST&lt;Appearance Type Object Chest&gt;|APPEARANCE_TYPE_CHICKEN&lt;Appearance Type Chicken&gt;|APPEARANCE_TYPE_KID_FEMALE&lt;Appearance Type Kid Female&gt;|APPEARANCE_TYPE_KID_MALE&lt;Appearance Type Kid Male&gt;|APPEARANCE_TYPE_COCKATRICE&lt;Appearance Type Cockatrice&gt;|APPEARANCE_TYPE_COMBAT_DUMMY&lt;Appearance Type Combat Dummy&gt;|APPEARANCE_TYPE_CONVICT&lt;Appearance Type Convict&gt;|APPEARANCE_TYPE_COW&lt;Appearance Type Cow&gt;|APPEARANCE_TYPE_CULT_MEMBER&lt;Appearance Type Cult Member&gt;|APPEARANCE_TYPE_DEEP_ROTHE&lt;Appearance Type Deep Rothe&gt;|APPEARANCE_TYPE_DEER&lt;Appearance Type Deer&gt;|APPEARANCE_TYPE_DEER_STAG&lt;Appearance Type Deer Stag&gt;|APPEARANCE_TYPE_DEMI_LICH&lt;Appearance Type Demi Lich&gt;|APPEARANCE_TYPE_&lt;Appearance Type&gt;|APPEARANCE_TYPE_DOG&lt;Appearance Type Dog&gt;|APPEARANCE_TYPE_DOG_BLINKDOG&lt;Appearance Type Dog Blinkdog&gt;|APPEARANCE_TYPE_DOG_DIRE_WOLF&lt;Appearance Type Dog Dire Wolf&gt;|APPEARANCE_TYPE_DOG_FENHOUND&lt;Appearance Type Dog Fenhound&gt;|APPEARANCE_TYPE_DOG_HELL_HOUND&lt;Appearance Type Dog Hell Hound&gt;|APPEARANCE_TYPE_DOG_SHADOW_MASTIF&lt;Appearance Type Dog Shadow Mastif&gt;|APPEARANCE_TYPE_DOG_WINTER_WOLF&lt;Appearance Type Dog Winter Wolf&gt;|APPEARANCE_TYPE_DOG_WOLF&lt;Appearance Type Dog Wolf&gt;|APPEARANCE_TYPE_DOG_WORG&lt;Appearance Type Dog Worg&gt;|APPEARANCE_TYPE_DOOM_KNIGHT&lt;Appearance Type Doom Knight&gt;|APPEARANCE_TYPE_DRACOLICH&lt;Appearance Type Dracolich&gt;|APPEARANCE_TYPE_DRAGON_BLACK&lt;Appearance Type Dragon Black&gt;|APPEARANCE_TYPE_DRAGON_BLUE&lt;Appearance Type Dragon Blue&gt;|APPEARANCE_TYPE_DRAGON_BRASS&lt;Appearance Type Dragon Brass&gt;|APPEARANCE_TYPE_DRAGON_BRONZE&lt;Appearance Type Dragon Bronze&gt;|APPEARANCE_TYPE_DRAGON_COPPER&lt;Appearance Type Dragon Copper&gt;|APPEARANCE_TYPE_DRAGON_GOLD&lt;Appearance Type Dragon Gold&gt;|APPEARANCE_TYPE_DRAGON_GREEN&lt;Appearance Type Dragon Green&gt;|APPEARANCE_TYPE_DRAGON_PRIS&lt;Appearance Type Dragon Pris&gt;|APPEARANCE_TYPE_DRAGON_RED&lt;Appearance Type Dragon Red&gt;|APPEARANCE_TYPE_DRAGON_SHADOW&lt;Appearance Type Dragon Shadow&gt;|APPEARANCE_TYPE_DRAGON_SILVER&lt;Appearance Type Dragon Silver&gt;|APPEARANCE_TYPE_DRAGON_WHITE&lt;Appearance Type Dragon White&gt;|APPEARANCE_TYPE_DRIDER_FEMALE&lt;Appearance Type Drider Female&gt;|APPEARANCE_TYPE_DRIDER&lt;Appearance Type Drider&gt;|APPEARANCE_TYPE_DRIDER_CHIEF&lt;Appearance Type Drider Chief&gt;|APPEARANCE_TYPE_OBJECT_BOAT&lt;Appearance Type Object Boat&gt;|APPEARANCE_TYPE_DROW_CLERIC&lt;Appearance Type Drow Cleric&gt;|APPEARANCE_TYPE_DROW_FIGHTER&lt;Appearance Type Drow Fighter&gt;|APPEARANCE_TYPE_DROW_WARRIOR_1&lt;Appearance Type Drow Warrior 1&gt;|APPEARANCE_TYPE_DROW_WARRIOR_2&lt;Appearance Type Drow Warrior 2&gt;|APPEARANCE_TYPE_DROW_WARRIOR_3&lt;Appearance Type Drow Warrior 3&gt;|APPEARANCE_TYPE_DROW_MATRON&lt;Appearance Type Drow Matron&gt;|APPEARANCE_TYPE_DROW_SLAVE&lt;Appearance Type Drow Slave&gt;|APPEARANCE_TYPE_DROW_FEMALE_1&lt;Appearance Type Drow Female 1&gt;|APPEARANCE_TYPE_DROW_FEMALE_2&lt;Appearance Type Drow Female 2&gt;|APPEARANCE_TYPE_DROW_WIZARD&lt;Appearance Type Drow Wizard&gt;|APPEARANCE_TYPE_DRYAD&lt;Appearance Type Dryad&gt;|APPEARANCE_TYPE_DRUEGAR_CLERIC&lt;Appearance Type Druegar Cleric&gt;|APPEARANCE_TYPE_DRUEGAR_FIGHTER&lt;Appearance Type Druegar Fighter&gt;|APPEARANCE_TYPE_DUERGAR_CHIEF&lt;Appearance Type Duergar Chief&gt;|APPEARANCE_TYPE_DUERGAR_SLAVE&lt;Appearance Type Duergar Slave&gt;|APPEARANCE_TYPE_DWARF&lt;Appearance Type Dwarf&gt;|APPEARANCE_TYPE_DWARF_NPC_FEMALE&lt;Appearance Type Dwarf Npc Female&gt;|APPEARANCE_TYPE_DWARF_NPC_MALE&lt;Appearance Type Dwarf Npc Male&gt;|APPEARANCE_TYPE_ELEMENTAL_AIR&lt;Appearance Type Elemental Air&gt;|APPEARANCE_TYPE_ELEMENTAL_AIR_ELDER&lt;Appearance Type Elemental Air Elder&gt;|APPEARANCE_TYPE_ELEMENTAL_EARTH&lt;Appearance Type Elemental Earth&gt;|APPEARANCE_TYPE_ELEMENTAL_EARTH_ELDER&lt;Appearance Type Elemental Earth Elder&gt;|APPEARANCE_TYPE_ELEMENTAL_FIRE&lt;Appearance Type Elemental Fire&gt;|APPEARANCE_TYPE_ELEMENTAL_FIRE_ELDER&lt;Appearance Type Elemental Fire Elder&gt;|APPEARANCE_TYPE_ELEMENTAL_WATER&lt;Appearance Type Elemental Water&gt;|APPEARANCE_TYPE_ELEMENTAL_WATER_ELDER&lt;Appearance Type Elemental Water Elder&gt;|APPEARANCE_TYPE_ELF&lt;Appearance Type Elf&gt;|APPEARANCE_TYPE_ELF_NPC_FEMALE&lt;Appearance Type Elf Npc Female&gt;|APPEARANCE_TYPE_ELF_NPC_MALE01&lt;Appearance Type Elf Npc Male01&gt;|APPEARANCE_TYPE_ELF_NPC_MALE02&lt;Appearance Type Elf Npc Male02&gt;|APPEARANCE_TYPE_ETTERCAP&lt;Appearance Type Ettercap&gt;|APPEARANCE_TYPE_ETTIN&lt;Appearance Type Ettin&gt;|APPEARANCE_TYPE_FAERIE_DRAGON&lt;Appearance Type Faerie Dragon&gt;|APPEARANCE_TYPE_FAIRY&lt;Appearance Type Fairy&gt;|APPEARANCE_TYPE_FALCON&lt;Appearance Type Falcon&gt;|APPEARANCE_TYPE_FEMALE_01&lt;Appearance Type Female 01&gt;|APPEARANCE_TYPE_FEMALE_02&lt;Appearance Type Female 02&gt;|APPEARANCE_TYPE_FEMALE_03&lt;Appearance Type Female 03&gt;|APPEARANCE_TYPE_FEMALE_04&lt;Appearance Type Female 04&gt;|APPEARANCE_TYPE_FEMALE_05&lt;Appearance Type Female 05&gt;|APPEARANCE_TYPE_OBJECT_FLAME_LARGE&lt;Appearance Type Object Flame Large&gt;|APPEARANCE_TYPE_OBJECT_FLAME_MEDIUM&lt;Appearance Type Object Flame Medium&gt;|APPEARANCE_TYPE_OBJECT_FLAME_SMALL&lt;Appearance Type Object Flame Small&gt;|APPEARANCE_TYPE_FORMIAN_MYRMARCH&lt;Appearance Type Formian Myrmarch&gt;|APPEARANCE_TYPE_FORMIAN_QUEEN&lt;Appearance Type Formian Queen&gt;|APPEARANCE_TYPE_FORMIAN_&lt;Appearance Type Formian&gt;|APPEARANCE_TYPE_FORMIAN_&lt;Appearance Type Formian&gt;|APPEARANCE_TYPE_GARGOYLE&lt;Appearance Type Gargoyle&gt;|APPEARANCE_TYPE_GELATINOUS_CUBE&lt;Appearance Type Gelatinous Cube&gt;|APPEARANCE_TYPE_GHAST&lt;Appearance Type Ghast&gt;|APPEARANCE_TYPE_GHOUL&lt;Appearance Type Ghoul&gt;|APPEARANCE_TYPE_GHOUL_LORD&lt;Appearance Type Ghoul Lord&gt;|APPEARANCE_TYPE_GIANT_FIRE&lt;Appearance Type Giant Fire&gt;|APPEARANCE_TYPE_GIANT_FIRE_FEMALE&lt;Appearance Type Giant Fire Female&gt;|APPEARANCE_TYPE_GIANT_FROST&lt;Appearance Type Giant Frost&gt;|APPEARANCE_TYPE_GIANT_FROST_FEMALE&lt;Appearance Type Giant Frost Female&gt;|APPEARANCE_TYPE_GIANT_HILL&lt;Appearance Type Giant Hill&gt;|APPEARANCE_TYPE_GIANT_MOUNTAIN&lt;Appearance Type Giant Mountain&gt;|APPEARANCE_TYPE_GNOLL_WARRIOR&lt;Appearance Type Gnoll Warrior&gt;|APPEARANCE_TYPE_GNOLL_WIZ&lt;Appearance Type Gnoll Wiz&gt;|APPEARANCE_TYPE_GNOME&lt;Appearance Type Gnome&gt;|APPEARANCE_TYPE_GNOME_NPC_FEMALE&lt;Appearance Type Gnome Npc Female&gt;|APPEARANCE_TYPE_GNOME_NPC_MALE&lt;Appearance Type Gnome Npc Male&gt;|APPEARANCE_TYPE_GOBLIN_A&lt;Appearance Type Goblin A&gt;|APPEARANCE_TYPE_GOBLIN_B&lt;Appearance Type Goblin B&gt;|APPEARANCE_TYPE_GOBLIN_CHIEF_A&lt;Appearance Type Goblin Chief A&gt;|APPEARANCE_TYPE_GOBLIN_CHIEF_B&lt;Appearance Type Goblin Chief B&gt;|APPEARANCE_TYPE_GOBLIN_SHAMAN_A&lt;Appearance Type Goblin Shaman A&gt;|APPEARANCE_TYPE_GOBLIN_SHAMAN_B&lt;Appearance Type Goblin Shaman B&gt;|APPEARANCE_TYPE_GOLEM_ADAMANTIUM&lt;Appearance Type Golem Adamantium&gt;|APPEARANCE_TYPE_GOLEM_BONE&lt;Appearance Type Golem Bone&gt;|APPEARANCE_TYPE_GOLEM_CLAY&lt;Appearance Type Golem Clay&gt;|APPEARANCE_TYPE_GOLEM_DEMONFLESH&lt;Appearance Type Golem Demonflesh&gt;|APPEARANCE_TYPE_GOLEM_FLESH&lt;Appearance Type Golem Flesh&gt;|APPEARANCE_TYPE_GOLEM_IRON&lt;Appearance Type Golem Iron&gt;|APPEARANCE_TYPE_GOLEM_MITHRAL&lt;Appearance Type Golem Mithral&gt;|APPEARANCE_TYPE_GOLEM_STONE&lt;Appearance Type Golem Stone&gt;|APPEARANCE_TYPE_GORGON&lt;Appearance Type Gorgon&gt;|APPEARANCE_TYPE_GRAY_OOZE&lt;Appearance Type Gray Ooze&gt;|APPEARANCE_TYPE_GREY_RENDER&lt;Appearance Type Grey Render&gt;|APPEARANCE_TYPE_GYNOSPHINX&lt;Appearance Type Gynosphinx&gt;|APPEARANCE_TYPE_HALF_ELF&lt;Appearance Type Half Elf&gt;|APPEARANCE_TYPE_HALFLING&lt;Appearance Type Halfling&gt;|APPEARANCE_TYPE_HALFLING_NPC_FEMALE&lt;Appearance Type Halfling Npc Female&gt;|APPEARANCE_TYPE_HALFLING_NPC_MALE&lt;Appearance Type Halfling Npc Male&gt;|APPEARANCE_TYPE_HALF_ORC&lt;Appearance Type Half Orc&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_FEMALE&lt;Appearance Type Half Orc Npc Female&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_MALE_01&lt;Appearance Type Half Orc Npc Male 01&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_MALE_02&lt;Appearance Type Half Orc Npc Male 02&gt;|APPEARANCE_TYPE_HARPY&lt;Appearance Type Harpy&gt;|APPEARANCE_TYPE_HELMED_HORROR&lt;Appearance Type Helmed Horror&gt;|APPEARANCE_TYPE_HEURODIS_LICH&lt;Appearance Type Heurodis Lich&gt;|APPEARANCE_TYPE_HOBGOBLIN_WARRIROR&lt;Appearance Type Hobgoblin Warriror&gt;|APPEARANCE_TYPE_HOBGOBLIN_WIZARD&lt;Appearance Type Hobgoblin Wizard&gt;|APPEARANCE_TYPE_HOOK_HORROR&lt;Appearance Type Hook Horror&gt;|APPEARANCE_TYPE_RAKSHASA_WOLF_MALE&lt;Appearance Type Rakshasa Wolf Male&gt;|APPEARANCE_TYPE_HOUSE_GUARD&lt;Appearance Type House Guard&gt;|APPEARANCE_TYPE_HUMAN&lt;Appearance Type Human&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_01&lt;Appearance Type Human Npc Female 01&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_02&lt;Appearance Type Human Npc Female 02&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_03&lt;Appearance Type Human Npc Female 03&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_04&lt;Appearance Type Human Npc Female 04&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_05&lt;Appearance Type Human Npc Female 05&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_06&lt;Appearance Type Human Npc Female 06&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_07&lt;Appearance Type Human Npc Female 07&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_08&lt;Appearance Type Human Npc Female 08&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_09&lt;Appearance Type Human Npc Female 09&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_10&lt;Appearance Type Human Npc Female 10&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_11&lt;Appearance Type Human Npc Female 11&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_12&lt;Appearance Type Human Npc Female 12&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_01&lt;Appearance Type Human Npc Male 01&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_02&lt;Appearance Type Human Npc Male 02&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_03&lt;Appearance Type Human Npc Male 03&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_04&lt;Appearance Type Human Npc Male 04&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_05&lt;Appearance Type Human Npc Male 05&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_06&lt;Appearance Type Human Npc Male 06&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_07&lt;Appearance Type Human Npc Male 07&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_08&lt;Appearance Type Human Npc Male 08&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_09&lt;Appearance Type Human Npc Male 09&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_10&lt;Appearance Type Human Npc Male 10&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_11&lt;Appearance Type Human Npc Male 11&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_12&lt;Appearance Type Human Npc Male 12&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_13&lt;Appearance Type Human Npc Male 13&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_14&lt;Appearance Type Human Npc Male 14&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_15&lt;Appearance Type Human Npc Male 15&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_16&lt;Appearance Type Human Npc Male 16&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_17&lt;Appearance Type Human Npc Male 17&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_18&lt;Appearance Type Human Npc Male 18&gt;|APPEARANCE_TYPE_IMP&lt;Appearance Type Imp&gt;|APPEARANCE_TYPE_INN_KEEPER&lt;Appearance Type Inn Keeper&gt;|APPEARANCE_TYPE_INTELLECT_DEVOURER&lt;Appearance Type Intellect Devourer&gt;|APPEARANCE_TYPE_SKELETAL_DEVOURER&lt;Appearance Type Skeletal Devourer&gt;|APPEARANCE_TYPE_WAR_DEVOURER&lt;Appearance Type War Devourer&gt;|APPEARANCE_TYPE_INVALID&lt;Appearance Type Invalid&gt;|APPEARANCE_TYPE_INVISIBLE_STALKER&lt;Appearance Type Invisible Stalker&gt;|APPEARANCE_TYPE_KOBOLD_A&lt;Appearance Type Kobold A&gt;|APPEARANCE_TYPE_KOBOLD_A&lt;Appearance Type Kobold A&gt;|APPEARANCE_TYPE_KOBOLD_CHIEF_A&lt;Appearance Type Kobold Chief A&gt;|APPEARANCE_TYPE_KOBOLD_CHIEF_B&lt;Appearance Type Kobold Chief B&gt;|APPEARANCE_TYPE_KOBOLD_SHAMAN_A&lt;Appearance Type Kobold Shaman A&gt;|APPEARANCE_TYPE_KOBOLD_SHAMAN_B&lt;Appearance Type Kobold Shaman B&gt;|APPEARANCE_TYPE_LANTERN_ARCHON&lt;Appearance Type Lantern Archon&gt;|APPEARANCE_TYPE_LICH&lt;Appearance Type Lich&gt;|APPEARANCE_TYPE_LIZARDFOLK_A&lt;Appearance Type Lizardfolk A&gt;|APPEARANCE_TYPE_LIZARDFOLK_B&lt;Appearance Type Lizardfolk B&gt;|APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_A&lt;Appearance Type Lizardfolk Shaman A&gt;|APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_B&lt;Appearance Type Lizardfolk Shaman B&gt;|APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_A&lt;Appearance Type Lizardfolk Warrior A&gt;|APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_B&lt;Appearance Type Lizardfolk Warrior B&gt;|APPEARANCE_TYPE_LUSKAN_GUARD&lt;Appearance Type Luskan Guard&gt;|APPEARANCE_TYPE_OBJECT_BLUE&lt;Appearance Type Object Blue&gt;|APPEARANCE_TYPE_OBJECT_CYAN&lt;Appearance Type Object Cyan&gt;|APPEARANCE_TYPE_OBJECT_GREEN&lt;Appearance Type Object Green&gt;|APPEARANCE_TYPE_OBJECT_ORANGE&lt;Appearance Type Object Orange&gt;|APPEARANCE_TYPE_OBJECT_PURPLE&lt;Appearance Type Object Purple&gt;|APPEARANCE_TYPE_OBJECT_RED&lt;Appearance Type Object Red&gt;|APPEARANCE_TYPE_OBJECT_WHITE&lt;Appearance Type Object White&gt;|APPEARANCE_TYPE_OBJECT_YELLOW&lt;Appearance Type Object Yellow&gt;|APPEARANCE_TYPE_MALE_01&lt;Appearance Type Male 01&gt;|APPEARANCE_TYPE_MALE_02&lt;Appearance Type Male 02&gt;|APPEARANCE_TYPE_MALE_03&lt;Appearance Type Male 03&gt;|APPEARANCE_TYPE_MALE_04&lt;Appearance Type Male 04&gt;|APPEARANCE_TYPE_MALE_05&lt;Appearance Type Male 05&gt;|APPEARANCE_TYPE_MANTICORE&lt;Appearance Type Manticore&gt;|APPEARANCE_TYPE_MEDUSA&lt;Appearance Type Medusa&gt;|APPEARANCE_TYPE_MEPHISTO_NORM&lt;Appearance Type Mephisto Norm&gt;|APPEARANCE_TYPE_MEPHISTO_BIG&lt;Appearance Type Mephisto Big&gt;|APPEARANCE_TYPE_MEPHIT_AIR&lt;Appearance Type Mephit Air&gt;|APPEARANCE_TYPE_MEPHIT_DUST&lt;Appearance Type Mephit Dust&gt;|APPEARANCE_TYPE_MEPHIT_EARTH&lt;Appearance Type Mephit Earth&gt;|APPEARANCE_TYPE_MEPHIT_FIRE&lt;Appearance Type Mephit Fire&gt;|APPEARANCE_TYPE_MEPHIT_ICE&lt;Appearance Type Mephit Ice&gt;|APPEARANCE_TYPE_MEPHIT_MAGMA&lt;Appearance Type Mephit Magma&gt;|APPEARANCE_TYPE_MEPHIT_OOZE&lt;Appearance Type Mephit Ooze&gt;|APPEARANCE_TYPE_MEPHIT_SALT&lt;Appearance Type Mephit Salt&gt;|APPEARANCE_TYPE_MEPHIT_STEAM&lt;Appearance Type Mephit Steam&gt;|APPEARANCE_TYPE_MEPHIT_WATER&lt;Appearance Type Mephit Water&gt;|APPEARANCE_TYPE_MINDFLAYER&lt;Appearance Type Mindflayer&gt;|APPEARANCE_TYPE_MINDFLAYER_ALHOON&lt;Appearance Type Mindflayer Alhoon&gt;|APPEARANCE_TYPE_MINDFLAYER_2&lt;Appearance Type Mindflayer 2&gt;|APPEARANCE_TYPE_MINOGON&lt;Appearance Type Minogon&gt;|APPEARANCE_TYPE_MINOTAUR&lt;Appearance Type Minotaur&gt;|APPEARANCE_TYPE_MINOTAUR_CHIEFTAN&lt;Appearance Type Minotaur Chieftan&gt;|APPEARANCE_TYPE_MINOTAUR_SHAMAN&lt;Appearance Type Minotaur Shaman&gt;|APPEARANCE_TYPE_MOHRG&lt;Appearance Type Mohrg&gt;|APPEARANCE_TYPE_MUMMY_COMMON&lt;Appearance Type Mummy Common&gt;|APPEARANCE_TYPE_MUMMY_GREATER&lt;Appearance Type Mummy Greater&gt;|APPEARANCE_TYPE_MUMMY_WARRIOR&lt;Appearance Type Mummy Warrior&gt;|APPEARANCE_TYPE_MUMMY_FIGHTER_2&lt;Appearance Type Mummy Fighter 2&gt;|APPEARANCE_TYPE_NW_MILITIA_MEMBER&lt;Appearance Type Nw Militia Member&gt;|APPEARANCE_TYPE_INVISIBLE_HUMAN_MALE&lt;Appearance Type Invisible Human Male&gt;|APPEARANCE_TYPE_NWN_AARIN&lt;Appearance Type Nwn Aarin&gt;|APPEARANCE_TYPE_ARIBETH&lt;Appearance Type Aribeth&gt;|APPEARANCE_TYPE_NWN_ARIBETH_EVIL&lt;Appearance Type Nwn Aribeth Evil&gt;|APPEARANCE_TYPE_HEDRALINE&lt;Appearance Type Hedraline&gt;|APPEARANCE_TYPE_NWN_MAUGRIM&lt;Appearance Type Nwn Maugrim&gt;|APPEARANCE_TYPE_NWN_MORAG&lt;Appearance Type Nwn Morag&gt;|APPEARANCE_TYPE_NWN_NASHER&lt;Appearance Type Nwn Nasher&gt;|APPEARANCE_TYPE_NWN_SEDOS&lt;Appearance Type Nwn Sedos&gt;|APPEARANCE_TYPE_NYMPH&lt;Appearance Type Nymph&gt;|APPEARANCE_TYPE_OCHRE_JELLY_LARGE&lt;Appearance Type Ochre Jelly Large&gt;|APPEARANCE_TYPE_OCHRE_JELLY_MEDIUM&lt;Appearance Type Ochre Jelly Medium&gt;|APPEARANCE_TYPE_OCHRE_JELLY_SMALL&lt;Appearance Type Ochre Jelly Small&gt;|APPEARANCE_TYPE_OGRE&lt;Appearance Type Ogre&gt;|APPEARANCE_TYPE_OGREB&lt;Appearance Type Ogreb&gt;|APPEARANCE_TYPE_OGRE_CHIEFTAIN&lt;Appearance Type Ogre Chieftain&gt;|APPEARANCE_TYPE_OGRE_CHIEFTAINB&lt;Appearance Type Ogre Chieftainb&gt;|APPEARANCE_TYPE_OGRE_MAGE&lt;Appearance Type Ogre Mage&gt;|APPEARANCE_TYPE_OGRE_MAGEB&lt;Appearance Type Ogre Mageb&gt;|APPEARANCE_TYPE_OLD_MAN&lt;Appearance Type Old Man&gt;|APPEARANCE_TYPE_OLD_WOMAN&lt;Appearance Type Old Woman&gt;|APPEARANCE_TYPE_ORC_A&lt;Appearance Type Orc A&gt;|APPEARANCE_TYPE_ORC_B&lt;Appearance Type Orc B&gt;|APPEARANCE_TYPE_ORC_CHIEFTAIN_A&lt;Appearance Type Orc Chieftain A&gt;|APPEARANCE_TYPE_ORC_CHIEFTAIN_B&lt;Appearance Type Orc Chieftain B&gt;|APPEARANCE_TYPE_ORC_SHAMAN_A&lt;Appearance Type Orc Shaman A&gt;|APPEARANCE_TYPE_ORC_SHAMAN_B&lt;Appearance Type Orc Shaman B&gt;|APPEARANCE_TYPE_OX&lt;Appearance Type Ox&gt;|APPEARANCE_TYPE_PARROT&lt;Appearance Type Parrot&gt;|APPEARANCE_TYPE_PENGIUN&lt;Appearance Type Pengiun&gt;|APPEARANCE_TYPE_PLAGUE_VICTIM&lt;Appearance Type Plague Victim&gt;|APPEARANCE_TYPE_PROSTITUTE_01&lt;Appearance Type Prostitute 01&gt;|APPEARANCE_TYPE_PROSTITUTE_02&lt;Appearance Type Prostitute 02&gt;|APPEARANCE_TYPE_PSEUDODRAGON&lt;Appearance Type Pseudodragon&gt;|APPEARANCE_TYPE_QUASIT&lt;Appearance Type Quasit&gt;|APPEARANCE_TYPE_RAKSHASA_TIGER_FEMALE&lt;Appearance Type Rakshasa Tiger Female&gt;|APPEARANCE_TYPE_RAKSHASA_TIGER_MALE&lt;Appearance Type Rakshasa Tiger Male&gt;|APPEARANCE_TYPE_RAT&lt;Appearance Type Rat&gt;|APPEARANCE_TYPE_RAT_DIRE&lt;Appearance Type Rat Dire&gt;|APPEARANCE_TYPE_RAVEN&lt;Appearance Type Raven&gt;|APPEARANCE_TYPE_SAHUAGIN&lt;Appearance Type Sahuagin&gt;|APPEARANCE_TYPE_SAHUAGIN_CLERIC&lt;Appearance Type Sahuagin Cleric&gt;|APPEARANCE_TYPE_SAHUAGIN_LEADER&lt;Appearance Type Sahuagin Leader&gt;|APPEARANCE_TYPE_SEA_HAG&lt;Appearance Type Sea Hag&gt;|APPEARANCE_TYPE_SEAGULL_FLYING&lt;Appearance Type Seagull Flying&gt;|APPEARANCE_TYPE_SEAGULL_WALKING&lt;Appearance Type Seagull Walking&gt;|APPEARANCE_TYPE_SHADOW&lt;Appearance Type Shadow&gt;|APPEARANCE_TYPE_SHADOW_FIEND&lt;Appearance Type Shadow Fiend&gt;|APPEARANCE_TYPE_SHARK_GOBLIN&lt;Appearance Type Shark Goblin&gt;|APPEARANCE_TYPE_SHARK_MAKO&lt;Appearance Type Shark Mako&gt;|APPEARANCE_TYPE_SHARK_HAMMERHEAD&lt;Appearance Type Shark Hammerhead&gt;|APPEARANCE_TYPE_SHIELD_GUARDIAN&lt;Appearance Type Shield Guardian&gt;|APPEARANCE_TYPE_SHOP_KEEPER&lt;Appearance Type Shop Keeper&gt;|APPEARANCE_TYPE_SKELETON_CHIEFTAIN&lt;Appearance Type Skeleton Chieftain&gt;|APPEARANCE_TYPE_SKELETON_COMMON&lt;Appearance Type Skeleton Common&gt;|APPEARANCE_TYPE_SKELETON_MAGE&lt;Appearance Type Skeleton Mage&gt;|APPEARANCE_TYPE_SKELETON_PRIEST&lt;Appearance Type Skeleton Priest&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR&lt;Appearance Type Skeleton Warrior&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR_1&lt;Appearance Type Skeleton Warrior 1&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR_2&lt;Appearance Type Skeleton Warrior 2&gt;|APPEARANCE_TYPE_SLAAD_BLACK&lt;Appearance Type Slaad Black&gt;|APPEARANCE_TYPE_SLAAD_BLUE&lt;Appearance Type Slaad Blue&gt;|APPEARANCE_TYPE_SLAAD_DEATH&lt;Appearance Type Slaad Death&gt;|APPEARANCE_TYPE_SLAAD_GRAY&lt;Appearance Type Slaad Gray&gt;|APPEARANCE_TYPE_SLAAD_GREEN&lt;Appearance Type Slaad Green&gt;|APPEARANCE_TYPE_SLAAD_RED&lt;Appearance Type Slaad Red&gt;|APPEARANCE_TYPE_SLAAD_WHITE&lt;Appearance Type Slaad White&gt;|APPEARANCE_TYPE_SPECTRE&lt;Appearance Type Spectre&gt;|APPEARANCE_TYPE_SPHINX&lt;Appearance Type Sphinx&gt;|APPEARANCE_TYPE_SPIDER_DIRE&lt;Appearance Type Spider Dire&gt;|APPEARANCE_TYPE_SPIDER_GIANT&lt;Appearance Type Spider Giant&gt;|APPEARANCE_TYPE_SPIDER_PHASE&lt;Appearance Type Spider Phase&gt;|APPEARANCE_TYPE_SPIDER_SWORD&lt;Appearance Type Spider Sword&gt;|APPEARANCE_TYPE_SPIDER_WRAITH&lt;Appearance Type Spider Wraith&gt;|APPEARANCE_TYPE_STINGER&lt;Appearance Type Stinger&gt;|APPEARANCE_TYPE_STINGER_CHIEFTAIN&lt;Appearance Type Stinger Chieftain&gt;|APPEARANCE_TYPE_STINGER_MAGE&lt;Appearance Type Stinger Mage&gt;|APPEARANCE_TYPE_&lt;Appearance Type&gt;|APPEARANCE_TYPE_SUCCUBUS&lt;Appearance Type Succubus&gt;|APPEARANCE_TYPE_SVIRF_FEMALE&lt;Appearance Type Svirf Female&gt;|APPEARANCE_TYPE_SVIRF_MALE&lt;Appearance Type Svirf Male&gt;|APPEARANCE_TYPE_OBJECT_TABLE&lt;Appearance Type Object Table&gt;|APPEARANCE_TYPE_TROGLODYTE&lt;Appearance Type Troglodyte&gt;|APPEARANCE_TYPE_TROGLODYTE_CLERIC&lt;Appearance Type Troglodyte Cleric&gt;|APPEARANCE_TYPE_TROGLODYTE_WARRIOR&lt;Appearance Type Troglodyte Warrior&gt;|APPEARANCE_TYPE_TROLL&lt;Appearance Type Troll&gt;|APPEARANCE_TYPE_TROLL_CHIEFTAIN&lt;Appearance Type Troll Chieftain&gt;|APPEARANCE_TYPE_TROLL_SHAMAN&lt;Appearance Type Troll Shaman&gt;|APPEARANCE_TYPE_UMBERHULK&lt;Appearance Type Umberhulk&gt;|APPEARANCE_TYPE_UTHGARD_ELK_TRIBE&lt;Appearance Type Uthgard Elk Tribe&gt;|APPEARANCE_TYPE_UTHGARD_TIGER_TRIBE&lt;Appearance Type Uthgard Tiger Tribe&gt;|APPEARANCE_TYPE_VAMPIRE_FEMALE&lt;Appearance Type Vampire Female&gt;|APPEARANCE_TYPE_VAMPIRE_MALE&lt;Appearance Type Vampire Male&gt;|APPEARANCE_TYPE_VROCK&lt;Appearance Type Vrock&gt;|APPEARANCE_TYPE_WAITRESS&lt;Appearance Type Waitress&gt;|APPEARANCE_TYPE_WERECAT&lt;Appearance Type Werecat&gt;|APPEARANCE_TYPE_WERERAT&lt;Appearance Type Wererat&gt;|APPEARANCE_TYPE_WEREWOLF&lt;Appearance Type Werewolf&gt;|APPEARANCE_TYPE_WIGHT&lt;Appearance Type Wight&gt;|APPEARANCE_TYPE_WILL_O_WISP&lt;Appearance Type Will O Wisp&gt;|APPEARANCE_TYPE_WRAITH&lt;Appearance Type Wraith&gt;|APPEARANCE_TYPE_WYRMLING_BLACK&lt;Appearance Type Wyrmling Black&gt;|APPEARANCE_TYPE_WYRMLING_BLUE&lt;Appearance Type Wyrmling Blue&gt;|APPEARANCE_TYPE_WYRMLING_BRASS&lt;Appearance Type Wyrmling Brass&gt;|APPEARANCE_TYPE_WYRMLING_BRONZE&lt;Appearance Type Wyrmling Bronze&gt;|APPEARANCE_TYPE_WYRMLING_COPPER&lt;Appearance Type Wyrmling Copper&gt;|APPEARANCE_TYPE_WYRMLING_GOLD&lt;Appearance Type Wyrmling Gold&gt;|APPEARANCE_TYPE_WYRMLING_GREEN&lt;Appearance Type Wyrmling Green&gt;|APPEARANCE_TYPE_WYRMLING_RED&lt;Appearance Type Wyrmling Red&gt;|APPEARANCE_TYPE_WYRMLING_SILVER&lt;Appearance Type Wyrmling Silver&gt;|APPEARANCE_TYPE_WYRMLING_WHITE&lt;Appearance Type Wyrmling White&gt;|APPEARANCE_TYPE_YUAN_TI&lt;Appearance Type Yuan Ti&gt;|APPEARANCE_TYPE_YUAN_TI_CHIEFTEN&lt;Appearance Type Yuan Ti Chieften&gt;|APPEARANCE_TYPE_YUAN_TI_WIZARD&lt;Appearance Type Yuan Ti Wizard&gt;|APPEARANCE_TYPE_ZOMBIE&lt;Appearance Type Zombie&gt;|APPEARANCE_TYPE_ZOMBIE_ROTTING&lt;Appearance Type Zombie Rotting&gt;|APPEARANCE_TYPE_ZOMBIE_TYRANT_FOG&lt;Appearance Type Zombie Tyrant Fog&gt;|APPEARANCE_TYPE_ZOMBIE_WARRIOR_1&lt;Appearance Type Zombie Warrior 1&gt;|APPEARANCE_TYPE_ZOMBIE_WARRIOR_2&lt;Appearance Type Zombie Warrior 2&gt;|APPEARANCE_TYPE_ALLIP&lt;Appearance Type Allip&gt;|APPEARANCE_TYPE_ARANEA&lt;Appearance Type Aranea&gt;|APPEARANCE_TYPE_ARCH_TARGET&lt;Appearance Type Arch Target&gt;|APPEARANCE_TYPE_ASABI_CHIEFTAIN&lt;Appearance Type Asabi Chieftain&gt;|APPEARANCE_TYPE_ASABI_SHAMAN&lt;Appearance Type Asabi Shaman&gt;|APPEARANCE_TYPE_ASABI_WARRIOR&lt;Appearance Type Asabi Warrior&gt;|APPEARANCE_TYPE_BADGER&lt;Appearance Type Badger&gt;|APPEARANCE_TYPE_BADGER_DIRE&lt;Appearance Type Badger Dire&gt;|APPEARANCE_TYPE_BALOR&lt;Appearance Type Balor&gt;|APPEARANCE_TYPE_BARTENTER&lt;Appearance Type Bartenter&gt;|APPEARANCE_TYPE_BASILISK&lt;Appearance Type Basilisk&gt;|APPEARANCE_TYPE_BAT&lt;Appearance Type Bat&gt;|APPEARANCE_TYPE_BAT_HORROR&lt;Appearance Type Bat Horror&gt;|APPEARANCE_TYPE_BEAR_BLACK&lt;Appearance Type Bear Black&gt;|APPEARANCE_TYPE_BEAR_BROWN&lt;Appearance Type Bear Brown&gt;|APPEARANCE_TYPE_BEAR_DIRE&lt;Appearance Type Bear Dire&gt;|APPEARANCE_TYPE_BEAR_KODIAK&lt;Appearance Type Bear Kodiak&gt;|APPEARANCE_TYPE_BEAR_POLAR&lt;Appearance Type Bear Polar&gt;|APPEARANCE_TYPE_SPIDER_DEMON&lt;Appearance Type Spider Demon&gt;|APPEARANCE_TYPE_BEETLE_FIRE&lt;Appearance Type Beetle Fire&gt;|APPEARANCE_TYPE_BEETLE_SLICER&lt;Appearance Type Beetle Slicer&gt;|APPEARANCE_TYPE_BEETLE_STAG&lt;Appearance Type Beetle Stag&gt;|APPEARANCE_TYPE_BEETLE_STINK&lt;Appearance Type Beetle Stink&gt;|APPEARANCE_TYPE_BEGGER&lt;Appearance Type Begger&gt;|APPEARANCE_TYPE_BEHOLDER&lt;Appearance Type Beholder&gt;|APPEARANCE_TYPE_BEHOLDER_EYEBALL&lt;Appearance Type Beholder Eyeball&gt;|APPEARANCE_TYPE_BEHOLDER_MAGE&lt;Appearance Type Beholder Mage&gt;|APPEARANCE_TYPE_BEHOLDER_MOTHER&lt;Appearance Type Beholder Mother&gt;|APPEARANCE_TYPE_BLOOD_SAILER&lt;Appearance Type Blood Sailer&gt;|APPEARANCE_TYPE_BOAR&lt;Appearance Type Boar&gt;|APPEARANCE_TYPE_BOAR_DIRE&lt;Appearance Type Boar Dire&gt;|APPEARANCE_TYPE_BODAK&lt;Appearance Type Bodak&gt;|APPEARANCE_TYPE_BUGBEAR_A&lt;Appearance Type Bugbear A&gt;|APPEARANCE_TYPE_BUGBEAR_B&lt;Appearance Type Bugbear B&gt;|APPEARANCE_TYPE_BUGBEAR_CHIEFTAN&lt;Appearance Type Bugbear Chieftan&gt;|APPEARANCE_TYPE_BUGBEAR_CHIEFTAIN_B&lt;Appearance Type Bugbear Chieftain B&gt;|APPEARANCE_TYPE_BUGBEAR_SHAMAN_A&lt;Appearance Type Bugbear Shaman A&gt;|APPEARANCE_TYPE_BUGBEAR_SHAMAN_B&lt;Appearance Type Bugbear Shaman B&gt;|APPEARANCE_TYPE_BULETTE&lt;Appearance Type Bulette&gt;|APPEARANCE_TYPE_OBJECT_CANDLE&lt;Appearance Type Object Candle&gt;|APPEARANCE_TYPE_CAT_CAT_DIRE&lt;Appearance Type Cat Cat Dire&gt;|APPEARANCE_TYPE_COUGAR&lt;Appearance Type Cougar&gt;|APPEARANCE_TYPE_CRAG_CAT&lt;Appearance Type Crag Cat&gt;|APPEARANCE_TYPE_JAGUAR&lt;Appearance Type Jaguar&gt;|APPEARANCE_TYPE_KRENSHAR&lt;Appearance Type Krenshar&gt;|APPEARANCE_TYPE_LEOPARD&lt;Appearance Type Leopard&gt;|APPEARANCE_TYPE_LION&lt;Appearance Type Lion&gt;|APPEARANCE_TYPE_MPANTHER&lt;Appearance Type Mpanther&gt;|APPEARANCE_TYPE_PANTHER&lt;Appearance Type Panther&gt;|APPEARANCE_TYPE_RAKSHASA_BEAR_MALE&lt;Appearance Type Rakshasa Bear Male&gt;|APPEARANCE_TYPE_OBJECT_CHAIR&lt;Appearance Type Object Chair&gt;|APPEARANCE_TYPE_OBJECT_CHEST&lt;Appearance Type Object Chest&gt;|APPEARANCE_TYPE_CHICKEN&lt;Appearance Type Chicken&gt;|APPEARANCE_TYPE_KID_FEMALE&lt;Appearance Type Kid Female&gt;|APPEARANCE_TYPE_KID_MALE&lt;Appearance Type Kid Male&gt;|APPEARANCE_TYPE_COCKATRICE&lt;Appearance Type Cockatrice&gt;|APPEARANCE_TYPE_COMBAT_DUMMY&lt;Appearance Type Combat Dummy&gt;|APPEARANCE_TYPE_CONVICT&lt;Appearance Type Convict&gt;|APPEARANCE_TYPE_COW&lt;Appearance Type Cow&gt;|APPEARANCE_TYPE_CULT_MEMBER&lt;Appearance Type Cult Member&gt;|APPEARANCE_TYPE_DEEP_ROTHE&lt;Appearance Type Deep Rothe&gt;|APPEARANCE_TYPE_DEER&lt;Appearance Type Deer&gt;|APPEARANCE_TYPE_DEER_STAG&lt;Appearance Type Deer Stag&gt;|APPEARANCE_TYPE_DEMI_LICH&lt;Appearance Type Demi Lich&gt;|APPEARANCE_TYPE_&lt;Appearance Type&gt;|APPEARANCE_TYPE_DOG&lt;Appearance Type Dog&gt;|APPEARANCE_TYPE_DOG_BLINKDOG&lt;Appearance Type Dog Blinkdog&gt;|APPEARANCE_TYPE_DOG_DIRE_WOLF&lt;Appearance Type Dog Dire Wolf&gt;|APPEARANCE_TYPE_DOG_FENHOUND&lt;Appearance Type Dog Fenhound&gt;|APPEARANCE_TYPE_DOG_HELL_HOUND&lt;Appearance Type Dog Hell Hound&gt;|APPEARANCE_TYPE_DOG_SHADOW_MASTIF&lt;Appearance Type Dog Shadow Mastif&gt;|APPEARANCE_TYPE_DOG_WINTER_WOLF&lt;Appearance Type Dog Winter Wolf&gt;|APPEARANCE_TYPE_DOG_WOLF&lt;Appearance Type Dog Wolf&gt;|APPEARANCE_TYPE_DOG_WORG&lt;Appearance Type Dog Worg&gt;|APPEARANCE_TYPE_DOOM_KNIGHT&lt;Appearance Type Doom Knight&gt;|APPEARANCE_TYPE_DRACOLICH&lt;Appearance Type Dracolich&gt;|APPEARANCE_TYPE_DRAGON_BLACK&lt;Appearance Type Dragon Black&gt;|APPEARANCE_TYPE_DRAGON_BLUE&lt;Appearance Type Dragon Blue&gt;|APPEARANCE_TYPE_DRAGON_BRASS&lt;Appearance Type Dragon Brass&gt;|APPEARANCE_TYPE_DRAGON_BRONZE&lt;Appearance Type Dragon Bronze&gt;|APPEARANCE_TYPE_DRAGON_COPPER&lt;Appearance Type Dragon Copper&gt;|APPEARANCE_TYPE_DRAGON_GOLD&lt;Appearance Type Dragon Gold&gt;|APPEARANCE_TYPE_DRAGON_GREEN&lt;Appearance Type Dragon Green&gt;|APPEARANCE_TYPE_DRAGON_PRIS&lt;Appearance Type Dragon Pris&gt;|APPEARANCE_TYPE_DRAGON_RED&lt;Appearance Type Dragon Red&gt;|APPEARANCE_TYPE_DRAGON_SHADOW&lt;Appearance Type Dragon Shadow&gt;|APPEARANCE_TYPE_DRAGON_SILVER&lt;Appearance Type Dragon Silver&gt;|APPEARANCE_TYPE_DRAGON_WHITE&lt;Appearance Type Dragon White&gt;|APPEARANCE_TYPE_DRIDER_FEMALE&lt;Appearance Type Drider Female&gt;|APPEARANCE_TYPE_DRIDER&lt;Appearance Type Drider&gt;|APPEARANCE_TYPE_DRIDER_CHIEF&lt;Appearance Type Drider Chief&gt;|APPEARANCE_TYPE_OBJECT_BOAT&lt;Appearance Type Object Boat&gt;|APPEARANCE_TYPE_DROW_CLERIC&lt;Appearance Type Drow Cleric&gt;|APPEARANCE_TYPE_DROW_FIGHTER&lt;Appearance Type Drow Fighter&gt;|APPEARANCE_TYPE_DROW_WARRIOR_1&lt;Appearance Type Drow Warrior 1&gt;|APPEARANCE_TYPE_DROW_WARRIOR_2&lt;Appearance Type Drow Warrior 2&gt;|APPEARANCE_TYPE_DROW_WARRIOR_3&lt;Appearance Type Drow Warrior 3&gt;|APPEARANCE_TYPE_DROW_MATRON&lt;Appearance Type Drow Matron&gt;|APPEARANCE_TYPE_DROW_SLAVE&lt;Appearance Type Drow Slave&gt;|APPEARANCE_TYPE_DROW_FEMALE_1&lt;Appearance Type Drow Female 1&gt;|APPEARANCE_TYPE_DROW_FEMALE_2&lt;Appearance Type Drow Female 2&gt;|APPEARANCE_TYPE_DROW_WIZARD&lt;Appearance Type Drow Wizard&gt;|APPEARANCE_TYPE_DRYAD&lt;Appearance Type Dryad&gt;|APPEARANCE_TYPE_DRUEGAR_CLERIC&lt;Appearance Type Druegar Cleric&gt;|APPEARANCE_TYPE_DRUEGAR_FIGHTER&lt;Appearance Type Druegar Fighter&gt;|APPEARANCE_TYPE_DUERGAR_CHIEF&lt;Appearance Type Duergar Chief&gt;|APPEARANCE_TYPE_DUERGAR_SLAVE&lt;Appearance Type Duergar Slave&gt;|APPEARANCE_TYPE_DWARF&lt;Appearance Type Dwarf&gt;|APPEARANCE_TYPE_DWARF_NPC_FEMALE&lt;Appearance Type Dwarf Npc Female&gt;|APPEARANCE_TYPE_DWARF_NPC_MALE&lt;Appearance Type Dwarf Npc Male&gt;|APPEARANCE_TYPE_ELEMENTAL_AIR&lt;Appearance Type Elemental Air&gt;|APPEARANCE_TYPE_ELEMENTAL_AIR_ELDER&lt;Appearance Type Elemental Air Elder&gt;|APPEARANCE_TYPE_ELEMENTAL_EARTH&lt;Appearance Type Elemental Earth&gt;|APPEARANCE_TYPE_ELEMENTAL_EARTH_ELDER&lt;Appearance Type Elemental Earth Elder&gt;|APPEARANCE_TYPE_ELEMENTAL_FIRE&lt;Appearance Type Elemental Fire&gt;|APPEARANCE_TYPE_ELEMENTAL_FIRE_ELDER&lt;Appearance Type Elemental Fire Elder&gt;|APPEARANCE_TYPE_ELEMENTAL_WATER&lt;Appearance Type Elemental Water&gt;|APPEARANCE_TYPE_ELEMENTAL_WATER_ELDER&lt;Appearance Type Elemental Water Elder&gt;|APPEARANCE_TYPE_ELF&lt;Appearance Type Elf&gt;|APPEARANCE_TYPE_ELF_NPC_FEMALE&lt;Appearance Type Elf Npc Female&gt;|APPEARANCE_TYPE_ELF_NPC_MALE01&lt;Appearance Type Elf Npc Male01&gt;|APPEARANCE_TYPE_ELF_NPC_MALE02&lt;Appearance Type Elf Npc Male02&gt;|APPEARANCE_TYPE_ETTERCAP&lt;Appearance Type Ettercap&gt;|APPEARANCE_TYPE_ETTIN&lt;Appearance Type Ettin&gt;|APPEARANCE_TYPE_FAERIE_DRAGON&lt;Appearance Type Faerie Dragon&gt;|APPEARANCE_TYPE_FAIRY&lt;Appearance Type Fairy&gt;|APPEARANCE_TYPE_FALCON&lt;Appearance Type Falcon&gt;|APPEARANCE_TYPE_FEMALE_01&lt;Appearance Type Female 01&gt;|APPEARANCE_TYPE_FEMALE_02&lt;Appearance Type Female 02&gt;|APPEARANCE_TYPE_FEMALE_03&lt;Appearance Type Female 03&gt;|APPEARANCE_TYPE_FEMALE_04&lt;Appearance Type Female 04&gt;|APPEARANCE_TYPE_FEMALE_05&lt;Appearance Type Female 05&gt;|APPEARANCE_TYPE_OBJECT_FLAME_LARGE&lt;Appearance Type Object Flame Large&gt;|APPEARANCE_TYPE_OBJECT_FLAME_MEDIUM&lt;Appearance Type Object Flame Medium&gt;|APPEARANCE_TYPE_OBJECT_FLAME_SMALL&lt;Appearance Type Object Flame Small&gt;|APPEARANCE_TYPE_FORMIAN_MYRMARCH&lt;Appearance Type Formian Myrmarch&gt;|APPEARANCE_TYPE_FORMIAN_QUEEN&lt;Appearance Type Formian Queen&gt;|APPEARANCE_TYPE_FORMIAN_&lt;Appearance Type Formian&gt;|APPEARANCE_TYPE_FORMIAN_&lt;Appearance Type Formian&gt;|APPEARANCE_TYPE_GARGOYLE&lt;Appearance Type Gargoyle&gt;|APPEARANCE_TYPE_GELATINOUS_CUBE&lt;Appearance Type Gelatinous Cube&gt;|APPEARANCE_TYPE_GHAST&lt;Appearance Type Ghast&gt;|APPEARANCE_TYPE_GHOUL&lt;Appearance Type Ghoul&gt;|APPEARANCE_TYPE_GHOUL_LORD&lt;Appearance Type Ghoul Lord&gt;|APPEARANCE_TYPE_GIANT_FIRE&lt;Appearance Type Giant Fire&gt;|APPEARANCE_TYPE_GIANT_FIRE_FEMALE&lt;Appearance Type Giant Fire Female&gt;|APPEARANCE_TYPE_GIANT_FROST&lt;Appearance Type Giant Frost&gt;|APPEARANCE_TYPE_GIANT_FROST_FEMALE&lt;Appearance Type Giant Frost Female&gt;|APPEARANCE_TYPE_GIANT_HILL&lt;Appearance Type Giant Hill&gt;|APPEARANCE_TYPE_GIANT_MOUNTAIN&lt;Appearance Type Giant Mountain&gt;|APPEARANCE_TYPE_GNOLL_WARRIOR&lt;Appearance Type Gnoll Warrior&gt;|APPEARANCE_TYPE_GNOLL_WIZ&lt;Appearance Type Gnoll Wiz&gt;|APPEARANCE_TYPE_GNOME&lt;Appearance Type Gnome&gt;|APPEARANCE_TYPE_GNOME_NPC_FEMALE&lt;Appearance Type Gnome Npc Female&gt;|APPEARANCE_TYPE_GNOME_NPC_MALE&lt;Appearance Type Gnome Npc Male&gt;|APPEARANCE_TYPE_GOBLIN_A&lt;Appearance Type Goblin A&gt;|APPEARANCE_TYPE_GOBLIN_B&lt;Appearance Type Goblin B&gt;|APPEARANCE_TYPE_GOBLIN_CHIEF_A&lt;Appearance Type Goblin Chief A&gt;|APPEARANCE_TYPE_GOBLIN_CHIEF_B&lt;Appearance Type Goblin Chief B&gt;|APPEARANCE_TYPE_GOBLIN_SHAMAN_A&lt;Appearance Type Goblin Shaman A&gt;|APPEARANCE_TYPE_GOBLIN_SHAMAN_B&lt;Appearance Type Goblin Shaman B&gt;|APPEARANCE_TYPE_GOLEM_ADAMANTIUM&lt;Appearance Type Golem Adamantium&gt;|APPEARANCE_TYPE_GOLEM_BONE&lt;Appearance Type Golem Bone&gt;|APPEARANCE_TYPE_GOLEM_CLAY&lt;Appearance Type Golem Clay&gt;|APPEARANCE_TYPE_GOLEM_DEMONFLESH&lt;Appearance Type Golem Demonflesh&gt;|APPEARANCE_TYPE_GOLEM_FLESH&lt;Appearance Type Golem Flesh&gt;|APPEARANCE_TYPE_GOLEM_IRON&lt;Appearance Type Golem Iron&gt;|APPEARANCE_TYPE_GOLEM_MITHRAL&lt;Appearance Type Golem Mithral&gt;|APPEARANCE_TYPE_GOLEM_STONE&lt;Appearance Type Golem Stone&gt;|APPEARANCE_TYPE_GORGON&lt;Appearance Type Gorgon&gt;|APPEARANCE_TYPE_GRAY_OOZE&lt;Appearance Type Gray Ooze&gt;|APPEARANCE_TYPE_GREY_RENDER&lt;Appearance Type Grey Render&gt;|APPEARANCE_TYPE_GYNOSPHINX&lt;Appearance Type Gynosphinx&gt;|APPEARANCE_TYPE_HALF_ELF&lt;Appearance Type Half Elf&gt;|APPEARANCE_TYPE_HALFLING&lt;Appearance Type Halfling&gt;|APPEARANCE_TYPE_HALFLING_NPC_FEMALE&lt;Appearance Type Halfling Npc Female&gt;|APPEARANCE_TYPE_HALFLING_NPC_MALE&lt;Appearance Type Halfling Npc Male&gt;|APPEARANCE_TYPE_HALF_ORC&lt;Appearance Type Half Orc&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_FEMALE&lt;Appearance Type Half Orc Npc Female&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_MALE_01&lt;Appearance Type Half Orc Npc Male 01&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_MALE_02&lt;Appearance Type Half Orc Npc Male 02&gt;|APPEARANCE_TYPE_HARPY&lt;Appearance Type Harpy&gt;|APPEARANCE_TYPE_HELMED_HORROR&lt;Appearance Type Helmed Horror&gt;|APPEARANCE_TYPE_HEURODIS_LICH&lt;Appearance Type Heurodis Lich&gt;|APPEARANCE_TYPE_HOBGOBLIN_WARRIROR&lt;Appearance Type Hobgoblin Warriror&gt;|APPEARANCE_TYPE_HOBGOBLIN_WIZARD&lt;Appearance Type Hobgoblin Wizard&gt;|APPEARANCE_TYPE_HOOK_HORROR&lt;Appearance Type Hook Horror&gt;|APPEARANCE_TYPE_RAKSHASA_WOLF_MALE&lt;Appearance Type Rakshasa Wolf Male&gt;|APPEARANCE_TYPE_HOUSE_GUARD&lt;Appearance Type House Guard&gt;|APPEARANCE_TYPE_HUMAN&lt;Appearance Type Human&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_01&lt;Appearance Type Human Npc Female 01&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_02&lt;Appearance Type Human Npc Female 02&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_03&lt;Appearance Type Human Npc Female 03&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_04&lt;Appearance Type Human Npc Female 04&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_05&lt;Appearance Type Human Npc Female 05&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_06&lt;Appearance Type Human Npc Female 06&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_07&lt;Appearance Type Human Npc Female 07&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_08&lt;Appearance Type Human Npc Female 08&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_09&lt;Appearance Type Human Npc Female 09&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_10&lt;Appearance Type Human Npc Female 10&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_11&lt;Appearance Type Human Npc Female 11&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_12&lt;Appearance Type Human Npc Female 12&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_01&lt;Appearance Type Human Npc Male 01&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_02&lt;Appearance Type Human Npc Male 02&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_03&lt;Appearance Type Human Npc Male 03&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_04&lt;Appearance Type Human Npc Male 04&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_05&lt;Appearance Type Human Npc Male 05&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_06&lt;Appearance Type Human Npc Male 06&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_07&lt;Appearance Type Human Npc Male 07&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_08&lt;Appearance Type Human Npc Male 08&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_09&lt;Appearance Type Human Npc Male 09&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_10&lt;Appearance Type Human Npc Male 10&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_11&lt;Appearance Type Human Npc Male 11&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_12&lt;Appearance Type Human Npc Male 12&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_13&lt;Appearance Type Human Npc Male 13&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_14&lt;Appearance Type Human Npc Male 14&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_15&lt;Appearance Type Human Npc Male 15&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_16&lt;Appearance Type Human Npc Male 16&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_17&lt;Appearance Type Human Npc Male 17&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_18&lt;Appearance Type Human Npc Male 18&gt;|APPEARANCE_TYPE_IMP&lt;Appearance Type Imp&gt;|APPEARANCE_TYPE_INN_KEEPER&lt;Appearance Type Inn Keeper&gt;|APPEARANCE_TYPE_INTELLECT_DEVOURER&lt;Appearance Type Intellect Devourer&gt;|APPEARANCE_TYPE_SKELETAL_DEVOURER&lt;Appearance Type Skeletal Devourer&gt;|APPEARANCE_TYPE_WAR_DEVOURER&lt;Appearance Type War Devourer&gt;|APPEARANCE_TYPE_INVALID&lt;Appearance Type Invalid&gt;|APPEARANCE_TYPE_INVISIBLE_STALKER&lt;Appearance Type Invisible Stalker&gt;|APPEARANCE_TYPE_KOBOLD_A&lt;Appearance Type Kobold A&gt;|APPEARANCE_TYPE_KOBOLD_A&lt;Appearance Type Kobold A&gt;|APPEARANCE_TYPE_KOBOLD_CHIEF_A&lt;Appearance Type Kobold Chief A&gt;|APPEARANCE_TYPE_KOBOLD_CHIEF_B&lt;Appearance Type Kobold Chief B&gt;|APPEARANCE_TYPE_KOBOLD_SHAMAN_A&lt;Appearance Type Kobold Shaman A&gt;|APPEARANCE_TYPE_KOBOLD_SHAMAN_B&lt;Appearance Type Kobold Shaman B&gt;|APPEARANCE_TYPE_LANTERN_ARCHON&lt;Appearance Type Lantern Archon&gt;|APPEARANCE_TYPE_LICH&lt;Appearance Type Lich&gt;|APPEARANCE_TYPE_LIZARDFOLK_A&lt;Appearance Type Lizardfolk A&gt;|APPEARANCE_TYPE_LIZARDFOLK_B&lt;Appearance Type Lizardfolk B&gt;|APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_A&lt;Appearance Type Lizardfolk Shaman A&gt;|APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_B&lt;Appearance Type Lizardfolk Shaman B&gt;|APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_A&lt;Appearance Type Lizardfolk Warrior A&gt;|APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_B&lt;Appearance Type Lizardfolk Warrior B&gt;|APPEARANCE_TYPE_LUSKAN_GUARD&lt;Appearance Type Luskan Guard&gt;|APPEARANCE_TYPE_OBJECT_BLUE&lt;Appearance Type Object Blue&gt;|APPEARANCE_TYPE_OBJECT_CYAN&lt;Appearance Type Object Cyan&gt;|APPEARANCE_TYPE_OBJECT_GREEN&lt;Appearance Type Object Green&gt;|APPEARANCE_TYPE_OBJECT_ORANGE&lt;Appearance Type Object Orange&gt;|APPEARANCE_TYPE_OBJECT_PURPLE&lt;Appearance Type Object Purple&gt;|APPEARANCE_TYPE_OBJECT_RED&lt;Appearance Type Object Red&gt;|APPEARANCE_TYPE_OBJECT_WHITE&lt;Appearance Type Object White&gt;|APPEARANCE_TYPE_OBJECT_YELLOW&lt;Appearance Type Object Yellow&gt;|APPEARANCE_TYPE_MALE_01&lt;Appearance Type Male 01&gt;|APPEARANCE_TYPE_MALE_02&lt;Appearance Type Male 02&gt;|APPEARANCE_TYPE_MALE_03&lt;Appearance Type Male 03&gt;|APPEARANCE_TYPE_MALE_04&lt;Appearance Type Male 04&gt;|APPEARANCE_TYPE_MALE_05&lt;Appearance Type Male 05&gt;|APPEARANCE_TYPE_MANTICORE&lt;Appearance Type Manticore&gt;|APPEARANCE_TYPE_MEDUSA&lt;Appearance Type Medusa&gt;|APPEARANCE_TYPE_MEPHISTO_NORM&lt;Appearance Type Mephisto Norm&gt;|APPEARANCE_TYPE_MEPHISTO_BIG&lt;Appearance Type Mephisto Big&gt;|APPEARANCE_TYPE_MEPHIT_AIR&lt;Appearance Type Mephit Air&gt;|APPEARANCE_TYPE_MEPHIT_DUST&lt;Appearance Type Mephit Dust&gt;|APPEARANCE_TYPE_MEPHIT_EARTH&lt;Appearance Type Mephit Earth&gt;|APPEARANCE_TYPE_MEPHIT_FIRE&lt;Appearance Type Mephit Fire&gt;|APPEARANCE_TYPE_MEPHIT_ICE&lt;Appearance Type Mephit Ice&gt;|APPEARANCE_TYPE_MEPHIT_MAGMA&lt;Appearance Type Mephit Magma&gt;|APPEARANCE_TYPE_MEPHIT_OOZE&lt;Appearance Type Mephit Ooze&gt;|APPEARANCE_TYPE_MEPHIT_SALT&lt;Appearance Type Mephit Salt&gt;|APPEARANCE_TYPE_MEPHIT_STEAM&lt;Appearance Type Mephit Steam&gt;|APPEARANCE_TYPE_MEPHIT_WATER&lt;Appearance Type Mephit Water&gt;|APPEARANCE_TYPE_MINDFLAYER&lt;Appearance Type Mindflayer&gt;|APPEARANCE_TYPE_MINDFLAYER_ALHOON&lt;Appearance Type Mindflayer Alhoon&gt;|APPEARANCE_TYPE_MINDFLAYER_2&lt;Appearance Type Mindflayer 2&gt;|APPEARANCE_TYPE_MINOGON&lt;Appearance Type Minogon&gt;|APPEARANCE_TYPE_MINOTAUR&lt;Appearance Type Minotaur&gt;|APPEARANCE_TYPE_MINOTAUR_CHIEFTAN&lt;Appearance Type Minotaur Chieftan&gt;|APPEARANCE_TYPE_MINOTAUR_SHAMAN&lt;Appearance Type Minotaur Shaman&gt;|APPEARANCE_TYPE_MOHRG&lt;Appearance Type Mohrg&gt;|APPEARANCE_TYPE_MUMMY_COMMON&lt;Appearance Type Mummy Common&gt;|APPEARANCE_TYPE_MUMMY_GREATER&lt;Appearance Type Mummy Greater&gt;|APPEARANCE_TYPE_MUMMY_WARRIOR&lt;Appearance Type Mummy Warrior&gt;|APPEARANCE_TYPE_MUMMY_FIGHTER_2&lt;Appearance Type Mummy Fighter 2&gt;|APPEARANCE_TYPE_NW_MILITIA_MEMBER&lt;Appearance Type Nw Militia Member&gt;|APPEARANCE_TYPE_INVISIBLE_HUMAN_MALE&lt;Appearance Type Invisible Human Male&gt;|APPEARANCE_TYPE_NWN_AARIN&lt;Appearance Type Nwn Aarin&gt;|APPEARANCE_TYPE_ARIBETH&lt;Appearance Type Aribeth&gt;|APPEARANCE_TYPE_NWN_ARIBETH_EVIL&lt;Appearance Type Nwn Aribeth Evil&gt;|APPEARANCE_TYPE_HEDRALINE&lt;Appearance Type Hedraline&gt;|APPEARANCE_TYPE_NWN_MAUGRIM&lt;Appearance Type Nwn Maugrim&gt;|APPEARANCE_TYPE_NWN_MORAG&lt;Appearance Type Nwn Morag&gt;|APPEARANCE_TYPE_NWN_NASHER&lt;Appearance Type Nwn Nasher&gt;|APPEARANCE_TYPE_NWN_SEDOS&lt;Appearance Type Nwn Sedos&gt;|APPEARANCE_TYPE_NYMPH&lt;Appearance Type Nymph&gt;|APPEARANCE_TYPE_OCHRE_JELLY_LARGE&lt;Appearance Type Ochre Jelly Large&gt;|APPEARANCE_TYPE_OCHRE_JELLY_MEDIUM&lt;Appearance Type Ochre Jelly Medium&gt;|APPEARANCE_TYPE_OCHRE_JELLY_SMALL&lt;Appearance Type Ochre Jelly Small&gt;|APPEARANCE_TYPE_OGRE&lt;Appearance Type Ogre&gt;|APPEARANCE_TYPE_OGREB&lt;Appearance Type Ogreb&gt;|APPEARANCE_TYPE_OGRE_CHIEFTAIN&lt;Appearance Type Ogre Chieftain&gt;|APPEARANCE_TYPE_OGRE_CHIEFTAINB&lt;Appearance Type Ogre Chieftainb&gt;|APPEARANCE_TYPE_OGRE_MAGE&lt;Appearance Type Ogre Mage&gt;|APPEARANCE_TYPE_OGRE_MAGEB&lt;Appearance Type Ogre Mageb&gt;|APPEARANCE_TYPE_OLD_MAN&lt;Appearance Type Old Man&gt;|APPEARANCE_TYPE_OLD_WOMAN&lt;Appearance Type Old Woman&gt;|APPEARANCE_TYPE_ORC_A&lt;Appearance Type Orc A&gt;|APPEARANCE_TYPE_ORC_B&lt;Appearance Type Orc B&gt;|APPEARANCE_TYPE_ORC_CHIEFTAIN_A&lt;Appearance Type Orc Chieftain A&gt;|APPEARANCE_TYPE_ORC_CHIEFTAIN_B&lt;Appearance Type Orc Chieftain B&gt;|APPEARANCE_TYPE_ORC_SHAMAN_A&lt;Appearance Type Orc Shaman A&gt;|APPEARANCE_TYPE_ORC_SHAMAN_B&lt;Appearance Type Orc Shaman B&gt;|APPEARANCE_TYPE_OX&lt;Appearance Type Ox&gt;|APPEARANCE_TYPE_PARROT&lt;Appearance Type Parrot&gt;|APPEARANCE_TYPE_PENGIUN&lt;Appearance Type Pengiun&gt;|APPEARANCE_TYPE_PLAGUE_VICTIM&lt;Appearance Type Plague Victim&gt;|APPEARANCE_TYPE_PROSTITUTE_01&lt;Appearance Type Prostitute 01&gt;|APPEARANCE_TYPE_PROSTITUTE_02&lt;Appearance Type Prostitute 02&gt;|APPEARANCE_TYPE_PSEUDODRAGON&lt;Appearance Type Pseudodragon&gt;|APPEARANCE_TYPE_QUASIT&lt;Appearance Type Quasit&gt;|APPEARANCE_TYPE_RAKSHASA_TIGER_FEMALE&lt;Appearance Type Rakshasa Tiger Female&gt;|APPEARANCE_TYPE_RAKSHASA_TIGER_MALE&lt;Appearance Type Rakshasa Tiger Male&gt;|APPEARANCE_TYPE_RAT&lt;Appearance Type Rat&gt;|APPEARANCE_TYPE_RAT_DIRE&lt;Appearance Type Rat Dire&gt;|APPEARANCE_TYPE_RAVEN&lt;Appearance Type Raven&gt;|APPEARANCE_TYPE_SAHUAGIN&lt;Appearance Type Sahuagin&gt;|APPEARANCE_TYPE_SAHUAGIN_CLERIC&lt;Appearance Type Sahuagin Cleric&gt;|APPEARANCE_TYPE_SAHUAGIN_LEADER&lt;Appearance Type Sahuagin Leader&gt;|APPEARANCE_TYPE_SEA_HAG&lt;Appearance Type Sea Hag&gt;|APPEARANCE_TYPE_SEAGULL_FLYING&lt;Appearance Type Seagull Flying&gt;|APPEARANCE_TYPE_SEAGULL_WALKING&lt;Appearance Type Seagull Walking&gt;|APPEARANCE_TYPE_SHADOW&lt;Appearance Type Shadow&gt;|APPEARANCE_TYPE_SHADOW_FIEND&lt;Appearance Type Shadow Fiend&gt;|APPEARANCE_TYPE_SHARK_GOBLIN&lt;Appearance Type Shark Goblin&gt;|APPEARANCE_TYPE_SHARK_MAKO&lt;Appearance Type Shark Mako&gt;|APPEARANCE_TYPE_SHARK_HAMMERHEAD&lt;Appearance Type Shark Hammerhead&gt;|APPEARANCE_TYPE_SHIELD_GUARDIAN&lt;Appearance Type Shield Guardian&gt;|APPEARANCE_TYPE_SHOP_KEEPER&lt;Appearance Type Shop Keeper&gt;|APPEARANCE_TYPE_SKELETON_CHIEFTAIN&lt;Appearance Type Skeleton Chieftain&gt;|APPEARANCE_TYPE_SKELETON_COMMON&lt;Appearance Type Skeleton Common&gt;|APPEARANCE_TYPE_SKELETON_MAGE&lt;Appearance Type Skeleton Mage&gt;|APPEARANCE_TYPE_SKELETON_PRIEST&lt;Appearance Type Skeleton Priest&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR&lt;Appearance Type Skeleton Warrior&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR_1&lt;Appearance Type Skeleton Warrior 1&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR_2&lt;Appearance Type Skeleton Warrior 2&gt;|APPEARANCE_TYPE_SLAAD_BLACK&lt;Appearance Type Slaad Black&gt;|APPEARANCE_TYPE_SLAAD_BLUE&lt;Appearance Type Slaad Blue&gt;|APPEARANCE_TYPE_SLAAD_DEATH&lt;Appearance Type Slaad Death&gt;|APPEARANCE_TYPE_SLAAD_GRAY&lt;Appearance Type Slaad Gray&gt;|APPEARANCE_TYPE_SLAAD_GREEN&lt;Appearance Type Slaad Green&gt;|APPEARANCE_TYPE_SLAAD_RED&lt;Appearance Type Slaad Red&gt;|APPEARANCE_TYPE_SLAAD_WHITE&lt;Appearance Type Slaad White&gt;|APPEARANCE_TYPE_SPECTRE&lt;Appearance Type Spectre&gt;|APPEARANCE_TYPE_SPHINX&lt;Appearance Type Sphinx&gt;|APPEARANCE_TYPE_SPIDER_DIRE&lt;Appearance Type Spider Dire&gt;|APPEARANCE_TYPE_SPIDER_GIANT&lt;Appearance Type Spider Giant&gt;|APPEARANCE_TYPE_SPIDER_PHASE&lt;Appearance Type Spider Phase&gt;|APPEARANCE_TYPE_SPIDER_SWORD&lt;Appearance Type Spider Sword&gt;|APPEARANCE_TYPE_SPIDER_WRAITH&lt;Appearance Type Spider Wraith&gt;|APPEARANCE_TYPE_STINGER&lt;Appearance Type Stinger&gt;|APPEARANCE_TYPE_STINGER_CHIEFTAIN&lt;Appearance Type Stinger Chieftain&gt;|APPEARANCE_TYPE_STINGER_MAGE&lt;Appearance Type Stinger Mage&gt;|APPEARANCE_TYPE_&lt;Appearance Type&gt;|APPEARANCE_TYPE_SUCCUBUS&lt;Appearance Type Succubus&gt;|APPEARANCE_TYPE_SVIRF_FEMALE&lt;Appearance Type Svirf Female&gt;|APPEARANCE_TYPE_SVIRF_MALE&lt;Appearance Type Svirf Male&gt;|APPEARANCE_TYPE_OBJECT_TABLE&lt;Appearance Type Object Table&gt;|APPEARANCE_TYPE_TROGLODYTE&lt;Appearance Type Troglodyte&gt;|APPEARANCE_TYPE_TROGLODYTE_CLERIC&lt;Appearance Type Troglodyte Cleric&gt;|APPEARANCE_TYPE_TROGLODYTE_WARRIOR&lt;Appearance Type Troglodyte Warrior&gt;|APPEARANCE_TYPE_TROLL&lt;Appearance Type Troll&gt;|APPEARANCE_TYPE_TROLL_CHIEFTAIN&lt;Appearance Type Troll Chieftain&gt;|APPEARANCE_TYPE_TROLL_SHAMAN&lt;Appearance Type Troll Shaman&gt;|APPEARANCE_TYPE_UMBERHULK&lt;Appearance Type Umberhulk&gt;|APPEARANCE_TYPE_UTHGARD_ELK_TRIBE&lt;Appearance Type Uthgard Elk Tribe&gt;|APPEARANCE_TYPE_UTHGARD_TIGER_TRIBE&lt;Appearance Type Uthgard Tiger Tribe&gt;|APPEARANCE_TYPE_VAMPIRE_FEMALE&lt;Appearance Type Vampire Female&gt;|APPEARANCE_TYPE_VAMPIRE_MALE&lt;Appearance Type Vampire Male&gt;|APPEARANCE_TYPE_VROCK&lt;Appearance Type Vrock&gt;|APPEARANCE_TYPE_WAITRESS&lt;Appearance Type Waitress&gt;|APPEARANCE_TYPE_WERECAT&lt;Appearance Type Werecat&gt;|APPEARANCE_TYPE_WERERAT&lt;Appearance Type Wererat&gt;|APPEARANCE_TYPE_WEREWOLF&lt;Appearance Type Werewolf&gt;|APPEARANCE_TYPE_WIGHT&lt;Appearance Type Wight&gt;|APPEARANCE_TYPE_WILL_O_WISP&lt;Appearance Type Will O Wisp&gt;|APPEARANCE_TYPE_WRAITH&lt;Appearance Type Wraith&gt;|APPEARANCE_TYPE_WYRMLING_BLACK&lt;Appearance Type Wyrmling Black&gt;|APPEARANCE_TYPE_WYRMLING_BLUE&lt;Appearance Type Wyrmling Blue&gt;|APPEARANCE_TYPE_WYRMLING_BRASS&lt;Appearance Type Wyrmling Brass&gt;|APPEARANCE_TYPE_WYRMLING_BRONZE&lt;Appearance Type Wyrmling Bronze&gt;|APPEARANCE_TYPE_WYRMLING_COPPER&lt;Appearance Type Wyrmling Copper&gt;|APPEARANCE_TYPE_WYRMLING_GOLD&lt;Appearance Type Wyrmling Gold&gt;|APPEARANCE_TYPE_WYRMLING_GREEN&lt;Appearance Type Wyrmling Green&gt;|APPEARANCE_TYPE_WYRMLING_RED&lt;Appearance Type Wyrmling Red&gt;|APPEARANCE_TYPE_WYRMLING_SILVER&lt;Appearance Type Wyrmling Silver&gt;|APPEARANCE_TYPE_WYRMLING_WHITE&lt;Appearance Type Wyrmling White&gt;|APPEARANCE_TYPE_YUAN_TI&lt;Appearance Type Yuan Ti&gt;|APPEARANCE_TYPE_YUAN_TI_CHIEFTEN&lt;Appearance Type Yuan Ti Chieften&gt;|APPEARANCE_TYPE_YUAN_TI_WIZARD&lt;Appearance Type Yuan Ti Wizard&gt;|APPEARANCE_TYPE_ZOMBIE&lt;Appearance Type Zombie&gt;|APPEARANCE_TYPE_ZOMBIE_ROTTING&lt;Appearance Type Zombie Rotting&gt;|APPEARANCE_TYPE_ZOMBIE_TYRANT_FOG&lt;Appearance Type Zombie Tyrant Fog&gt;|APPEARANCE_TYPE_ZOMBIE_WARRIOR_1&lt;Appearance Type Zombie Warrior 1&gt;|APPEARANCE_TYPE_ZOMBIE_WARRIOR_2&lt;Appearance Type Zombie Warrior 2&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>FadeSpeed</Name>
      <Keyword>fade_speed</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FADE_SPEED_FASTEST&lt;Fade Speed Fastest&gt;|FADE_SPEED_FAST&lt;Fade Speed Fast&gt;|FADE_SPEED_MEDIUM&lt;Fade Speed Medium&gt;|FADE_SPEED_SLOW&lt;Fade Speed Slow&gt;|FADE_SPEED_SLOWEST&lt;Fade Speed Slowest&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Skill</Name>
      <Keyword>skill</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SKILL_ALL_SKILLS&lt;Skill All Skills&gt;|SKILL_ANIMAL_EMPATHY&lt;Skill Animal Empathy&gt;|SKILL_CONCENTRATION&lt;Skill Concentration&gt;|SKILL_DISABLE_TRAP&lt;Skill Disable Trap&gt;|SKILL_DISCIPLINE&lt;Skill Discipline&gt;|SKILL_HEAL&lt;Skill Heal&gt;|SKILL_LISTEN&lt;Skill Listen&gt;|SKILL_LORE&lt;Skill Lore&gt;|SKILL_MOVE_SILENTLY&lt;Skill Move Silently&gt;|SKILL_OPEN_LOCK&lt;Skill Open Lock&gt;|SKILL_PARRY&lt;Skill Parry&gt;|SKILL_PERFORM&lt;Skill Perform&gt;|SKILL_PERSUADE&lt;Skill Persuade&gt;|SKILL_PICK_POCKET&lt;Skill Pick Pocket&gt;|SKILL_SEARCH&lt;Skill Search&gt;|SKILL_SET_TRAP&lt;Skill Set Trap&gt;|SKILL_SPELLCRAFT&lt;Skill Spellcraft&gt;|SKILL_SPOT&lt;Skill Spot&gt;|SKILL_TAUNT&lt;Skill Taunt&gt;|SKILL_USE_MAGIC_DEVICE&lt;Skill Use Magic Device&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>AreaOfEffect</Name>
      <Keyword>area_of_effect</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>AOE_PER_CREEPING_DOOM&lt;Aoe Per Creeping Doom&gt;|AOE_PER_DARKNESS&lt;Aoe Per Darkness&gt;|AOE_PER_DELAY_BLAST_FIREBALL&lt;Aoe Per Delay Blast Fireball&gt;|AOE_PER_ENTANGLE&lt;Aoe Per Entangle&gt;|AOE_PER_FOG_OF_BEWILDERMENT&lt;Aoe Per Fog Of Bewilderment&gt;|AOE_PER_FOGACID&lt;Aoe Per Fogacid&gt;|AOE_PER_FOGFIRE&lt;Aoe Per Fogfire&gt;|AOE_PER_FOGGHOUL&lt;Aoe Per Fogghoul&gt;|AOE_PER_FOGKILL&lt;Aoe Per Fogkill&gt;|AOE_PER_FOGMIND&lt;Aoe Per Fogmind&gt;|AOE_PER_FOGSTINK&lt;Aoe Per Fogstink&gt;|AOE_PER_GLYPH_OF_WARDING&lt;Aoe Per Glyph Of Warding&gt;|AOE_PER_GREASE&lt;Aoe Per Grease&gt;|AOE_PER_INVIS_SPHERE&lt;Aoe Per Invis Sphere&gt;|AOE_PER_STONEHOLD&lt;Aoe Per Stonehold&gt;|AOE_PER_STORM&lt;Aoe Per Storm&gt;|AOE_PER_VINE_MINE_CAMOUFLAGE&lt;Aoe Per Vine Mine Camouflage&gt;|AOE_PER_WALLBLADE&lt;Aoe Per Wallblade&gt;|AOE_PER_WALLFIRE&lt;Aoe Per Wallfire&gt;|AOE_PER_WALLWIND&lt;Aoe Per Wallwind&gt;|AOE_PER_WEB&lt;Aoe Per Web&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>AssociateType</Name>
      <Keyword>associate_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ASSOCIATE_TYPE_DOMINATED&lt;Associate Type Dominated&gt;|ASSOCIATE_TYPE_FAMILIAR&lt;Associate Type Familiar&gt;|ASSOCIATE_TYPE_HENCHMAN&lt;Associate Type Henchman&gt;|ASSOCIATE_TYPE_SUMMONED&lt;Associate Type Summoned&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Ability</Name>
      <Keyword>ability</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ABILITY_CHARISMA&lt;Ability Charisma&gt;|ABILITY_CONSTITUTION&lt;Ability Constitution&gt;|ABILITY_DEXTERITY&lt;Ability Dexterity&gt;|ABILITY_INTELLIGENCE&lt;Ability Intelligence&gt;|ABILITY_STRENGTH&lt;Ability Strength&gt;|ABILITY_WISDOM&lt;Ability Wisdom&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>ActionMode</Name>
      <Keyword>action_mode</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ACTION_MODE_COUNTERSPELL&lt;Action Mode Counterspell&gt;|ACTION_MODE_DEFENSIVE_CAST&lt;Action Mode Defensive Cast&gt;|ACTION_MODE_DETECT&lt;Action Mode Detect&gt;|ACTION_MODE_DIRTY_FIGHTING&lt;Action Mode Dirty Fighting&gt;|ACTION_MODE_EXPERTISE&lt;Action Mode Expertise&gt;|ACTION_MODE_FLURRY_OF_BLOWS&lt;Action Mode Flurry Of Blows&gt;|ACTION_MODE_IMPROVED_EXPERTISE&lt;Action Mode Improved Expertise&gt;|ACTION_MODE_IMPROVED_POWER_ATTACK&lt;Action Mode Improved Power Attack&gt;|ACTION_MODE_PARRY&lt;Action Mode Parry&gt;|ACTION_MODE_POWER_ATTACK&lt;Action Mode Power Attack&gt;|ACTION_MODE_RAPID_SHOT&lt;Action Mode Rapid Shot&gt;|ACTION_MODE_STEALTH&lt;Action Mode Stealth&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>TimedCreatureAnimations</Name>
      <Keyword>timed_creature_animation</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ANIMATION_LOOPING_CONJURE1&lt;Animation Looping Conjure1&gt;|ANIMATION_LOOPING_CONJURE2&lt;Animation Looping Conjure2&gt;|ANIMATION_LOOPING_DEAD_BACK&lt;Animation Looping Dead Back&gt;|ANIMATION_LOOPING_DEAD_FRONT&lt;Animation Looping Dead Front&gt;|ANIMATION_LOOPING_PAUSE_DRUNK&lt;Animation Looping Pause Drunk&gt;|ANIMATION_LOOPING_GET_LOW&lt;Animation Looping Get Low&gt;|ANIMATION_LOOPING_GET_MID&lt;Animation Looping Get Mid&gt;|ANIMATION_LOOPING_LISTEN&lt;Animation Looping Listen&gt;|ANIMATION_LOOPING_LOOK_FAR&lt;Animation Looping Look Far&gt;|ANIMATION_LOOPING_MEDITATE&lt;Animation Looping Meditate&gt;|ANIMATION_LOOPING_PAUSE&lt;Animation Looping Pause&gt;|ANIMATION_LOOPING_PAUSE2&lt;Animation Looping Pause2&gt;|ANIMATION_LOOPING_SIT_CHAIR&lt;Animation Looping Sit Chair&gt;|ANIMATION_LOOPING_SIT_CROSS&lt;Animation Looping Sit Cross&gt;|ANIMATION_LOOPING_SPASM&lt;Animation Looping Spasm&gt;|ANIMATION_LOOPING_TALK_FORCEFUL&lt;Animation Looping Talk Forceful&gt;|ANIMATION_LOOPING_TALK_LAUGHING&lt;Animation Looping Talk Laughing&gt;|ANIMATION_LOOPING_TALK_NORMAL&lt;Animation Looping Talk Normal&gt;|ANIMATION_LOOPING_TALK_PLEADING&lt;Animation Looping Talk Pleading&gt;|ANIMATION_LOOPING_PAUSE_TIRED&lt;Animation Looping Pause Tired&gt;|ANIMATION_LOOPING_WORSHIP&lt;Animation Looping Worship&gt;|ANIMATION_FIREFORGET_BOW&lt;Animation Fireforget Bow&gt;|ANIMATION_FIREFORGET_DODGE_DUCK&lt;Animation Fireforget Dodge Duck&gt;|ANIMATION_FIREFORGET_DODGE_SIDE&lt;Animation Fireforget Dodge Side&gt;|ANIMATION_FIREFORGET_DRINK&lt;Animation Fireforget Drink&gt;|ANIMATION_LOOPING_GET_LOW&lt;Animation Looping Get Low&gt;|ANIMATION_LOOPING_GET_MID&lt;Animation Looping Get Mid&gt;|ANIMATION_FIREFORGET_GREETING&lt;Animation Fireforget Greeting&gt;|ANIMATION_FIREFORGET_PAUSE_BORED&lt;Animation Fireforget Pause Bored&gt;|ANIMATION_FIREFORGET_PAUSE_SCRATCH_HEAD&lt;Animation Fireforget Pause Scratch Head&gt;|ANIMATION_FIREFORGET_READ&lt;Animation Fireforget Read&gt;|ANIMATION_FIREFORGET_SALUTE&lt;Animation Fireforget Salute&gt;|ANIMATION_FIREFORGET_STEAL&lt;Animation Fireforget Steal&gt;|ANIMATION_FIREFORGET_TAUNT&lt;Animation Fireforget Taunt&gt;|ANIMATION_FIREFORGET_HEAD_TURN_RIGHT&lt;Animation Fireforget Head Turn Right&gt;|ANIMATION_FIREFORGET_HEAD_TURN_LEFT&lt;Animation Fireforget Head Turn Left&gt;|ANIMATION_FIREFORGET_VICTORY1&lt;Animation Fireforget Victory1&gt;|ANIMATION_FIREFORGET_VICTORY2&lt;Animation Fireforget Victory2&gt;|ANIMATION_FIREFORGET_VICTORY3&lt;Animation Fireforget Victory3&gt;|ANIMATION_FIREFORGET_PAUSE_BORED&lt;Animation Fireforget Pause Bored&gt;|ANIMATION_LOOPING_LISTEN&lt;Animation Looping Listen&gt;|ANIMATION_LOOPING_LOOK_FAR&lt;Animation Looping Look Far&gt;|ANIMATION_LOOPING_MEDITATE&lt;Animation Looping Meditate&gt;|ANIMATION_LOOPING_PAUSE&lt;Animation Looping Pause&gt;|ANIMATION_LOOPING_PAUSE2&lt;Animation Looping Pause2&gt;|ANIMATION_LOOPING_SIT_CHAIR&lt;Animation Looping Sit Chair&gt;|ANIMATION_LOOPING_SIT_CROSS&lt;Animation Looping Sit Cross&gt;|ANIMATION_LOOPING_TALK_FORCEFUL&lt;Animation Looping Talk Forceful&gt;|ANIMATION_LOOPING_TALK_LAUGHING&lt;Animation Looping Talk Laughing&gt;|ANIMATION_LOOPING_TALK_NORMAL&lt;Animation Looping Talk Normal&gt;|ANIMATION_LOOPING_TALK_PLEADING&lt;Animation Looping Talk Pleading&gt;|ANIMATION_LOOPING_PAUSE_TIRED&lt;Animation Looping Pause Tired&gt;|ANIMATION_FIREFORGET_BOW&lt;Animation Fireforget Bow&gt;|ANIMATION_FIREFORGET_DODGE_DUCK&lt;Animation Fireforget Dodge Duck&gt;|ANIMATION_FIREFORGET_DODGE_SIDE&lt;Animation Fireforget Dodge Side&gt;|ANIMATION_FIREFORGET_DRINK&lt;Animation Fireforget Drink&gt;|ANIMATION_LOOPING_GET_LOW&lt;Animation Looping Get Low&gt;|ANIMATION_LOOPING_GET_MID&lt;Animation Looping Get Mid&gt;|ANIMATION_FIREFORGET_GREETING&lt;Animation Fireforget Greeting&gt;|ANIMATION_FIREFORGET_PAUSE_BORED&lt;Animation Fireforget Pause Bored&gt;|ANIMATION_FIREFORGET_PAUSE_SCRATCH_HEAD&lt;Animation Fireforget Pause Scratch Head&gt;|ANIMATION_FIREFORGET_READ&lt;Animation Fireforget Read&gt;|ANIMATION_FIREFORGET_SALUTE&lt;Animation Fireforget Salute&gt;|ANIMATION_FIREFORGET_STEAL&lt;Animation Fireforget Steal&gt;|ANIMATION_FIREFORGET_TAUNT&lt;Animation Fireforget Taunt&gt;|ANIMATION_FIREFORGET_HEAD_TURN_RIGHT&lt;Animation Fireforget Head Turn Right&gt;|ANIMATION_FIREFORGET_HEAD_TURN_LEFT&lt;Animation Fireforget Head Turn Left&gt;|ANIMATION_FIREFORGET_VICTORY1&lt;Animation Fireforget Victory1&gt;|ANIMATION_FIREFORGET_VICTORY2&lt;Animation Fireforget Victory2&gt;|ANIMATION_FIREFORGET_VICTORY3&lt;Animation Fireforget Victory3&gt;|ANIMATION_FIREFORGET_PAUSE_BORED&lt;Animation Fireforget Pause Bored&gt;|ANIMATION_LOOPING_LISTEN&lt;Animation Looping Listen&gt;|ANIMATION_LOOPING_LOOK_FAR&lt;Animation Looping Look Far&gt;|ANIMATION_LOOPING_MEDITATE&lt;Animation Looping Meditate&gt;|ANIMATION_LOOPING_PAUSE&lt;Animation Looping Pause&gt;|ANIMATION_LOOPING_PAUSE2&lt;Animation Looping Pause2&gt;|ANIMATION_LOOPING_SIT_CHAIR&lt;Animation Looping Sit Chair&gt;|ANIMATION_LOOPING_SIT_CROSS&lt;Animation Looping Sit Cross&gt;|ANIMATION_LOOPING_TALK_FORCEFUL&lt;Animation Looping Talk Forceful&gt;|ANIMATION_LOOPING_TALK_LAUGHING&lt;Animation Looping Talk Laughing&gt;|ANIMATION_LOOPING_TALK_NORMAL&lt;Animation Looping Talk Normal&gt;|ANIMATION_LOOPING_TALK_PLEADING&lt;Animation Looping Talk Pleading&gt;|ANIMATION_LOOPING_PAUSE_TIRED&lt;Animation Looping Pause Tired&gt;|ANIMATION_LOOPING_CONJURE1&lt;Animation Looping Conjure1&gt;|ANIMATION_LOOPING_CONJURE2&lt;Animation Looping Conjure2&gt;|ANIMATION_LOOPING_DEAD_BACK&lt;Animation Looping Dead Back&gt;|ANIMATION_LOOPING_DEAD_FRONT&lt;Animation Looping Dead Front&gt;|ANIMATION_LOOPING_PAUSE_DRUNK&lt;Animation Looping Pause Drunk&gt;|ANIMATION_LOOPING_GET_LOW&lt;Animation Looping Get Low&gt;|ANIMATION_LOOPING_GET_MID&lt;Animation Looping Get Mid&gt;|ANIMATION_LOOPING_LISTEN&lt;Animation Looping Listen&gt;|ANIMATION_LOOPING_LOOK_FAR&lt;Animation Looping Look Far&gt;|ANIMATION_LOOPING_MEDITATE&lt;Animation Looping Meditate&gt;|ANIMATION_LOOPING_PAUSE&lt;Animation Looping Pause&gt;|ANIMATION_LOOPING_PAUSE2&lt;Animation Looping Pause2&gt;|ANIMATION_LOOPING_SIT_CHAIR&lt;Animation Looping Sit Chair&gt;|ANIMATION_LOOPING_SIT_CROSS&lt;Animation Looping Sit Cross&gt;|ANIMATION_LOOPING_SPASM&lt;Animation Looping Spasm&gt;|ANIMATION_LOOPING_TALK_FORCEFUL&lt;Animation Looping Talk Forceful&gt;|ANIMATION_LOOPING_TALK_LAUGHING&lt;Animation Looping Talk Laughing&gt;|ANIMATION_LOOPING_TALK_NORMAL&lt;Animation Looping Talk Normal&gt;|ANIMATION_LOOPING_TALK_PLEADING&lt;Animation Looping Talk Pleading&gt;|ANIMATION_LOOPING_PAUSE_TIRED&lt;Animation Looping Pause Tired&gt;|ANIMATION_LOOPING_WORSHIP&lt;Animation Looping Worship&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>PlaceableAnimation</Name>
      <Keyword>placeable_animation</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>ANIMATION_PLACEABLE_ACTIVATE&lt;Animation Placeable Activate&gt;|ANIMATION_PLACEABLE_CLOSE&lt;Animation Placeable Close&gt;|ANIMATION_PLACEABLE_DEACTIVATE&lt;Animation Placeable Deactivate&gt;|ANIMATION_PLACEABLE_OPEN&lt;Animation Placeable Open&gt;|ANIMATION_PLACEABLE_ACTIVATE&lt;Animation Placeable Activate&gt;|ANIMATION_PLACEABLE_CLOSE&lt;Animation Placeable Close&gt;|ANIMATION_PLACEABLE_DEACTIVATE&lt;Animation Placeable Deactivate&gt;|ANIMATION_PLACEABLE_OPEN&lt;Animation Placeable Open&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>CameraMode</Name>
      <Keyword>camera_mode</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>CAMERA_MODE_CHASE_CAMERA&lt;Camera Mode Chase Camera&gt;|CAMERA_MODE_STIFF_CHASE_CAMERA&lt;Camera Mode Stiff Chase Camera&gt;|CAMERA_MODE_TOP_DOWN&lt;Camera Mode Top Down&gt;|CAMERA_TRANSITION_TYPE_CRAWL&lt;Camera Transition Type Crawl&gt;|CAMERA_TRANSITION_TYPE_VERY_SLOW&lt;Camera Transition Type Very Slow&gt;|CAMERA_TRANSITION_TYPE_SLOW&lt;Camera Transition Type Slow&gt;|CAMERA_TRANSITION_TYPE_MEDIUM&lt;Camera Transition Type Medium&gt;|CAMERA_TRANSITION_TYPE_FAST&lt;Camera Transition Type Fast&gt;|CAMERA_TRANSITION_TYPE_VERY_FAST&lt;Camera Transition Type Very Fast&gt;|CAMERA_TRANSITION_TYPE_SNAP&lt;Camera Transition Type Snap&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>ClassType</Name>
      <Keyword>class_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>CLASS_TYPE_ARCANE_ARCHER&lt;Class Type Arcane Archer&gt;|CLASS_TYPE_ASSASSIN&lt;Class Type Assassin&gt;|CLASS_TYPE_BARBARIAN&lt;Class Type Barbarian&gt;|CLASS_TYPE_BARD&lt;Class Type Bard&gt;|CLASS_TYPE_BEAST&lt;Class Type Beast&gt;|CLASS_TYPE_BLACKGUARD&lt;Class Type Blackguard&gt;|CLASS_TYPE_CLERIC&lt;Class Type Cleric&gt;|CLASS_TYPE_DRUID&lt;Class Type Druid&gt;|CLASS_TYPE_FIGHTER&lt;Class Type Fighter&gt;|CLASS_TYPE_GIANT&lt;Class Type Giant&gt;|CLASS_TYPE_HARPER&lt;Class Type Harper&gt;|CLASS_TYPE_INVALID&lt;Class Type Invalid&gt;|CLASS_TYPE_MAGICAL_BEAST&lt;Class Type Magical Beast&gt;|CLASS_TYPE_MONK&lt;Class Type Monk&gt;|CLASS_TYPE_PALADIN&lt;Class Type Paladin&gt;|CLASS_TYPE_RANGER&lt;Class Type Ranger&gt;|CLASS_TYPE_SORCERER&lt;Class Type Sorcerer&gt;|CLASS_TYPE_UNDEAD&lt;Class Type Undead&gt;|CLASS_TYPE_WIZARD&lt;Class Type Wizard&gt;|CLASS_TYPE_ROGUE&lt;Class Type Rogue&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>DoorAction</Name>
      <Keyword>door_action</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>DOOR_ACTION_BASH&lt;Door Action Bash&gt;|DOOR_ACTION_IGNORE&lt;Door Action Ignore&gt;|DOOR_ACTION_KNOCK&lt;Door Action Knock&gt;|DOOR_ACTION_OPEN&lt;Door Action Open&gt;|DOOR_ACTION_UNLOCK&lt;Door Action Unlock&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>EffectType</Name>
      <Keyword>effect_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>EFFECT_TYPE_ABILITY_DECREASE&lt;Effect Type Ability Decrease&gt;|EFFECT_TYPE_ABILITY_INCREASE&lt;Effect Type Ability Increase&gt;|EFFECT_TYPE_AC_DECREASE&lt;Effect Type Ac Decrease&gt;|EFFECT_TYPE_AC_INCREASE&lt;Effect Type Ac Increase&gt;|EFFECT_TYPE_ARCANE_SPELL_FAILURE&lt;Effect Type Arcane Spell Failure&gt;|EFFECT_TYPE_AREA_OF_EFFECT&lt;Effect Type Area Of Effect&gt;|EFFECT_TYPE_ATTACK_DECREASE&lt;Effect Type Attack Decrease&gt;|EFFECT_TYPE_ATTACK_INCREASE&lt;Effect Type Attack Increase&gt;|EFFECT_TYPE_BEAM&lt;Effect Type Beam&gt;|EFFECT_TYPE_BLINDNESS&lt;Effect Type Blindness&gt;|EFFECT_TYPE_CHARMED&lt;Effect Type Charmed&gt;|EFFECT_TYPE_CONCEALMENT&lt;Effect Type Concealment&gt;|EFFECT_TYPE_CONFUSED&lt;Effect Type Confused&gt;|EFFECT_TYPE_CURSE&lt;Effect Type Curse&gt;|EFFECT_TYPE_CUTSCENE_PARALYZE&lt;Effect Type Cutscene Paralyze&gt;|EFFECT_TYPE_CUTSCENEGHOST&lt;Effect Type Cutsceneghost&gt;|EFFECT_TYPE_CUTSCENEIMMOBILIZE&lt;Effect Type Cutsceneimmobilize&gt;|EFFECT_TYPE_DAMAGE_DECREASE&lt;Effect Type Damage Decrease&gt;|EFFECT_TYPE_DAMAGE_IMMUNITY_DECREASE&lt;Effect Type Damage Immunity Decrease&gt;|EFFECT_TYPE_DAMAGE_IMMUNITY_INCREASE&lt;Effect Type Damage Immunity Increase&gt;|EFFECT_TYPE_DAMAGE_INCREASE&lt;Effect Type Damage Increase&gt;|EFFECT_TYPE_DAMAGE_REDUCTION&lt;Effect Type Damage Reduction&gt;|EFFECT_TYPE_DAMAGE_RESISTANCE&lt;Effect Type Damage Resistance&gt;|EFFECT_TYPE_DARKNESS&lt;Effect Type Darkness&gt;|EFFECT_TYPE_DAZED&lt;Effect Type Dazed&gt;|EFFECT_TYPE_DEAF&lt;Effect Type Deaf&gt;|EFFECT_TYPE_DISAPPEARAPPEAR&lt;Effect Type Disappearappear&gt;|EFFECT_TYPE_DISEASE&lt;Effect Type Disease&gt;|EFFECT_TYPE_DISPELMAGICALL&lt;Effect Type Dispelmagicall&gt;|EFFECT_TYPE_DISPELMAGICBEST&lt;Effect Type Dispelmagicbest&gt;|EFFECT_TYPE_DOMINATED&lt;Effect Type Dominated&gt;|EFFECT_TYPE_ELEMENTALSHIELD&lt;Effect Type Elementalshield&gt;|EFFECT_TYPE_ENEMY_ATTACK_BONUS&lt;Effect Type Enemy Attack Bonus&gt;|EFFECT_TYPE_ENTANGLE&lt;Effect Type Entangle&gt;|EFFECT_TYPE_ETHEREAL&lt;Effect Type Ethereal&gt;|EFFECT_TYPE_FRIGHTENED&lt;Effect Type Frightened&gt;|EFFECT_TYPE_HASTE&lt;Effect Type Haste&gt;|EFFECT_TYPE_IMMUNITY&lt;Effect Type Immunity&gt;|EFFECT_TYPE_IMPROVEDINVISIBILITY&lt;Effect Type Improvedinvisibility&gt;|EFFECT_TYPE_INVALIDEFFECT&lt;Effect Type Invalideffect&gt;|EFFECT_TYPE_INVISIBILITY&lt;Effect Type Invisibility&gt;|EFFECT_TYPE_INVULNERABLE&lt;Effect Type Invulnerable&gt;|EFFECT_TYPE_MISS_CHANCE&lt;Effect Type Miss Chance&gt;|EFFECT_TYPE_MOVEMENT_SPEED_DECREASE&lt;Effect Type Movement Speed Decrease&gt;|EFFECT_TYPE_MOVEMENT_SPEED_INCREASE&lt;Effect Type Movement Speed Increase&gt;|EFFECT_TYPE_NEGATIVELEVEL&lt;Effect Type Negativelevel&gt;|EFFECT_TYPE_PARALYZE&lt;Effect Type Paralyze&gt;|EFFECT_TYPE_PETRIFY&lt;Effect Type Petrify&gt;|EFFECT_TYPE_POISON&lt;Effect Type Poison&gt;|EFFECT_TYPE_POLYMORPH&lt;Effect Type Polymorph&gt;|EFFECT_TYPE_REGENERATE&lt;Effect Type Regenerate&gt;|EFFECT_TYPE_RESURRECTION&lt;Effect Type Resurrection&gt;|EFFECT_TYPE_SANCTUARY&lt;Effect Type Sanctuary&gt;|EFFECT_TYPE_SAVING_THROW_DECREASE&lt;Effect Type Saving Throw Decrease&gt;|EFFECT_TYPE_SAVING_THROW_INCREASE&lt;Effect Type Saving Throw Increase&gt;|EFFECT_TYPE_SEEINVISIBLE&lt;Effect Type Seeinvisible&gt;|EFFECT_TYPE_SILENCE&lt;Effect Type Silence&gt;|EFFECT_TYPE_SKILL_DECREASE&lt;Effect Type Skill Decrease&gt;|EFFECT_TYPE_SKILL_INCREASE&lt;Effect Type Skill Increase&gt;|EFFECT_TYPE_SLEEP&lt;Effect Type Sleep&gt;|EFFECT_TYPE_SLOW&lt;Effect Type Slow&gt;|EFFECT_TYPE_SPELL_FAILURE&lt;Effect Type Spell Failure&gt;|EFFECT_TYPE_SPELL_IMMUNITY&lt;Effect Type Spell Immunity&gt;|EFFECT_TYPE_SPELL_RESISTANCE_DECREASE&lt;Effect Type Spell Resistance Decrease&gt;|EFFECT_TYPE_SPELL_RESISTANCE_INCREASE&lt;Effect Type Spell Resistance Increase&gt;|EFFECT_TYPE_SPELLLEVELABSORPTION&lt;Effect Type Spelllevelabsorption&gt;|EFFECT_TYPE_STUNNED&lt;Effect Type Stunned&gt;|EFFECT_TYPE_SWARM&lt;Effect Type Swarm&gt;|EFFECT_TYPE_TEMPORARY_HITPOINTS&lt;Effect Type Temporary Hitpoints&gt;|EFFECT_TYPE_TIMESTOP&lt;Effect Type Timestop&gt;|EFFECT_TYPE_TRUESEEING&lt;Effect Type Trueseeing&gt;|EFFECT_TYPE_TURN_RESISTANCE_DECREASE&lt;Effect Type Turn Resistance Decrease&gt;|EFFECT_TYPE_TURN_RESISTANCE_INCREASE&lt;Effect Type Turn Resistance Increase&gt;|EFFECT_TYPE_TURNED&lt;Effect Type Turned&gt;|EFFECT_TYPE_ULTRAVISION&lt;Effect Type Ultravision&gt;|EFFECT_TYPE_VISUALEFFECT&lt;Effect Type Visualeffect&gt;|EFFECT_TYPE_ABILITY_DECREASE&lt;Effect Type Ability Decrease&gt;|EFFECT_TYPE_ABILITY_INCREASE&lt;Effect Type Ability Increase&gt;|EFFECT_TYPE_AC_DECREASE&lt;Effect Type Ac Decrease&gt;|EFFECT_TYPE_AC_INCREASE&lt;Effect Type Ac Increase&gt;|EFFECT_TYPE_ARCANE_SPELL_FAILURE&lt;Effect Type Arcane Spell Failure&gt;|EFFECT_TYPE_AREA_OF_EFFECT&lt;Effect Type Area Of Effect&gt;|EFFECT_TYPE_ATTACK_DECREASE&lt;Effect Type Attack Decrease&gt;|EFFECT_TYPE_ATTACK_INCREASE&lt;Effect Type Attack Increase&gt;|EFFECT_TYPE_BEAM&lt;Effect Type Beam&gt;|EFFECT_TYPE_BLINDNESS&lt;Effect Type Blindness&gt;|EFFECT_TYPE_CHARMED&lt;Effect Type Charmed&gt;|EFFECT_TYPE_CONCEALMENT&lt;Effect Type Concealment&gt;|EFFECT_TYPE_CONFUSED&lt;Effect Type Confused&gt;|EFFECT_TYPE_CURSE&lt;Effect Type Curse&gt;|EFFECT_TYPE_CUTSCENE_PARALYZE&lt;Effect Type Cutscene Paralyze&gt;|EFFECT_TYPE_CUTSCENEGHOST&lt;Effect Type Cutsceneghost&gt;|EFFECT_TYPE_CUTSCENEIMMOBILIZE&lt;Effect Type Cutsceneimmobilize&gt;|EFFECT_TYPE_DAMAGE_DECREASE&lt;Effect Type Damage Decrease&gt;|EFFECT_TYPE_DAMAGE_IMMUNITY_DECREASE&lt;Effect Type Damage Immunity Decrease&gt;|EFFECT_TYPE_DAMAGE_IMMUNITY_INCREASE&lt;Effect Type Damage Immunity Increase&gt;|EFFECT_TYPE_DAMAGE_INCREASE&lt;Effect Type Damage Increase&gt;|EFFECT_TYPE_DAMAGE_REDUCTION&lt;Effect Type Damage Reduction&gt;|EFFECT_TYPE_DAMAGE_RESISTANCE&lt;Effect Type Damage Resistance&gt;|EFFECT_TYPE_DARKNESS&lt;Effect Type Darkness&gt;|EFFECT_TYPE_DAZED&lt;Effect Type Dazed&gt;|EFFECT_TYPE_DEAF&lt;Effect Type Deaf&gt;|EFFECT_TYPE_DISAPPEARAPPEAR&lt;Effect Type Disappearappear&gt;|EFFECT_TYPE_DISEASE&lt;Effect Type Disease&gt;|EFFECT_TYPE_DISPELMAGICALL&lt;Effect Type Dispelmagicall&gt;|EFFECT_TYPE_DISPELMAGICBEST&lt;Effect Type Dispelmagicbest&gt;|EFFECT_TYPE_DOMINATED&lt;Effect Type Dominated&gt;|EFFECT_TYPE_ELEMENTALSHIELD&lt;Effect Type Elementalshield&gt;|EFFECT_TYPE_ENEMY_ATTACK_BONUS&lt;Effect Type Enemy Attack Bonus&gt;|EFFECT_TYPE_ENTANGLE&lt;Effect Type Entangle&gt;|EFFECT_TYPE_ETHEREAL&lt;Effect Type Ethereal&gt;|EFFECT_TYPE_FRIGHTENED&lt;Effect Type Frightened&gt;|EFFECT_TYPE_HASTE&lt;Effect Type Haste&gt;|EFFECT_TYPE_IMMUNITY&lt;Effect Type Immunity&gt;|EFFECT_TYPE_IMPROVEDINVISIBILITY&lt;Effect Type Improvedinvisibility&gt;|EFFECT_TYPE_INVALIDEFFECT&lt;Effect Type Invalideffect&gt;|EFFECT_TYPE_INVISIBILITY&lt;Effect Type Invisibility&gt;|EFFECT_TYPE_INVULNERABLE&lt;Effect Type Invulnerable&gt;|EFFECT_TYPE_MISS_CHANCE&lt;Effect Type Miss Chance&gt;|EFFECT_TYPE_MOVEMENT_SPEED_DECREASE&lt;Effect Type Movement Speed Decrease&gt;|EFFECT_TYPE_MOVEMENT_SPEED_INCREASE&lt;Effect Type Movement Speed Increase&gt;|EFFECT_TYPE_NEGATIVELEVEL&lt;Effect Type Negativelevel&gt;|EFFECT_TYPE_PARALYZE&lt;Effect Type Paralyze&gt;|EFFECT_TYPE_PETRIFY&lt;Effect Type Petrify&gt;|EFFECT_TYPE_POISON&lt;Effect Type Poison&gt;|EFFECT_TYPE_POLYMORPH&lt;Effect Type Polymorph&gt;|EFFECT_TYPE_REGENERATE&lt;Effect Type Regenerate&gt;|EFFECT_TYPE_RESURRECTION&lt;Effect Type Resurrection&gt;|EFFECT_TYPE_SANCTUARY&lt;Effect Type Sanctuary&gt;|EFFECT_TYPE_SAVING_THROW_DECREASE&lt;Effect Type Saving Throw Decrease&gt;|EFFECT_TYPE_SAVING_THROW_INCREASE&lt;Effect Type Saving Throw Increase&gt;|EFFECT_TYPE_SEEINVISIBLE&lt;Effect Type Seeinvisible&gt;|EFFECT_TYPE_SILENCE&lt;Effect Type Silence&gt;|EFFECT_TYPE_SKILL_DECREASE&lt;Effect Type Skill Decrease&gt;|EFFECT_TYPE_SKILL_INCREASE&lt;Effect Type Skill Increase&gt;|EFFECT_TYPE_SLEEP&lt;Effect Type Sleep&gt;|EFFECT_TYPE_SLOW&lt;Effect Type Slow&gt;|EFFECT_TYPE_SPELL_FAILURE&lt;Effect Type Spell Failure&gt;|EFFECT_TYPE_SPELL_IMMUNITY&lt;Effect Type Spell Immunity&gt;|EFFECT_TYPE_SPELL_RESISTANCE_DECREASE&lt;Effect Type Spell Resistance Decrease&gt;|EFFECT_TYPE_SPELL_RESISTANCE_INCREASE&lt;Effect Type Spell Resistance Increase&gt;|EFFECT_TYPE_SPELLLEVELABSORPTION&lt;Effect Type Spelllevelabsorption&gt;|EFFECT_TYPE_STUNNED&lt;Effect Type Stunned&gt;|EFFECT_TYPE_SWARM&lt;Effect Type Swarm&gt;|EFFECT_TYPE_TEMPORARY_HITPOINTS&lt;Effect Type Temporary Hitpoints&gt;|EFFECT_TYPE_TIMESTOP&lt;Effect Type Timestop&gt;|EFFECT_TYPE_TRUESEEING&lt;Effect Type Trueseeing&gt;|EFFECT_TYPE_TURN_RESISTANCE_DECREASE&lt;Effect Type Turn Resistance Decrease&gt;|EFFECT_TYPE_TURN_RESISTANCE_INCREASE&lt;Effect Type Turn Resistance Increase&gt;|EFFECT_TYPE_TURNED&lt;Effect Type Turned&gt;|EFFECT_TYPE_ULTRAVISION&lt;Effect Type Ultravision&gt;|EFFECT_TYPE_VISUALEFFECT&lt;Effect Type Visualeffect&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Feat</Name>
      <Keyword>feat</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>FEAT_AIR_DOMAIN_POWER&lt;Feat Air Domain Power&gt;|FEAT_ALERTNESS&lt;Feat Alertness&gt;|FEAT_AMBIDEXTERITY&lt;Feat Ambidexterity&gt;|FEAT_ANIMAL_COMPANION&lt;Feat Animal Companion&gt;|FEAT_ANIMAL_DOMAIN_POWER&lt;Feat Animal Domain Power&gt;|FEAT_ARMOR_PROFICIENCY_LIGHT&lt;Feat Armor Proficiency Light&gt;|FEAT_ARMOR_PROFICIENCY_MEDIUM&lt;Feat Armor Proficiency Medium&gt;|FEAT_ARMOR_PROFICIENCY_HEAVY&lt;Feat Armor Proficiency Heavy&gt;|FEAT_AURA_OF_COURAGE&lt;Feat Aura Of Courage&gt;|FEAT_BARBARIAN_ENDURANCE&lt;Feat Barbarian Endurance&gt;|FEAT_BARBARIAN_RAGE&lt;Feat Barbarian Rage&gt;|FEAT_BARD_SONGS&lt;Feat Bard Songs&gt;|FEAT_BARDIC_KNOWLEDGE&lt;Feat Bardic Knowledge&gt;|FEAT_BATTLE_TRAINING_VERSUS_GIANTS&lt;Feat Battle Training Versus Giants&gt;|FEAT_BATTLE_TRAINING_VERSUS_GOBLINS&lt;Feat Battle Training Versus Goblins&gt;|FEAT_BATTLE_TRAINING_VERSUS_ORCS&lt;Feat Battle Training Versus Orcs&gt;|FEAT_BATTLE_TRAINING_VERSUS_REPTILIANS&lt;Feat Battle Training Versus Reptilians&gt;|FEAT_CALLED_SHOT&lt;Feat Called Shot&gt;|FEAT_CLEAVE&lt;Feat Cleave&gt;|FEAT_COMBAT_CASTING&lt;Feat Combat Casting&gt;|FEAT_CRIPPLING_STRIKE&lt;Feat Crippling Strike&gt;|FEAT_DAMAGE_REDUCTION&lt;Feat Damage Reduction&gt;|FEAT_DARKVISION&lt;Feat Darkvision&gt;|FEAT_DEATH_DOMAIN_POWER&lt;Feat Death Domain Power&gt;|FEAT_DEFENSIVE_ROLL&lt;Feat Defensive Roll&gt;|FEAT_DEFLECT_ARROWS&lt;Feat Deflect Arrows&gt;|FEAT_DESTRUCTION_DOMAIN_POWER&lt;Feat Destruction Domain Power&gt;|FEAT_DIAMOND_BODY&lt;Feat Diamond Body&gt;|FEAT_DISARM&lt;Feat Disarm&gt;|FEAT_DIVINE_GRACE&lt;Feat Divine Grace&gt;|FEAT_DIVINE_HEALTH&lt;Feat Divine Health&gt;|FEAT_DODGE&lt;Feat Dodge&gt;|FEAT_EARTH_DOMAIN_POWER&lt;Feat Earth Domain Power&gt;|FEAT_ELEMENTAL_SHAPE&lt;Feat Elemental Shape&gt;|FEAT_EMPOWER_SPELL&lt;Feat Empower Spell&gt;|FEAT_EMPTY_BODY&lt;Feat Empty Body&gt;|FEAT_EVASION&lt;Feat Evasion&gt;|FEAT_EVIL_DOMAIN_POWER&lt;Feat Evil Domain Power&gt;|FEAT_EXTEND_SPELL&lt;Feat Extend Spell&gt;|FEAT_EXTRA_TURNING&lt;Feat Extra Turning&gt;|FEAT_FAVORED_ENEMY_ABERRATION&lt;Feat Favored Enemy Aberration&gt;|FEAT_FAVORED_ENEMY_ANIMAL&lt;Feat Favored Enemy Animal&gt;|FEAT_FAVORED_ENEMY_BEAST&lt;Feat Favored Enemy Beast&gt;|FEAT_FAVORED_ENEMY_CONSTRUCT&lt;Feat Favored Enemy Construct&gt;|FEAT_FAVORED_ENEMY_DRAGON&lt;Feat Favored Enemy Dragon&gt;|FEAT_FAVORED_ENEMY_DWARF&lt;Feat Favored Enemy Dwarf&gt;|FEAT_FAVORED_ENEMY_ELEMENTAL&lt;Feat Favored Enemy Elemental&gt;|FEAT_FAVORED_ENEMY_ELF&lt;Feat Favored Enemy Elf&gt;|FEAT_FAVORED_ENEMY_FEY&lt;Feat Favored Enemy Fey&gt;|FEAT_FAVORED_ENEMY_GIANT&lt;Feat Favored Enemy Giant&gt;|FEAT_FAVORED_ENEMY_GNOME&lt;Feat Favored Enemy Gnome&gt;|FEAT_FAVORED_ENEMY_GOBLINOID&lt;Feat Favored Enemy Goblinoid&gt;|FEAT_FAVORED_ENEMY_HALFELF&lt;Feat Favored Enemy Halfelf&gt;|FEAT_FAVORED_ENEMY_HALFLING&lt;Feat Favored Enemy Halfling&gt;|FEAT_FAVORED_ENEMY_HALFORC&lt;Feat Favored Enemy Halforc&gt;|FEAT_FAVORED_ENEMY_HUMAN&lt;Feat Favored Enemy Human&gt;|FEAT_FAVORED_ENEMY_MAGICAL_BEAST&lt;Feat Favored Enemy Magical Beast&gt;|FEAT_FAVORED_ENEMY_MONSTROUS&lt;Feat Favored Enemy Monstrous&gt;|FEAT_FAVORED_ENEMY_ORC&lt;Feat Favored Enemy Orc&gt;|FEAT_FAVORED_ENEMY_OUTSIDER&lt;Feat Favored Enemy Outsider&gt;|FEAT_FAVORED_ENEMY_SHAPECHANGER&lt;Feat Favored Enemy Shapechanger&gt;|FEAT_FAVORED_ENEMY_UNDEAD&lt;Feat Favored Enemy Undead&gt;|FEAT_FAVORED_ENEMY_VERMIN&lt;Feat Favored Enemy Vermin&gt;|FEAT_FEARLESS&lt;Feat Fearless&gt;|FEAT_FIRE_DOMAIN_POWER&lt;Feat Fire Domain Power&gt;|FEAT_FLURRY_OF_BLOWS&lt;Feat Flurry Of Blows&gt;|FEAT_GOOD_AIM&lt;Feat Good Aim&gt;|FEAT_GOOD_DOMAIN_POWER&lt;Feat Good Domain Power&gt;|FEAT_GREAT_FORTITUDE&lt;Feat Great Fortitude&gt;|FEAT_HARDINESS_VERSUS_ENCHANTMENTS&lt;Feat Hardiness Versus Enchantments&gt;|FEAT_HARDINESS_VERSUS_ILLUSIONS&lt;Feat Hardiness Versus Illusions&gt;|FEAT_HARDINESS_VERSUS_POISONS&lt;Feat Hardiness Versus Poisons&gt;|FEAT_HARDINESS_VERSUS_SPELLS&lt;Feat Hardiness Versus Spells&gt;|FEAT_HEALING_DOMAIN_POWER&lt;Feat Healing Domain Power&gt;|FEAT_IMMUNITY_TO_SLEEP&lt;Feat Immunity To Sleep&gt;|FEAT_IMPROVED_CRITICAL_BASTARD_SWORD&lt;Feat Improved Critical Bastard Sword&gt;|FEAT_IMPROVED_CRITICAL_BATTLE_AXE&lt;Feat Improved Critical Battle Axe&gt;|FEAT_IMPROVED_CRITICAL_CLUB&lt;Feat Improved Critical Club&gt;|FEAT_IMPROVED_CRITICAL_CREATURE&lt;Feat Improved Critical Creature&gt;|FEAT_IMPROVED_CRITICAL_DAGGER&lt;Feat Improved Critical Dagger&gt;|FEAT_IMPROVED_CRITICAL_DART&lt;Feat Improved Critical Dart&gt;|FEAT_IMPROVED_CRITICAL_DIRE_MACE&lt;Feat Improved Critical Dire Mace&gt;|FEAT_IMPROVED_CRITICAL_DOUBLE_AXE&lt;Feat Improved Critical Double Axe&gt;|FEAT_IMPROVED_CRITICAL_GREAT_AXE&lt;Feat Improved Critical Great Axe&gt;|FEAT_IMPROVED_CRITICAL_GREAT_SWORD&lt;Feat Improved Critical Great Sword&gt;|FEAT_IMPROVED_CRITICAL_HALBERD&lt;Feat Improved Critical Halberd&gt;|FEAT_IMPROVED_CRITICAL_HAND_AXE&lt;Feat Improved Critical Hand Axe&gt;|FEAT_IMPROVED_CRITICAL_HEAVY_CROSSBOW&lt;Feat Improved Critical Heavy Crossbow&gt;|FEAT_IMPROVED_CRITICAL_HEAVY_FLAIL&lt;Feat Improved Critical Heavy Flail&gt;|FEAT_IMPROVED_CRITICAL_KAMA&lt;Feat Improved Critical Kama&gt;|FEAT_IMPROVED_CRITICAL_KATANA&lt;Feat Improved Critical Katana&gt;|FEAT_IMPROVED_CRITICAL_KUKRI&lt;Feat Improved Critical Kukri&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_CROSSBOW&lt;Feat Improved Critical Light Crossbow&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_FLAIL&lt;Feat Improved Critical Light Flail&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_HAMMER&lt;Feat Improved Critical Light Hammer&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_MACE&lt;Feat Improved Critical Light Mace&gt;|FEAT_IMPROVED_CRITICAL_LONG_SWORD&lt;Feat Improved Critical Long Sword&gt;|FEAT_IMPROVED_CRITICAL_LONGBOW&lt;Feat Improved Critical Longbow&gt;|FEAT_IMPROVED_CRITICAL_MORNING_STAR&lt;Feat Improved Critical Morning Star&gt;|FEAT_IMPROVED_CRITICAL_RAPIER&lt;Feat Improved Critical Rapier&gt;|FEAT_IMPROVED_CRITICAL_SCIMITAR&lt;Feat Improved Critical Scimitar&gt;|FEAT_IMPROVED_CRITICAL_SCYTHE&lt;Feat Improved Critical Scythe&gt;|FEAT_IMPROVED_CRITICAL_SHORT_SWORD&lt;Feat Improved Critical Short Sword&gt;|FEAT_IMPROVED_CRITICAL_SHORTBOW&lt;Feat Improved Critical Shortbow&gt;|FEAT_IMPROVED_CRITICAL_SHURIKEN&lt;Feat Improved Critical Shuriken&gt;|FEAT_IMPROVED_CRITICAL_SICKLE&lt;Feat Improved Critical Sickle&gt;|FEAT_IMPROVED_CRITICAL_SLING&lt;Feat Improved Critical Sling&gt;|FEAT_IMPROVED_CRITICAL_SPEAR&lt;Feat Improved Critical Spear&gt;|FEAT_IMPROVED_CRITICAL_STAFF&lt;Feat Improved Critical Staff&gt;|FEAT_IMPROVED_CRITICAL_THROWING_AXE&lt;Feat Improved Critical Throwing Axe&gt;|FEAT_IMPROVED_CRITICAL_TWO_BLADED_SWORD&lt;Feat Improved Critical Two Bladed Sword&gt;|FEAT_IMPROVED_CRITICAL_UNARMED_STRIKE&lt;Feat Improved Critical Unarmed Strike&gt;|FEAT_IMPROVED_CRITICAL_WAR_HAMMER&lt;Feat Improved Critical War Hammer&gt;|FEAT_IMPROVED_DISARM&lt;Feat Improved Disarm&gt;|FEAT_IMPROVED_EVASION&lt;Feat Improved Evasion&gt;|FEAT_IMPROVED_KNOCKDOWN&lt;Feat Improved Knockdown&gt;|FEAT_IMPROVED_PARRY&lt;Feat Improved Parry&gt;|FEAT_IMPROVED_POWER_ATTACK&lt;Feat Improved Power Attack&gt;|FEAT_IMPROVED_TWO_WEAPON_FIGHTING&lt;Feat Improved Two Weapon Fighting&gt;|FEAT_IMPROVED_UNARMED_STRIKE&lt;Feat Improved Unarmed Strike&gt;|FEAT_IRON_WILL&lt;Feat Iron Will&gt;|FEAT_KEEN_SENSE&lt;Feat Keen Sense&gt;|FEAT_KI_STRIKE&lt;Feat Ki Strike&gt;|FEAT_KNOWLEDGE_DOMAIN_POWER&lt;Feat Knowledge Domain Power&gt;|FEAT_LAY_ON_HANDS&lt;Feat Lay On Hands&gt;|FEAT_LIGHTNING_REFLEXES&lt;Feat Lightning Reflexes&gt;|FEAT_LOWLIGHTVISION&lt;Feat Lowlightvision&gt;|FEAT_LUCK_DOMAIN_POWER&lt;Feat Luck Domain Power&gt;|FEAT_LUCKY&lt;Feat Lucky&gt;|FEAT_MAGIC_DOMAIN_POWER&lt;Feat Magic Domain Power&gt;|FEAT_MAXIMIZE_SPELL&lt;Feat Maximize Spell&gt;|FEAT_MOBILITY&lt;Feat Mobility&gt;|FEAT_MONK_AC_BONUS&lt;Feat Monk Ac Bonus&gt;|FEAT_MONK_ENDURANCE&lt;Feat Monk Endurance&gt;|FEAT_NATURE_SENSE&lt;Feat Nature Sense&gt;|FEAT_OPPORTUNIST&lt;Feat Opportunist&gt;|FEAT_PARTIAL_SKILL_AFFINITY_LISTEN&lt;Feat Partial Skill Affinity Listen&gt;|FEAT_PARTIAL_SKILL_AFFINITY_SEARCH&lt;Feat Partial Skill Affinity Search&gt;|FEAT_PARTIAL_SKILL_AFFINITY_SPOT&lt;Feat Partial Skill Affinity Spot&gt;|FEAT_PERFECT_SELF&lt;Feat Perfect Self&gt;|FEAT_PLANT_DOMAIN_POWER&lt;Feat Plant Domain Power&gt;|FEAT_POINT_BLANK_SHOT&lt;Feat Point Blank Shot&gt;|FEAT_POWER_ATTACK&lt;Feat Power Attack&gt;|FEAT_PROTECTION_DOMAIN_POWER&lt;Feat Protection Domain Power&gt;|FEAT_PURITY_OF_BODY&lt;Feat Purity Of Body&gt;|FEAT_QUICK_TO_MASTER&lt;Feat Quick To Master&gt;|FEAT_QUICKEN_SPELL&lt;Feat Quicken Spell&gt;|FEAT_QUIVERING_PALM&lt;Feat Quivering Palm&gt;|FEAT_RAPID_SHOT&lt;Feat Rapid Shot&gt;|FEAT_REMOVE_DISEASE&lt;Feat Remove Disease&gt;|FEAT_RESIST_NATURES_LURE&lt;Feat Resist Natures Lure&gt;|FEAT_SAP&lt;Feat Sap&gt;|FEAT_SHIELD_PROFICIENCY&lt;Feat Shield Proficiency&gt;|FEAT_SILENCE_SPELL&lt;Feat Silence Spell&gt;|FEAT_SKILL_AFFINITY_CONCENTRATION&lt;Feat Skill Affinity Concentration&gt;|FEAT_SKILL_AFFINITY_LISTEN&lt;Feat Skill Affinity Listen&gt;|FEAT_SKILL_AFFINITY_LORE&lt;Feat Skill Affinity Lore&gt;|FEAT_SKILL_AFFINITY_MOVE_SILENTLY&lt;Feat Skill Affinity Move Silently&gt;|FEAT_SKILL_AFFINITY_SEARCH&lt;Feat Skill Affinity Search&gt;|FEAT_SKILL_AFFINITY_SPOT&lt;Feat Skill Affinity Spot&gt;|FEAT_SKILL_FOCUS_ANIMAL_EMPATHY&lt;Feat Skill Focus Animal Empathy&gt;|FEAT_SKILL_FOCUS_CONCENTRATION&lt;Feat Skill Focus Concentration&gt;|FEAT_SKILL_FOCUS_DISABLE_TRAP&lt;Feat Skill Focus Disable Trap&gt;|FEAT_SKILL_FOCUS_DISCIPLINE&lt;Feat Skill Focus Discipline&gt;|FEAT_SKILL_FOCUS_HEAL&lt;Feat Skill Focus Heal&gt;|FEAT_SKILL_FOCUS_HIDE&lt;Feat Skill Focus Hide&gt;|FEAT_SKILL_FOCUS_LISTEN&lt;Feat Skill Focus Listen&gt;|FEAT_SKILL_FOCUS_LORE&lt;Feat Skill Focus Lore&gt;|FEAT_SKILL_FOCUS_MOVE_SILENTLY&lt;Feat Skill Focus Move Silently&gt;|FEAT_SKILL_FOCUS_PERFORM&lt;Feat Skill Focus Perform&gt;|FEAT_SKILL_FOCUS_PERSUADE&lt;Feat Skill Focus Persuade&gt;|FEAT_SKILL_FOCUS_PICK_POCKET&lt;Feat Skill Focus Pick Pocket&gt;|FEAT_SKILL_FOCUS_SEARCH&lt;Feat Skill Focus Search&gt;|FEAT_SKILL_FOCUS_SET_TRAP&lt;Feat Skill Focus Set Trap&gt;|FEAT_SKILL_FOCUS_SPELLCRAFT&lt;Feat Skill Focus Spellcraft&gt;|FEAT_SKILL_FOCUS_SPOT&lt;Feat Skill Focus Spot&gt;|FEAT_SKILL_FOCUS_TAUNT&lt;Feat Skill Focus Taunt&gt;|FEAT_SKILL_FOCUS_USE_MAGIC_DEVICE&lt;Feat Skill Focus Use Magic Device&gt;|FEAT_SKILL_MASTERY&lt;Feat Skill Mastery&gt;|FEAT_SLIPPERY_MIND&lt;Feat Slippery Mind&gt;|FEAT_SMITE_EVIL&lt;Feat Smite Evil&gt;|FEAT_SNEAK_ATTACK&lt;Feat Sneak Attack&gt;|FEAT_SPELL_FOCUS_ABJURATION&lt;Feat Spell Focus Abjuration&gt;|FEAT_SPELL_FOCUS_CONJURATION&lt;Feat Spell Focus Conjuration&gt;|FEAT_SPELL_FOCUS_DIVINATION&lt;Feat Spell Focus Divination&gt;|FEAT_SPELL_FOCUS_ENCHANTMENT&lt;Feat Spell Focus Enchantment&gt;|FEAT_SPELL_FOCUS_EVOCATION&lt;Feat Spell Focus Evocation&gt;|FEAT_SPELL_FOCUS_ILLUSION&lt;Feat Spell Focus Illusion&gt;|FEAT_SPELL_FOCUS_NECROMANCY&lt;Feat Spell Focus Necromancy&gt;|FEAT_SPELL_FOCUS_TRANSMUTATION&lt;Feat Spell Focus Transmutation&gt;|FEAT_SPELL_PENETRATION&lt;Feat Spell Penetration&gt;|FEAT_STILL_MIND&lt;Feat Still Mind&gt;|FEAT_STILL_SPELL&lt;Feat Still Spell&gt;|FEAT_STONECUNNING&lt;Feat Stonecunning&gt;|FEAT_STRENGTH_DOMAIN_POWER&lt;Feat Strength Domain Power&gt;|FEAT_STUNNING_FIST&lt;Feat Stunning Fist&gt;|FEAT_SUMMON_FAMILIAR&lt;Feat Summon Familiar&gt;|FEAT_SUN_DOMAIN_POWER&lt;Feat Sun Domain Power&gt;|FEAT_TOUGHNESS&lt;Feat Toughness&gt;|FEAT_TRACKLESS_STEP&lt;Feat Trackless Step&gt;|FEAT_TRAVEL_DOMAIN_POWER&lt;Feat Travel Domain Power&gt;|FEAT_TRICKERY_DOMAIN_POWER&lt;Feat Trickery Domain Power&gt;|FEAT_TURN_UNDEAD&lt;Feat Turn Undead&gt;|FEAT_TWO_WEAPON_FIGHTING&lt;Feat Two Weapon Fighting&gt;|FEAT_UNCANNY_DODGE_1&lt;Feat Uncanny Dodge 1&gt;|FEAT_UNCANNY_DODGE_2&lt;Feat Uncanny Dodge 2&gt;|FEAT_UNCANNY_DODGE_3&lt;Feat Uncanny Dodge 3&gt;|FEAT_UNCANNY_DODGE_4&lt;Feat Uncanny Dodge 4&gt;|FEAT_UNCANNY_DODGE_5&lt;Feat Uncanny Dodge 5&gt;|FEAT_UNCANNY_DODGE_6&lt;Feat Uncanny Dodge 6&gt;|FEAT_UNCANNY_REFLEX&lt;Feat Uncanny Reflex&gt;|FEAT_VENOM_IMMUNITY&lt;Feat Venom Immunity&gt;|FEAT_WAR_DOMAIN_POWER&lt;Feat War Domain Power&gt;|FEAT_WATER_DOMAIN_POWER&lt;Feat Water Domain Power&gt;|FEAT_WEAPON_FINESSE&lt;Feat Weapon Finesse&gt;|FEAT_WEAPON_FOCUS_BASTARD_SWORD&lt;Feat Weapon Focus Bastard Sword&gt;|FEAT_WEAPON_FOCUS_BATTLE_AXE&lt;Feat Weapon Focus Battle Axe&gt;|FEAT_WEAPON_FOCUS_CLUB&lt;Feat Weapon Focus Club&gt;|FEAT_WEAPON_FOCUS_CREATURE&lt;Feat Weapon Focus Creature&gt;|FEAT_WEAPON_FOCUS_DAGGER&lt;Feat Weapon Focus Dagger&gt;|FEAT_WEAPON_FOCUS_DART&lt;Feat Weapon Focus Dart&gt;|FEAT_WEAPON_FOCUS_DIRE_MACE&lt;Feat Weapon Focus Dire Mace&gt;|FEAT_WEAPON_FOCUS_DOUBLE_AXE&lt;Feat Weapon Focus Double Axe&gt;|FEAT_WEAPON_FOCUS_GREAT_AXE&lt;Feat Weapon Focus Great Axe&gt;|FEAT_WEAPON_FOCUS_GREAT_SWORD&lt;Feat Weapon Focus Great Sword&gt;|FEAT_WEAPON_FOCUS_HALBERD&lt;Feat Weapon Focus Halberd&gt;|FEAT_WEAPON_FOCUS_HAND_AXE&lt;Feat Weapon Focus Hand Axe&gt;|FEAT_WEAPON_FOCUS_HEAVY_CROSSBOW&lt;Feat Weapon Focus Heavy Crossbow&gt;|FEAT_WEAPON_FOCUS_HEAVY_FLAIL&lt;Feat Weapon Focus Heavy Flail&gt;|FEAT_WEAPON_FOCUS_KAMA&lt;Feat Weapon Focus Kama&gt;|FEAT_WEAPON_FOCUS_KATANA&lt;Feat Weapon Focus Katana&gt;|FEAT_WEAPON_FOCUS_KUKRI&lt;Feat Weapon Focus Kukri&gt;|FEAT_WEAPON_FOCUS_LIGHT_CROSSBOW&lt;Feat Weapon Focus Light Crossbow&gt;|FEAT_WEAPON_FOCUS_LIGHT_FLAIL&lt;Feat Weapon Focus Light Flail&gt;|FEAT_WEAPON_FOCUS_LIGHT_HAMMER&lt;Feat Weapon Focus Light Hammer&gt;|FEAT_WEAPON_FOCUS_LIGHT_MACE&lt;Feat Weapon Focus Light Mace&gt;|FEAT_WEAPON_FOCUS_LONG_SWORD&lt;Feat Weapon Focus Long Sword&gt;|FEAT_WEAPON_FOCUS_LONGBOW&lt;Feat Weapon Focus Longbow&gt;|FEAT_WEAPON_FOCUS_MORNING_STAR&lt;Feat Weapon Focus Morning Star&gt;|FEAT_WEAPON_FOCUS_RAPIER&lt;Feat Weapon Focus Rapier&gt;|FEAT_WEAPON_FOCUS_SCIMITAR&lt;Feat Weapon Focus Scimitar&gt;|FEAT_WEAPON_FOCUS_SCYTHE&lt;Feat Weapon Focus Scythe&gt;|FEAT_WEAPON_FOCUS_SHURIKEN&lt;Feat Weapon Focus Shuriken&gt;|FEAT_WEAPON_FOCUS_SICKLE&lt;Feat Weapon Focus Sickle&gt;|FEAT_WEAPON_FOCUS_SLING&lt;Feat Weapon Focus Sling&gt;|FEAT_WEAPON_FOCUS_SPEAR&lt;Feat Weapon Focus Spear&gt;|FEAT_WEAPON_FOCUS_STAFF&lt;Feat Weapon Focus Staff&gt;|FEAT_WEAPON_FOCUS_THROWING_AXE&lt;Feat Weapon Focus Throwing Axe&gt;|FEAT_WEAPON_FOCUS_TWO_BLADED_SWORD&lt;Feat Weapon Focus Two Bladed Sword&gt;|FEAT_WEAPON_FOCUS_UNARMED_STRIKE&lt;Feat Weapon Focus Unarmed Strike&gt;|FEAT_WEAPON_FOCUS_WAR_HAMMER&lt;Feat Weapon Focus War Hammer&gt;|FEAT_WEAPON_PROFICIENCY_CREATURE&lt;Feat Weapon Proficiency Creature&gt;|FEAT_WEAPON_PROFICIENCY_DRUID&lt;Feat Weapon Proficiency Druid&gt;|FEAT_WEAPON_PROFICIENCY_EXOTIC&lt;Feat Weapon Proficiency Exotic&gt;|FEAT_WEAPON_PROFICIENCY_MARTIAL&lt;Feat Weapon Proficiency Martial&gt;|FEAT_WEAPON_PROFICIENCY_MONK&lt;Feat Weapon Proficiency Monk&gt;|FEAT_WEAPON_PROFICIENCY_ROGUE&lt;Feat Weapon Proficiency Rogue&gt;|FEAT_WEAPON_PROFICIENCY_SIMPLE&lt;Feat Weapon Proficiency Simple&gt;|FEAT_WEAPON_PROFICIENCY_WIZARD&lt;Feat Weapon Proficiency Wizard&gt;|FEAT_WEAPON_SPECIALIZATION_BASTARD_SWORD&lt;Feat Weapon Specialization Bastard Sword&gt;|FEAT_WEAPON_SPECIALIZATION_BATTLE_AXE&lt;Feat Weapon Specialization Battle Axe&gt;|FEAT_WEAPON_SPECIALIZATION_CLUB&lt;Feat Weapon Specialization Club&gt;|FEAT_WEAPON_SPECIALIZATION_CREATURE&lt;Feat Weapon Specialization Creature&gt;|FEAT_WEAPON_SPECIALIZATION_DAGGER&lt;Feat Weapon Specialization Dagger&gt;|FEAT_WEAPON_SPECIALIZATION_DART&lt;Feat Weapon Specialization Dart&gt;|FEAT_WEAPON_SPECIALIZATION_DIRE_MACE&lt;Feat Weapon Specialization Dire Mace&gt;|FEAT_WEAPON_SPECIALIZATION_DOUBLE_AXE&lt;Feat Weapon Specialization Double Axe&gt;|FEAT_WEAPON_SPECIALIZATION_GREAT_AXE&lt;Feat Weapon Specialization Great Axe&gt;|FEAT_WEAPON_SPECIALIZATION_GREAT_SWORD&lt;Feat Weapon Specialization Great Sword&gt;|FEAT_WEAPON_SPECIALIZATION_HALBERD&lt;Feat Weapon Specialization Halberd&gt;|FEAT_WEAPON_SPECIALIZATION_HAND_AXE&lt;Feat Weapon Specialization Hand Axe&gt;|FEAT_WEAPON_SPECIALIZATION_HEAVY_CROSSBOW&lt;Feat Weapon Specialization Heavy Crossbow&gt;|FEAT_WEAPON_SPECIALIZATION_HEAVY_FLAIL&lt;Feat Weapon Specialization Heavy Flail&gt;|FEAT_WEAPON_SPECIALIZATION_KAMA&lt;Feat Weapon Specialization Kama&gt;|FEAT_WEAPON_SPECIALIZATION_KATANA&lt;Feat Weapon Specialization Katana&gt;|FEAT_WEAPON_SPECIALIZATION_KUKRI&lt;Feat Weapon Specialization Kukri&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_CROSSBOW&lt;Feat Weapon Specialization Light Crossbow&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_FLAIL&lt;Feat Weapon Specialization Light Flail&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_HAMMER&lt;Feat Weapon Specialization Light Hammer&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_MACE&lt;Feat Weapon Specialization Light Mace&gt;|FEAT_WEAPON_SPECIALIZATION_LONG_SWORD&lt;Feat Weapon Specialization Long Sword&gt;|FEAT_WEAPON_SPECIALIZATION_LONGBOW&lt;Feat Weapon Specialization Longbow&gt;|FEAT_WEAPON_SPECIALIZATION_MORNING_STAR&lt;Feat Weapon Specialization Morning Star&gt;|FEAT_WEAPON_SPECIALIZATION_RAPIER&lt;Feat Weapon Specialization Rapier&gt;|FEAT_WEAPON_SPECIALIZATION_SCIMITAR&lt;Feat Weapon Specialization Scimitar&gt;|FEAT_WEAPON_SPECIALIZATION_SCYTHE&lt;Feat Weapon Specialization Scythe&gt;|FEAT_WEAPON_SPECIALIZATION_SHORT_SWORD&lt;Feat Weapon Specialization Short Sword&gt;|FEAT_WEAPON_SPECIALIZATION_SHORTBOW&lt;Feat Weapon Specialization Shortbow&gt;|FEAT_WEAPON_SPECIALIZATION_SHURIKEN&lt;Feat Weapon Specialization Shuriken&gt;|FEAT_WEAPON_SPECIALIZATION_SICKLE&lt;Feat Weapon Specialization Sickle&gt;|FEAT_WEAPON_SPECIALIZATION_SLING&lt;Feat Weapon Specialization Sling&gt;|FEAT_WEAPON_SPECIALIZATION_SPEAR&lt;Feat Weapon Specialization Spear&gt;|FEAT_WEAPON_SPECIALIZATION_STAFF&lt;Feat Weapon Specialization Staff&gt;|FEAT_WEAPON_SPECIALIZATION_THROWING_AXE&lt;Feat Weapon Specialization Throwing Axe&gt;|FEAT_WEAPON_SPECIALIZATION_TWO_BLADED_SWORD&lt;Feat Weapon Specialization Two Bladed Sword&gt;|FEAT_WEAPON_SPECIALIZATION_UNARMED_STRIKE&lt;Feat Weapon Specialization Unarmed Strike&gt;|FEAT_WEAPON_SPECIALIZATION_WAR_HAMMER&lt;Feat Weapon Specialization War Hammer&gt;|FEAT_WHOLENESS_OF_BODY&lt;Feat Wholeness Of Body&gt;|FEAT_WILD_SHAPE&lt;Feat Wild Shape&gt;|FEAT_WOODLAND_STRIDE&lt;Feat Woodland Stride&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>InventorySlot</Name>
      <Keyword>inventory_slot</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>INVENTORY_SLOT_ARMS&lt;Inventory Slot Arms&gt;|INVENTORY_SLOT_ARROWS&lt;Inventory Slot Arrows&gt;|INVENTORY_SLOT_BELT&lt;Inventory Slot Belt&gt;|INVENTORY_SLOT_BOLTS&lt;Inventory Slot Bolts&gt;|INVENTORY_SLOT_BOOTS&lt;Inventory Slot Boots&gt;|INVENTORY_SLOT_BULLETS&lt;Inventory Slot Bullets&gt;|INVENTORY_SLOT_CHEST&lt;Inventory Slot Chest&gt;|INVENTORY_SLOT_CLOAK&lt;Inventory Slot Cloak&gt;|INVENTORY_SLOT_CARMOUR&lt;Inventory Slot Carmour&gt;|INVENTORY_SLOT_CWEAPON_L&lt;Inventory Slot Cweapon L&gt;|INVENTORY_SLOT_CWEAPON_R&lt;Inventory Slot Cweapon R&gt;|INVENTORY_SLOT_CWEAPON_B&lt;Inventory Slot Cweapon B&gt;|INVENTORY_SLOT_HEAD&lt;Inventory Slot Head&gt;|INVENTORY_SLOT_NECK&lt;Inventory Slot Neck&gt;|INVENTORY_SLOT_LEFTHAND&lt;Inventory Slot Lefthand&gt;|INVENTORY_SLOT_RIGHTHAND&lt;Inventory Slot Righthand&gt;|INVENTORY_SLOT_LEFTRING&lt;Inventory Slot Leftring&gt;|INVENTORY_SLOT_RIGHTRING&lt;Inventory Slot Rightring&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>ObjectType</Name>
      <Keyword>object_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>OBJECT_TYPE_ALL&lt;Object Type All&gt;|OBJECT_TYPE_AREA_OF_EFFECT&lt;Object Type Area Of Effect&gt;|OBJECT_TYPE_CREATURE&lt;Object Type Creature&gt;|OBJECT_TYPE_DOOR&lt;Object Type Door&gt;|OBJECT_TYPE_ENCOUNTER&lt;Object Type Encounter&gt;|OBJECT_TYPE_INVALID&lt;Object Type Invalid&gt;|OBJECT_TYPE_ITEM&lt;Object Type Item&gt;|OBJECT_TYPE_PLACEABLE&lt;Object Type Placeable&gt;|OBJECT_TYPE_STORE&lt;Object Type Store&gt;|OBJECT_TYPE_TRIGGER&lt;Object Type Trigger&gt;|OBJECT_TYPE_WAYPOINT&lt;Object Type Waypoint&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>RestStatus</Name>
      <Keyword>rest_status</Keyword>
       <CodeSymbol>int</CodeSymbol>
      <Enum>REST_EVENTTYPE_REST_CANCELLED&lt;Rest Eventtype Rest Cancelled&gt;|REST_EVENTTYPE_REST_FINISHED&lt;Rest Eventtype Rest Finished&gt;|REST_EVENTTYPE_REST_INVALID&lt;Rest Eventtype Rest Invalid&gt;|REST_EVENTTYPE_REST_STARTED&lt;Rest Eventtype Rest Started&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>SkyBox</Name>
      <Keyword>sky_box</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>SKYBOX_DESERT_CLEAR&lt;Skybox Desert Clear&gt;|SKYBOX_GRASS_CLEAR&lt;Skybox Grass Clear&gt;|SKYBOX_GRASS_STORM&lt;Skybox Grass Storm&gt;|SKYBOX_ICY&lt;Skybox Icy&gt;|SKYBOX_NONE&lt;Skybox None&gt;|SKYBOX_WINTER_CLEAR&lt;Skybox Winter Clear&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Speak</Name>
      <Keyword>speak</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>TALKVOLUME_TALK&lt;Talkvolume Talk&gt;|TALKVOLUME_SHOUT&lt;Talkvolume Shout&gt;|TALKVOLUME_WHISPER&lt;Talkvolume Whisper&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>VoiceChat</Name>
      <Keyword>voice_chat</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>VOICE_CHAT_ATTACK&lt;Voice Chat Attack&gt;|VOICE_CHAT_BADIDEA&lt;Voice Chat Badidea&gt;|VOICE_CHAT_BATTLECRY1&lt;Voice Chat Battlecry1&gt;|VOICE_CHAT_BATTLECRY2&lt;Voice Chat Battlecry2&gt;|VOICE_CHAT_BATTLECRY3&lt;Voice Chat Battlecry3&gt;|VOICE_CHAT_BORED&lt;Voice Chat Bored&gt;|VOICE_CHAT_CANDO&lt;Voice Chat Cando&gt;|VOICE_CHAT_CANTDO&lt;Voice Chat Cantdo&gt;|VOICE_CHAT_CHEER&lt;Voice Chat Cheer&gt;|VOICE_CHAT_CUSS&lt;Voice Chat Cuss&gt;|VOICE_CHAT_DEATH&lt;Voice Chat Death&gt;|VOICE_CHAT_ENCUMBERED&lt;Voice Chat Encumbered&gt;|VOICE_CHAT_ENEMIES&lt;Voice Chat Enemies&gt;|VOICE_CHAT_FLEE&lt;Voice Chat Flee&gt;|VOICE_CHAT_FOLLOWME&lt;Voice Chat Followme&gt;|VOICE_CHAT_GATTACK1&lt;Voice Chat Gattack1&gt;|VOICE_CHAT_GATTACK2&lt;Voice Chat Gattack2&gt;|VOICE_CHAT_GATTACK3&lt;Voice Chat Gattack3&gt;|VOICE_CHAT_GOODBYE&lt;Voice Chat Goodbye&gt;|VOICE_CHAT_GROUP&lt;Voice Chat Group&gt;|VOICE_CHAT_GUARDME&lt;Voice Chat Guardme&gt;|VOICE_CHAT_HEALME&lt;Voice Chat Healme&gt;|VOICE_CHAT_HELLO&lt;Voice Chat Hello&gt;|VOICE_CHAT_HELP&lt;Voice Chat Help&gt;|VOICE_CHAT_HIDE&lt;Voice Chat Hide&gt;|VOICE_CHAT_HOLD&lt;Voice Chat Hold&gt;|VOICE_CHAT_LAUGH&lt;Voice Chat Laugh&gt;|VOICE_CHAT_LOOKHERE&lt;Voice Chat Lookhere&gt;|VOICE_CHAT_MOVEOVER&lt;Voice Chat Moveover&gt;|VOICE_CHAT_NEARDEATH&lt;Voice Chat Neardeath&gt;|VOICE_CHAT_NO&lt;Voice Chat No&gt;|VOICE_CHAT_PAIN1&lt;Voice Chat Pain1&gt;|VOICE_CHAT_PAIN2&lt;Voice Chat Pain2&gt;|VOICE_CHAT_PAIN3&lt;Voice Chat Pain3&gt;|VOICE_CHAT_PICKLOCK&lt;Voice Chat Picklock&gt;|VOICE_CHAT_POISONED&lt;Voice Chat Poisoned&gt;|VOICE_CHAT_REST&lt;Voice Chat Rest&gt;|VOICE_CHAT_SEARCH&lt;Voice Chat Search&gt;|VOICE_CHAT_SELECTED&lt;Voice Chat Selected&gt;|VOICE_CHAT_SPELLFAILED&lt;Voice Chat Spellfailed&gt;|VOICE_CHAT_STOP&lt;Voice Chat Stop&gt;|VOICE_CHAT_TALKTOME&lt;Voice Chat Talktome&gt;|VOICE_CHAT_TASKCOMPLETE&lt;Voice Chat Taskcomplete&gt;|VOICE_CHAT_TAUNT&lt;Voice Chat Taunt&gt;|VOICE_CHAT_THANKS&lt;Voice Chat Thanks&gt;|VOICE_CHAT_THREATEN&lt;Voice Chat Threaten&gt;|VOICE_CHAT_WEAPONSUCKS&lt;Voice Chat Weaponsucks&gt;|VOICE_CHAT_YES&lt;Voice Chat Yes&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
	<Type>
      <Name>Weather</Name>
      <Keyword>weather</Keyword>
      <CodeSymbol>int</CodeSymbol>
	  <Enum>WEATHER_CLEAR&lt;Weather Clear&gt;|WEATHER_RAIN&lt;Weather Rain&gt;|WEATHER_SNOW&lt;Weather Snow&gt;|WEATHER_USE_AREA_SETTINGS&lt;Weather Use Area Settings&gt;</Enum>
	  <GUI>JComboBox</GUI>
    </Type>
     <Type>
      <Name>WalkSpeed</Name>
      <Keyword>walk_speed</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Walk&gt;|TRUE&lt;Run&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<!-- END OF ENUMS -->
    <Type>
      <Name>Trigger</Name>
      <Keyword>trigger</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnClick</Slot>
        <Slot>OnDisarm</Slot>
        <Slot>OnTrapTriggered</Slot>
        <Slot>ScriptHeartbeat</Slot>
        <Slot>ScriptOnEnter</Slot>
        <Slot>ScriptOnExit</Slot>
        <Slot>ScriptUserDefine</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Story</Name>
      <Keyword>module</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>Mod_OnHeartbeat</Slot>
        <Slot>Mod_OnModLoad</Slot>
        <Slot>Mod_OnClientEntr</Slot>
        <Slot>Mod_OnClientLeav</Slot>
        <Slot>Mod_OnUsrDefined</Slot>
        <Slot>Mod_OnUnAqreItem</Slot>
        <Slot>Mod_OnPlrDeath</Slot>
        <Slot>Mod_OnPlrDying</Slot>
        <Slot>Mod_OnPlrLvlUp</Slot>
        <Slot>Mod_OnSpawnBtnDn</Slot>
        <Slot>Mod_OnPlrRest</Slot>
        <Slot>Mod_OnCutsnAbort</Slot>
        <Slot>Mod_OnActvtItem</Slot>
        <Slot>Mod_OnAcquirItem</Slot>
        <Slot>Mod_OnPlrEqItm</Slot>
        <Slot>Mod_OnPlrUnEqItm</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Creature</Name>
      <Keyword>creature</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>ScriptAttacked</Slot>
        <Slot>ScriptDamaged</Slot>
        <Slot>ScriptDeath</Slot>
        <Slot>ScriptDialogue</Slot>
        <Slot>ScriptDisturbed</Slot>
        <Slot>ScriptEndRound</Slot>
        <Slot>ScriptHeartbeat</Slot>
        <Slot>ScriptOnBlocked</Slot>
        <Slot>ScriptOnNotice</Slot>
        <Slot>ScriptRested</Slot>
        <Slot>ScriptSpawn</Slot>
        <Slot>ScriptSpellAt</Slot>
        <Slot>ScriptUserDefine</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Number</Name>
      <Keyword>int</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <LegalValues>[-]?[0-9]+</LegalValues>
      <GUI>JSpinner</GUI>
    </Type>
    <Type>
      <Name>AttackType</Name>
      <Keyword>attack_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SPECIAL_ATTACK_INVALID&lt;Invalid&gt;|SPECIAL_ATTACK_CALLED_SHOT_LEG&lt;Called Shot Leg&gt;|SPECIAL_ATTACK_CALLED_SHOT_ARM&lt;Called Shot Arm&gt;|SPECIAL_ATTACK_SAP&lt;Sap&gt;|SPECIAL_ATTACK_DISARM&lt;Disarm&gt;|SPECIAL_ATTACK_IMPROVED_DISARM&lt;Improved Disarm&gt;|SPECIAL_ATTACK_KNOCKDOWN&lt;Knockdown&gt;|SPECIAL_ATTACK_IMPROVED_KNOCKDOWN&lt;Improved Knockdown&gt;|SPECIAL_ATTACK_STUNNING_FIST&lt;Stunning Fist&gt;|SPECIAL_ATTACK_FLURRY_OF_BLOWS&lt;Flurry Of Blows&gt;|SPECIAL_ATTACK_RAPID_SHOT&lt;Rapid Shot&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
    <Type>
      <Name>Void</Name>
      <Keyword>void</Keyword>
      <CodeSymbol>void</CodeSymbol>
    </Type>
    <Type>
      <Name>Placeable</Name>
      <Keyword>placeable</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnClosed</Slot>
        <Slot>OnDamaged</Slot>
        <Slot>OnDeath</Slot>
        <Slot>OnDisarm</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnLock</Slot>
        <Slot>OnMeleeAttacked</Slot>
        <Slot>OnOpen</Slot>
        <Slot>OnSpellCastAt</Slot>
        <Slot>OnTrapTriggered</Slot>
        <Slot>OnUnlock</Slot>
        <Slot>OnUserDefined</Slot>
        <Slot>OnInvDisturbed</Slot>
        <Slot>OnUsed</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>TalkVolume</Name>
      <Keyword>talk_volume</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TALKVOLUME_TALK&lt;Talk&gt;|TALKVOLUME_WHISPER&lt;Whisper&gt;|TALKVOLUME_SHOUT&lt;Shout&gt;|TALKVOLUME_SILENT_TALK&lt;Silent Talk&gt;|TALKVOLUME_SILENT_SHOUT&lt;Silent Shout&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
    <Type>
      <Name>Effect</Name>
      <Keyword>effect</Keyword>
      <CodeSymbol>effect</CodeSymbol>
    </Type>
    <Type>
      <Name>Sound</Name>
      <Keyword>sound</Keyword>
      <CodeSymbol>object</CodeSymbol>
    </Type>
    <Type>
      <Name>Item</Name>
      <Keyword>item</Keyword>
      <CodeSymbol>object</CodeSymbol>
	  <!-- TEST -->
	<!-- TEST -->
    </Type>
    
	<Type>
      <Name>Text</Name>
      <Keyword>string</Keyword>
      <CodeSymbol>string</CodeSymbol>
      <Format>
        <Literal>&quot;</Literal>
        <Fragment data="value"/>
        <Literal>&quot;</Literal>
      </Format>
      <LegalValues>[.\n]*</LegalValues>
      <GUI>JTextField</GUI>
    </Type>
    <Type>
      <Name>RestType</Name>
      <Keyword>rest_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>REST_EVENTTYPE_REST_INVALID&lt;Invalid&gt;|REST_EVENTTYPE_REST_STARTED&lt;Started&gt;|REST_EVENTTYPE_REST_FINISHED&lt;Finished&gt;|REST_EVENTTYPE_REST_CANCELLED&lt;Cancelled&gt;</Enum>
      <GUI>JComboBox</GUI>
    </Type>
	<Type>
		<Name>Quest Point</Name>
		<Keyword>questPoint</Keyword>
		<CodeSymbol>string</CodeSymbol>
		<Format>
			<Literal>&quot;</Literal>
			<Fragment data="value"/>
			<Literal>&quot;</Literal>
		</Format>
	</Type>
  </Types>
  <Slots defaultFormat="file">
    <Slot>
      <Name>OnDisturbed</Name>
      <Keyword>OnInvDisturbed</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Disturber</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Disturber</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastDisturbed();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Disturbance Type</Name>
          <Labels/>
          <Types>
            <Type>disturbance_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Disturbance Type</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>disturbance_type</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetInventoryDisturbType();</Literal>
			              </Line>
		              </Code>
					<Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Disturbed Item</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Disturbed Item</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetInventoryDisturbItem();</Literal>
			              </Line>
		              </Code>
		         	  <Includes />     
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnEnter</Name>
      <Keyword>OnEnter</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Entering Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Entering Object</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetEnteringObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUnlock</Name>
      <Keyword>OnUnlock</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Unlocker</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Unlocker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnUnlock">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastUnlocked();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnAreaTransitionClick</Name>
      <Keyword>OnAreaTransitionClick</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Clicking Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Clicker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnAreaTransitionClick">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetClickingObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />		              
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Transition Target</Name>
          <Labels/>
          <Types>
            <Type>door</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Transition Target</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>door</Type>
               			<Type>trigger</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>object</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>door</Type>
		                    <Type>trigger</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>door</Type>
		                      <Type>trigger</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			              	<Literal>return GetTransitionTarget(</Literal>
			              	<Scope data="argument" ref="object">
								<Fragment data="name"/>
							</Scope>
							<Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnBlocked</Name>
      <Keyword>ScriptOnBlocked</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Blocker</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>The Blocker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>door</Type>
               			<Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetBlockingDoor();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Subject</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Get Object Self</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		               <Type>journal</Type>
		               <Type>creature</Type>
		               <Type>placeable</Type>
		               <Type>door</Type>
		               <Type>trigger</Type>
		               <Type>store</Type>
		               <Type>item</Type>
		               <Type>module</Type>
		               <Type>area</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return OBJECT_SELF;</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerDying</Name>
      <Keyword>Mod_OnPlrDying</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Dying Player</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Dying Player</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="Mod_OnPlrDying">
		              <Types>
		               <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastPlayerDying();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnSpellCastAt</Name>
      <Keyword>ScriptSpellAt</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Spell</Name>
          <Labels/>
          <Types>
            <Type>spell</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Spell Cast</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		               <Type>spell</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastSpell();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Spell Caster</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Spell Caster</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
                		<Type>placeable</Type>
                		<Type>door</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastSpellCaster();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Spell Harmful</Name>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Spell Harmful</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>question</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastSpellHarmful();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot> 
      <Name>OnModuleLoad</Name>
      <Keyword>Mod_OnModLoad</Keyword>
      <Parameters />
      <Implicits /> 
    </Slot>
    <Slot>
      <Name>OnClick</Name>
      <Keyword>OnClick</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Clicking Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Clicker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnClick">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetClickingObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerUnEquipItem</Name>
      <Keyword>Mod_OnPlrUnEqItm</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Unequipped Item</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Unequipped Item</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="Mod_OnPlrUnEqItm">
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetPCItemLastUnequipped();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Unequipper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Unequipper</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="Mod_OnPlrUnEqItm">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetPCItemLastUnequippedBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Possessor</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Possessor</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>item</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>item</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>item</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			              	<Literal>return GetItemPossessor(</Literal>
			              	<Scope data="argument" ref="item">
								<Fragment data="name"/>
							</Scope>
			              	<Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnClientEnter</Name>
      <Keyword>Mod_OnClientEntr</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Entering Client</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Entering Object</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="Mod_OnClientEntr">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters />
		              <Code>
			              <Line>
			              	<Literal>return GetEnteringObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnHeartbeat</Name>
      <Keyword>OnHeartbeat</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>the Subject</Name>
          <Labels/>
          <Types>
            <Type>module</Type>
            <Type>area</Type>
            <Type>creature</Type>
            <Type>encounter</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt" />
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnTrapTriggered</Name>
      <Keyword>OnTrapTriggered</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Entering Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Entering Creature</Name>
              <Labels/>
              <Children/> 
              <CodeBlocks>
	              <CodeBlock slot="OnTrapTriggered">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetEnteringObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>the Subject</Name>
          <Labels/>
          <Types>
            <Type>trigger</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt" />
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnAcquireItem</Name>
      <Keyword>Mod_OnAcquirItem</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Acquired Item</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Acquired Item</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="Mod_OnAcquirItem">
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetModuleItemAcquired();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Object Item was Acquired From</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>module</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Object Item was Acquired From</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		                <Type>placeable</Type>
		                <Type>module</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetModuleItemAcquiredFrom();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Acquirer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Acquirer</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		                <Type>placeable</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetModuleItemAcquiredBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Stack Size</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Stack Size</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetModuleItemAcquiredStackSize();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDeath</Name>
      <Keyword>OnDeath</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Killer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Killer</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnDeath">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastKiller();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDamaged</Name>
      <Keyword>OnDamaged</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Damager</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>door</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Damager</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnDamaged">
		              <Types>
		                <Type>creature</Type>
		                <Type>door</Type>
		                <Type>placeable</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastDamager();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Damage Amount</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Damage Amount</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnDamaged">
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetTotalDamageDealt();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Current Hitpoints</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Current Hitpoints</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnDamaged"> 
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetCurrentHitPoints(OBJECT_SELF);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Maximum Hitpoints</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Max Hitpoints for Object &lt;object&gt;</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="OnDamaged"> 
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Object</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                    <Type>placeable</Type>
		                    <Type>door</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                      <Type>placeable</Type>
		                      <Type>door</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetMaxHitPoints(</Literal>
			              	<Scope data="argument" ref="Object">
								<Fragment data="name"/>
							</Scope>
			              	<Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnConversation</Name>
      <Keyword>ScriptDialogue</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Speaker</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Speaker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock> 
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastSpeaker();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnHeartbeat</Name>
      <Keyword>Mod_OnHeartbeat</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>the Subject</Name>
          <Labels/>
          <Types>
            <Type>module</Type>
            <Type>area</Type>
            <Type>creature</Type>
            <Type>encounter</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt" />
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnExit</Name>
      <Keyword>OnExit</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Exiting Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Exiting Object</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetExitingObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnSpawn</Name>
      <Keyword>ScriptSpawn</Keyword>
      <Parameters />
      <Implicits />
    </Slot>
    <Slot>
      <Name>OnClientLeave</Name>
      <Keyword>Mod_OnClientLeav</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Exiting Client</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Exiting Object</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetExitingObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnFailToOpen</Name>
      <Keyword>OnFailToOpen</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Clicker</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Clicker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetClickingObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDisarm</Name>
      <Keyword>OnDisarm</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Disarmer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Disarmer</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastDisarmed();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnEnter</Name>
      <Keyword>OnEntered</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Entering Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Entering Object</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetEnteringObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnCutsceneAbort</Name>
      <Keyword>Mod_OnCutsnAbort</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Cutscene Aborter</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Cutscene Aborter</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastPCToCancelCutscene();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnSpellCastAt</Name>
      <Keyword>OnSpellCastAt</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Spell</Name>
          <Labels/>
          <Types>
            <Type>spell</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Spell Cast</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>spell</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastSpell();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Spell Caster</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Spell Caster</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		                <Type>placeable</Type>
		                <Type>door</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastSpellCaster();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Spell Harmful</Name>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Spell Harmful</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>question</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastSpellHarmful();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPerception</Name>
      <Keyword>ScriptOnNotice</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Perceived</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Perceived</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastPerceived();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Last Perceived Heard</Name>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Was Last Perceived Heard</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>question</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastPerceptionHeard();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Last Perceived Inaudible</Name>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Was Last Perceived Inaudible</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>question</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastPerceptionInaudible();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Last Perceived Seen</Name>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Was Last Perceived Seen</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>question</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastPerceptionSeen();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Last Perceived Vanished</Name>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Has Last Perceived Vanished</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>question</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			              	<Literal>return GetLastPerceptionVanished();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>the Subject</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt" />
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnOpenStore</Name>
      <Keyword>OnOpenStore</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Opener</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Opener</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastOpenedBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerRespawn</Name>
      <Keyword>Mod_OnSpawnBtnDn</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Respawning Player</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Respawning Player</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastRespawnButtonPresser();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerEquipItem</Name>
      <Keyword>Mod_OnPlrEqItm</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Item Equipped</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Equipped Item</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetPCItemLastEquipped();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Equipper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Equipper</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetPCItemLastEquippedBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUserDefined</Name>
      <Keyword>OnUserDefined</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Event Number</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Event Number</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetUserDefinedEventNumber();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerLevelUp</Name>
      <Keyword>Mod_OnPlrLvlUp</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Levelling PC</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Levelling PC</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetPCLevellingUp();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerRest</Name>
      <Keyword>Mod_OnPlrRest</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last PC Rested</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last PC Rested</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastPCRested();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Rest Type</Name>
          <Labels/>
          <Types>
            <Type>rest_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Rest Type</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>rest_type</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastRestEventType();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnActivateItem</Name>
      <Keyword>Mod_OnActvtItem</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Activated Item</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Activated Item</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetItemActivated();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Activated Item Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Target</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
               			<Type>placeable</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetItemActivatedTarget();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Activated Item Target Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Target Location</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>location</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetItemActivatedTargetLocation();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Activator</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Activator</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetItemActivator();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDisturbed</Name>
      <Keyword>ScriptDisturbed</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Disturber</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Disturber</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock slot="ScriptDisturbed">
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastDisturbed();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Disturbance Type</Name>
          <Labels/>
          <Types>
            <Type>disturbance_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Disturbance Type</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>disturbance_type</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetInventoryDisturbType();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Disturbed Item</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Disturbed Item</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetInventoryDisturbItem();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnCombatRoundEnd</Name>
      <Keyword>ScriptEndRound</Keyword>
      <Parameters />
      <Implicits />
    </Slot>
    <Slot>
      <Name>OnLock</Name>
      <Keyword>OnLock</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Locker</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Locker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastLocked();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Lock DC</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Lock DC</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLockLockDC();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnStoreClosed</Name>
      <Keyword>OnStoreClosed</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Closed By</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Closer</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastClosedBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUsed</Name>
      <Keyword>OnUsed</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last User</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last User</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastUsedBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDamaged</Name>
      <Keyword>ScriptDamaged</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Damager</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>trigger</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Damager</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		                <Type>placeable</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastDamager();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Damage Amount</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Damage Amount</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetTotalDamageDealt();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Damage Amount of Type</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Damage Amount of Type &lt;Damage Type&gt;</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Damage Type</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>damage_type</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>damage_type</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetDamageDealtByType(</Literal>
			              	<Scope data="argument" ref="Damage Type">
								<Fragment data="name"/>
							</Scope>
			              	<Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnExhausted</Name>
      <Keyword>OnExhausted</Keyword>
      <Parameters />
      <Implicits />
    </Slot>
    <Slot>
      <Name>OnEnter</Name>
      <Keyword>ScriptOnEnter</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Entering Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Entering Creature</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetEnteringObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnClose</Name>
      <Keyword>OnClosed</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Closer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Closer</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastClosedBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPhysicalAttacked</Name>
      <Keyword>ScriptAttacked</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Attacker</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Attacker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters />
		              <Code>
			              <Line>
			             	 <Literal>return GetLastAttacker();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Damager</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Damager</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		                <Type>placeable</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastDamager();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Weapon Used</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Weapon Used</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Attacker</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastWeaponUsed(</Literal><Scope data="argument" ref="Attacker">
								<Fragment data="name"/>
							</Scope><Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Attack Mode</Name>
          <Labels/>
          <Types>
            <Type>combat_mode</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Attack Mode</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>combat_mode</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Attacker</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastAttackMode(</Literal><Scope data="argument" ref="Attacker">
								<Fragment data="name"/>
							</Scope><Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Attack Type</Name>
          <Labels/>
          <Types>
            <Type>attack_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Attack Type</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>attack_type</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Attacker</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastAttackType(</Literal><Scope data="argument" ref="Attacker">
								<Fragment data="name"/>
							</Scope><Literal>);</Literal>
			              </Line>
		              </Code>
					  <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUnAqcuireItem</Name>
      <Keyword>Mod_OnUnAqreItem</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Item Lost</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Item Lost</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetModuleItemLost();</Literal>
			              </Line>
		               </Code>
					  <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item Lost By</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Item Lost By</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetModuleItemLostBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerDeath</Name>
      <Keyword>Mod_OnPlrDeath</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Dead Player</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Dead Player</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastPlayerDied();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Last Hostile Actor</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Hostile Actor</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Victim</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastHostileActor(</Literal>
			              	<Scope data="argument" ref="Victim">
								<Fragment data="name"/>
							</Scope>
							<Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnHeartbeat</Name>
      <Keyword>ScriptHeartbeat</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>the Subject</Name>
          <Labels/>
          <Types>
            <Type>module</Type>
            <Type>area</Type>
            <Type>creature</Type>
            <Type>encounter</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt" />
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPhysicalAttacked</Name>
      <Keyword>OnMeleeAttacked</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Attacker</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Attacker</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Attackee</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                    <Type>door</Type>
		                    <Type>placeable</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                      <Type>door</Type>
		                      <Type>placeable</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastAttacker(</Literal>
			              	<Scope data="argument" ref="Attackee">
								<Fragment data="name"/>
							</Scope>
			              	<Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Damager</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Damager</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		                <Type>placeable</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastDamager();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Weapon Used</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
           <ScriptIt visible="false">
              <Name>Weapon Used</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>item</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Attacker</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastWeaponUsed(</Literal><Scope data="argument" ref="Attacker">
								<Fragment data="name"/>
							</Scope><Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Attack Mode</Name>
          <Labels/>
          <Types>
            <Type>combat_mode</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Attack Mode</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>combat_mode</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Attacker</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastAttackMode(</Literal><Scope data="argument" ref="Attacker">
								<Fragment data="name"/>
							</Scope><Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Attack Type</Name>
          <Labels/>
          <Types>
            <Type>attack_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Attack Type</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>attack_type</Type>
		              </Types>
		              <Parameters>
		                <KnowIt visible="true">
		                  <Name>Attacker</Name>
		                  <Labels/>
		                  <Types>
		                    <Type>creature</Type>
		                  </Types>
		                  <Binding flavour="runTime">
		                    <Types>
		                      <Type>creature</Type>
		                    </Types>
		                  </Binding>
		                </KnowIt>
		              </Parameters>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastAttackType(</Literal><Scope data="argument" ref="Attacker">
								<Fragment data="name"/>
							</Scope><Literal>);</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDeath</Name>
      <Keyword>ScriptDeath</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>The Killer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
            <Type>door</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Killer</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastKiller();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUserDefined</Name>
      <Keyword>Mod_OnUsrDefined</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Event Number</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Event Number</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetUserDefinedEventNumber();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnExit</Name>
      <Keyword>ScriptOnExit</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Exiting Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Exiting Object</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetExitingObject();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUserDefined</Name>
      <Keyword>ScriptUserDefine</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Event Number</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Event Number</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>int</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetUserDefinedEventNumber();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnOpen</Name>
      <Keyword>OnOpen</Keyword>
      <Parameters />
      <Implicits>
        <KnowIt visible="true">
          <Name>Last Opener</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt visible="false">
              <Name>Last Opener</Name>
              <Labels/>
              <Children/>
              <CodeBlocks>
	              <CodeBlock>
		              <Types>
		                <Type>creature</Type>
		              </Types>
		              <Parameters/>
		              <Code>
			              <Line>
			             	 <Literal>return GetLastOpenedBy();</Literal>
			              </Line>
		              </Code>
		              <Includes />
	              </CodeBlock>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnRested</Name>
      <Keyword>ScriptRested</Keyword>
      <Parameters />
      <Implicits />
    </Slot>
    <Slot format="conversation_conditional">
      <Name>Active</Name>
      <Keyword>Active</Keyword>
      <Parameters /> 
      <Implicits />
    </Slot>
    <Slot>
      <Name>Script</Name>
      <Keyword>Script</Keyword>
      <Parameters />
      <Implicits />
    </Slot> 
    <Slot format="conversation">
      <Name>EndConversation</Name>
      <Keyword>EndConversation</Keyword>
      <Parameters />
      <Implicits />
    </Slot>
    <Slot format="conversation">
      <Name>EndConverAbort</Name>
      <Keyword>EndConverAbort</Keyword>
      <Parameters />
      <Implicits />
    </Slot>
  </Slots>
<Causes>
		<!-- Creature ScriptIts -->
		<ScriptIt>
			<Name>When &lt;subject&gt; is attacked by &lt;the attacker&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptAttacked">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
				<Includes />
					
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is damaged by &lt;the damager&gt; for &lt;damage amount&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptDamaged">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
										<Includes />
					
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is killed by &lt;the killer&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptDeath">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; converses with &lt;the speaker&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptDialogue">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
				<Includes />
					
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When the item &lt;disturbed item&gt; in the inventory of &lt;subject&gt; is &lt;disturbance type&gt; by &lt;the disturber&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptDisturbed">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt;'s round ends</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptEndRound">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt;'s heart beats</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptHeartbeat">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt visible="true">
			<Name>When &lt;subject&gt; is blocked by &lt;the blocker&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptOnBlocked">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; perceives &lt;last perceived&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptOnNotice">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; perceives &lt;last perceived heard&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptOnNotice">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;Subject&gt; becomes rested</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptRested">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is spawned</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptSpawn">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; becomes the target of &lt;spell&gt; cast by &lt;spell caster&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptSpellAt">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When a user-defined event occurs</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptUserDefine">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
								<Type>trigger</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		 <!-- Placeable ScriptIts -->
		<ScriptIt>
			<Name>When &lt;subject&gt; is closed by &lt;last closer&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnClosed">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is damaged by &lt;the damager&gt; for &lt;damage amount&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnDamaged">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is killed by &lt;the killer&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnDeath">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<!-- In soviet russia, bomb disarms YOU! \o/ -->
			<Name>When &lt;subject&gt; is disarmed by &lt;disarmer&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnDisarm">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
								<Type>trigger</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;Subject&gt;'s heart beats</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnHeartbeat">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
								<Type>encounter</Type>
								<Type>area</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is locked with &lt;lock DC&gt; by &lt;locker&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnLock">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is melee attacked with &lt;weapon used&gt; by &lt;the attacker&gt; in &lt;attack mode&gt; with &lt;attack type&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnMeleeAttacked">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is opened by &lt;last opener&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnOpen">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;Subject&gt; becomes the target of &lt;spell&gt; cast by &lt;spell caster&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnSpellCastAt">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>creature</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;Subject&gt;'s trap is triggered by &lt;entering creature&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnTrapTriggered">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
								<Type>trigger</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is unlocked by &lt;unlocker&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnUnlock">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When a user-defined event occurs</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnUserDefined">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>door</Type>
								<Type>placeable</Type>
								<Type>encounter</Type>
								<Type>area</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;disturbed item&gt; in the inventory of &lt;subject&gt; is &lt;disturbance type&gt; by &lt;last disturber&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnInvDisturbed">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels />
							<Types>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is used by &lt;last user&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnUsed">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>placeable</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is clicked by &lt;clicking creature&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnClick">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>door</Type>
								<Type>trigger</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; fails to open for &lt;last clicker&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnFailToOpen">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>door</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<!-- Trigger ScriptIts -->
		<ScriptIt>
			<Name>When &lt;subject&gt; is entered by &lt;entering creature&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptOnEnter">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>trigger</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is exited by &lt;exiting creature&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="ScriptOnExit">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>trigger</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<!-- Creature EncounterCreature Encounter ScriptIts -->
		<ScriptIt>
			<Name>When &lt;subject&gt; is entered by &lt;entering creature&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnEntered">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>encounter</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is exited by &lt;exiting creature&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnExit">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>encounter</Type>
								<Type>area</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is exhausted</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnExhausted">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>encounter</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;dialogue&gt; is ended</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="dialogue" slot="EndConversation">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>dialogue</Name>
							<Labels/>
							<Types>
								<Type>dialogue</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;dialogue&gt; is aborted</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="dialogue" slot="EndConverAbort">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>dialogue</Name>
							<Labels/>
							<Types>
								<Type>dialogue</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<!-- Module ScriptIts -->
		<ScriptIt>
			<Name>When &lt;subject&gt;'s heart beats</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnHeartbeat">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; loads</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnModLoad">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is entered by &lt;entering client&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnClientEntr">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is exited by &lt;exiting client&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnClientLeav">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when a user-defined event occurs</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnUsrDefined">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;item lost by&gt; loses &lt;item lost&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnUnAqreItem">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;dead player&gt; is killed by &lt;last hostile actor&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnPlrDeath">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;dying player&gt;'s health reaches zero</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnPlrDying">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;levelling PC&gt;'s health reaches zero</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnPlrLvlUp">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;respawning player&gt; presses the respawn button</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnSpawnBtnDn">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;last PC rested&gt; rests &lt;rest type&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnPlrRest">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;cutscene aborter&gt; aborts a cutscene</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnCutsnAbort">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;activator&gt; activates &lt;activated item&gt; on &lt;activated item target&gt; at &lt;activated item target location&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnActvtItem">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;acquirer&gt; acquires &lt;acquired item&gt; from &lt;object item was acquired from&gt; with &lt;stack size&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnAcquirItem">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;equipper&gt; equips &lt;last item equipped&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnPlrEqItm">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>In &lt;subject&gt;, when &lt;unequipper&gt; unequips &lt;unequipped item&gt; from &lt;possessor&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="Mod_OnPlrUnEqItm">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;subject&gt; is entered by &lt;Entering Creature&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="subject" slot="OnEnter">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>subject</Name>
							<Labels/>
							<Types>
								<Type>area</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;dialogue line&gt; is reached</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="dialogue line" slot="Script">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>dialogue line</Name>
							<Labels/>
							<Types>
								<Type>dialogue_line</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<FormatRef ref="children"/>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>When &lt;quest point&gt; is enabled in &lt;module&gt;</Name>
			<Labels />
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="module" slot="Mod_OnUsrDefined">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>quest point</Name>
							<Labels/>
							<Types>
								<Type>questPoint</Type>
							</Types>
						</KnowIt>
						<KnowIt visible="false">
							<Name>module</Name>
							<Labels/>
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<Line>
							<Literal>if(GetUserDefinedEventNumber() != SE2_QUEST_ENABLED_EVENT) {</Literal>
						</Line>
						<Indent>
							<Line>
								<Literal>return;</Literal>
							</Line>
						</Indent>
						<Line>
							<Literal>}</Literal>
						</Line>
						<Line />
						<Line>
							<Literal>if(SCEZ_Struct_ArrayRemoveElement(GetModule(), QUEST_POINTS_ENABLED_LIST, </Literal>
							<Scope data="argument" ref="quest point">
								<Fragment data="name" />
							</Scope>
							<Literal>)!= "") {</Literal>
						</Line>
						<Indent>
							<FormatRef ref="children"/>
						</Indent>
						<Line>
							<Literal>}</Literal>
						</Line>
					</Code>
					<Includes>
						<Include>i_se_quest2</Include>
					</Includes>
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
	</Causes>
  <Effects>
    <ScriptIt visible="true">
      <Name>Play &lt;Sound&gt;</Name>
      <Labels>
        <Label>now</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			     <Parameters>
			        <KnowIt visible="true">
			          <Name>Sound</Name>
			          <Labels/>
			          <Types>
			            <Type>sound</Type>
			          </Types>
			        </KnowIt>
			     </Parameters>
				<Code>
					<Line>
						<Literal>SoundObjectPlay(</Literal>
						<Scope data="argument" ref="Sound">
							<Fragment data="name"/>
						</Scope>
						<Literal>);</Literal>
					</Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Modify Lock&gt; on &lt;Door&gt;</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Modify Lock</Name>
			          <Labels/>
			          <Types>
			            <Type>lock_modify</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Door</Name>
			          <Labels/>
			          <Types>
			            <Type>door</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
					<Line>
			          <Literal>ActionDoCommand(SetLocked(</Literal>
			          <Scope data="argument" ref="Door">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>,</Literal>
			          <Scope data="argument" ref="Modify Lock">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Modify&gt; the door &lt;Door&gt;</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Door</Name>
			          <Labels/>
			          <Types>
			            <Type>door</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Modify</Name>
			          <Labels/>
			          <Types>
			            <Type>door_action</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
					<Line>
			          <Literal>DoDoorAction(</Literal>
			          <Scope data="argument" ref="Door">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>,</Literal>
			          <Scope data="argument" ref="Modify">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line> 
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show &lt;Text&gt; above the PC</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Text</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
					<Line>
			          <Literal>FloatingTextStringOnCreature(</Literal>
			          <Scope data="argument" ref="Text">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>, GetFirstPC(), FALSE);</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show &lt;Caption&gt; above the PC</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Caption</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
					<Line>
			          <Literal>FloatingTextStringOnCreature(</Literal>
			          <Scope data="argument" ref="Caption">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>, GetFirstPC(), FALSE);</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Speak Text &lt;Text&gt; at volume &lt;Volume&gt;</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Text</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Volume</Name>
			          <Labels/>
			          <Types>
			            <Type>talk_volume</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
					<Line>
			          <Literal>SpeakString(</Literal>
			          <Scope data="argument" ref="Text">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Volume">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Attack Object &lt;Attack Target&gt;</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Attack Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			            <Type>door</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
					<Line>
			          <Literal>ActionAttack(</Literal>
			          <Scope data="argument" ref="Attack Target">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Creature&gt; Faces &lt;Creature To Face&gt;</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Creature</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Creature To Face</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
					<Line>
			          <Literal>vector vFacing = GetPosition(</Literal>
			          <Scope data="argument" ref="Creature To Face">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Creature">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>, SetFacingPoint(vFacing));</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show &lt;Visual Effect&gt; on &lt;Target Object&gt;</Name>
      <Labels/>
        <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Visual Effect</Name>
			          <Labels/>
			          <Types>
			            <Type>spell_visual_effect</Type>
						<Type>visual_effect_effect</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Target Object</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			            <Type>placeable</Type>
			            <Type>door</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
				<Line>
			         <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, EffectVisualEffect(VisualEffect), GetLocation(</Literal>
			        <Scope data="argument" ref="Target Object">
			          <Fragment data="name"/>
			        </Scope>
			        <Literal>));</Literal>
		        </Line>
		      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign Command &lt;Command&gt; to &lt;Creature&gt;</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Creature</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Command</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
				<Line>
			        <Literal>AssignCommand(</Literal>
			        <Scope data="argument" ref="Creature">
			          <Fragment data="name"/>
			        </Scope>
			        <Literal>, </Literal>
			        <Scope data="argument" ref="Command">
			          <Fragment data="name"/>
			        </Scope>
			        <Literal>);</Literal>
		        </Line>
		      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--10 ScriptIts-->
    <ScriptIt visible="true">
      <Name>&lt;Creature&gt; jumps &lt;Distance&gt; meters towards &lt;Location&gt;</Name>
      <Labels/>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
				<Parameters>
			        <KnowIt visible="true">
			          <Name>Creature</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Distance</Name>
			          <Labels/>
			          <Types>
			            <Type>float</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Location</Name>
			          <Labels/>
			          <Types>
			            <Type>location</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
				<Code>
			        <Line>
			          <Literal>location jumperLocation;</Literal>
			        </Line>
			        <Line>
			          <Literal>vector jumperPositin;</Literal>
			        </Line>
			        <Line>
			          <Literal>float jumperFacing;</Literal>
			        </Line>
			        <Line>
			          <Literal>object jumperArea;</Literal>
			        </Line>
			        <Line>
			          <Literal>vector targetPosition;</Literal>
			        </Line>
			        <Line>
			          <Literal>vector heading;</Literal>
			        </Line>
			        <Line/>
			        <Line>
			          <Literal>jumperLocation = GetLocation(</Literal>
			          <Scope data="argument" ref="Creature">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			        <Line>
			          <Literal>jumperPosition = GetPositionFromLocation(jumperLocation);</Literal>
			        </Line>
			        <Line>
			          <Literal>jumperArea = GetAreaFromLocation(jumperLocation);</Literal>
			        </Line>
			        <Line>
			          <Literal>jumperFacing = GetFacingFromLocation(jumperLocation);</Literal>
			        </Line>
			        <Line>
			          <Literal>targetPosition = GetPositionFromLocation(</Literal>
			          <Scope data="argument" ref="Location">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			        <Line>
			          <Literal>heading = Vector(targetPosition.x - jumperPosition.x, targetPosition.y - jumperPosition.y, targetPosition.z - jumperPosition.z);</Literal>
			        </Line>
			        <Line>
			          <Literal>heading = VectorNormalize(heading);</Literal>
			        </Line>
			        <Line>
			          <Literal>jumperPosition = jumperPosition + </Literal>
			          <Scope data="argument" ref="Distance">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal> * heading);</Literal>
			        </Line>
			        <Line>
			          <Literal>jumperLocation = Location(jumperArea, jumperPosition, jumperFacing);</Literal>
			        </Line>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Creature">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>, JumpToLocation(jumperLocation));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Animate &lt;creature&gt; to &lt;p2&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Creature</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>p2</Name>
			          <Labels/>
			          <Types>
			            <Type>timed_creature_animation</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
			      <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Creature">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, PlayAnimation(</Literal>
			          <Scope data="argument" ref="p2">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Animate &lt;The Creature&gt; to &lt;Animation&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			       <Parameters>
			        <KnowIt visible="true">
			          <Name>The Creature</Name>
			          
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Animation</Name>
			          
			          <Labels/>
			          <Types>
			            <Type>timed_creature_animation</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
			      <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="The Creature">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionPlayAnimation(</Literal>
			          <Scope data="argument" ref="Animation">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Animate &lt;The Creature&gt; to &lt;Animation&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
		             <Parameters>
				        <KnowIt visible="true">
				          <Name>The Creature</Name>
				          <Labels/>
				          <Types>
				            <Type>creature</Type>
				          </Types>
				        </KnowIt>
				        <KnowIt visible="true">
				          <Name>Animation</Name>
				          <Labels/>
				          <Types>
				            <Type>timed_creature_animation</Type>
				          </Types>
				        </KnowIt>
				        <KnowIt visible="true">
				          <Name>Duration</Name>
				          <Labels/>
				          <Types>
				            <Type>int</Type>
				          </Types>
				        </KnowIt>
				      </Parameters>
		            <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="The reature">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, PlayAnimation(</Literal>
			          <Scope data="argument" ref="Animation">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, 1.0, </Literal>
			          <Scope data="argument" ref="Duration">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Animate&lt;The Creature&gt; to &lt;Animation&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
       <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
		             <Parameters>
				        <KnowIt visible="true">
				          <Name>The Creature</Name>
				          <Labels/>
				          <Types>
				            <Type>creature</Type>
				          </Types>
				        </KnowIt>
				        <KnowIt visible="true">
				          <Name>Animation</Name>
				          <Labels/>
				          <Types>
				            <Type>timed_creature_animation</Type>
				          </Types>
				        </KnowIt>
				        <KnowIt visible="true">
				          <Name>Duration</Name>
				          <Labels/>
				          <Types>
				            <Type>int</Type>
				          </Types>
				        </KnowIt>
				      </Parameters>
		            <Code>
				        <Line>
				          <Literal>AssignCommand(</Literal>
				          <Scope data="argument" ref="The Creature">
				            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
				          </Scope>
				          <Literal>, ActionPlayAnimation(</Literal>
				          <Scope data="argument" ref="Animation">
				            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
				          </Scope>
				          <Literal>, 1.0, </Literal>
				          <Scope data="argument" ref="Duration">
				            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
				          </Scope>
				          <Literal>));</Literal>
				        </Line>
			      	</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Animate &lt;The Placeable&gt; to &lt;Animation&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
       <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                <Parameters>
		        <KnowIt visible="true">
		          <Name>The Placeable</Name>
		          <Labels/>
		          <Types>
		            <Type>placeable</Type>
		          </Types>
		        </KnowIt>
		        <KnowIt visible="true">
		          <Name>Animation</Name>
		          <Labels/>
		          <Types>
		            <Type>placeable_animation</Type>
		          </Types>
		        </KnowIt>
		      </Parameters>
                 <Code>
		        <Line>
		          <Literal>AssignCommand(</Literal>
		          <Scope data="argument" ref="The Placeable">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>, PlayAnimation(</Literal>
		          <Scope data="argument" ref="Animation">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>));</Literal>
		        </Line>
		      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Animate &lt;The Placeable&gt; to &lt;Animation&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>The Placeable</Name>
			          <Labels/>
			          <Types>
						<Type>placeable</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Animation</Name>
			          <Labels/>
			          <Types>
			            <Type>placeable_animation</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                <Code>
	       		 <Line reference="/APIDictionary/Effects/ScriptIt[16]/CodeBlocks/CodeBlock/Code/Line"/>
	      		</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Play a &lt;Character Theme&gt; for &lt;Character&gt;</Name>
      <Labels> 
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                        <Parameters>
				        <KnowIt visible="true">
				          <Name>Character Theme</Name>
				          <Labels/>
				          <Types>
				            <Type>int</Type>
				          </Types>
				        </KnowIt>
				        <KnowIt visible="true">
				          <Name>Character</Name>
				          <Labels/>
				          <Types>
				            <Type>Creature</Type>
							<Type>Journal</Type>
							<Type>Placeable</Type>
							<Type>Door</Type>
							<Type>Item</Type>
							<Type>Trigger</Type>
				          </Types>
				        </KnowIt>
				      </Parameters>
                <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Character Theme">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, PlayCharacterTheme(</Literal>
			          <Scope data="argument" ref="Character">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Play an old theme for &lt;Character&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                  <Parameters>
			        <KnowIt visible="true">
			          <Name>Character</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Character">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, PlayOldTheme());</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Play &lt;Sound Object&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                  <Parameters>
			        <KnowIt visible="true">
			          <Name>Sound Object</Name>
			          <Labels/>
			          <Types>
			            <Type>sound</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                <Code>
			        <Line>
			          <Literal>SoundObjectPlay(</Literal>
			          <Scope data="argument" ref="Sound Object">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <!--20 ScriptIts--><ScriptIt visible="true">
      <Name>Set &lt;Area&gt;&apos;s day background music to &lt;Daytime Track&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                     <Parameters>
				        <KnowIt visible="true">
				          <Name>Area</Name>
				          <Labels/>
				          <Types>
				            <Type>area</Type>
				          </Types>
				        </KnowIt>
				        <KnowIt visible="true">
				          <Name>Daytime Track</Name>
				          <Labels/>
				          <Types>
				            <Type>int</Type>
				          </Types>
				        </KnowIt>
				      </Parameters>
                  <Code>
			        <Line>
			          <Literal>MusicBackgroundStop(</Literal>
			          <Scope data="argument" ref="Area">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			        <Line>
			          <Literal>MusicBackgroundChangeDay</Literal>
			          <Scope data="argument" ref="(Are">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>a,</Literal>
			          <Scope data="argument" ref=" Daytime Trac">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>k);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Set &lt;Area&gt;&apos;s night background music to &lt;Nighttime Track&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Area</Name>
			          <Labels/>
			          <Types>
			            <Type>area</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Nighttime Track</Name>
			          <Labels/>
			          <Types>
			            <Type>int</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                  <Code>
			        <Line>
			          <Literal>MusicBackgroundStop(</Literal>
			          <Scope data="argument" ref="Area">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			        <Line>
			          <Literal>MusicBackgroundChangeNight(</Literal>
			          <Scope data="argument" ref="Are">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>,</Literal>
			          <Scope data="argument" ref=" Nighttime Track">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			        <Line>
			          <Literal>MusicBackgroundPlay(</Literal>
			          <Scope data="argument" ref="Area">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Set &lt;Area&gt;&apos;s battle music to &lt;Battle Track&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Area</Name>
			          <Labels/>
			          <Types>
			            <Type>area</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Battle Track</Name>
			          <Labels/>
			          <Types>
			            <Type>int</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                  <Code>
			        <Line>
			          <Literal>MusicBattleChange(</Literal>
			          <Scope data="argument" ref="Area">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>,</Literal>
			          <Scope data="argument" ref="Battle Track">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Play &lt;Area&gt;&apos;s battle music</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
       <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                  <Parameters>
			        <KnowIt visible="true">
			          <Name>Area</Name>
			          <Labels/>
			          <Types>
			            <Type>area</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                  <Code>
			        <Line>
			          <Literal>MusicBattlePlay(</Literal>
			          <Scope data="argument" ref="Area">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Stop &lt;Area&gt;&apos;s battle music</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Area</Name>
			          <Labels/>
			          <Types>
			            <Type>area</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                  <Code>
			        <Line>
			          <Literal>MusicBattleStop(</Literal>
			          <Scope data="argument" ref="Area">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Bufferer&gt; buffs itself if an enemy PC is within a distance of &lt;Buff Distance&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Bufferer</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Buff Distance</Name>
			          <Labels/>
			          <Types>
			            <Type>int</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
			      <!--  todo finish code -->
                  <Code>
			        <Line>
			          <Literal></Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Cast a cheat spell &lt;Spell&gt; on &lt;Target&gt; with cheat &lt;Cheat&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Spell</Name>
			          <Labels/>
			          <Types>
			            <Type>spell</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Cheat</Name>
			          <Labels/>
			          <Types>
			            <Type>cheat</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                   <Code>
			        <Line>
			          <Literal>ActionCastSpellAtObject(</Literal>
			          <Scope data="argument" ref="Spell">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, METAMAGIC_ANY, </Literal>
			          <Scope data="argument" ref="Cheat">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Caster&gt; casts a cheat spell &lt;Spell&gt; on &lt;Target&gt; with cheat &lt;Cheat&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Caster</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Spell</Name>
			          <Labels/>
			          <Types>
			            <Type>spell</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Cheat</Name>
			          <Labels/>
			          <Types>
			            <Type>cheat</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                   <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Caster">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionCastSpellAtObject(</Literal>
			          <Scope data="argument" ref="Spell">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, METAMAGIC_ANY, </Literal>
			          <Scope data="argument" ref="Cheat">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Caster&gt; casts a fake &lt;Spell&gt; on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Caster</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Spell</Name>
			          <Labels/>
			          <Types>
			            <Type>spell</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                   <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Caster">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionCastFakeSpellAtObject(</Literal>
			          <Scope data="argument" ref="Spell">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Caster&gt; casts a fake &lt;Spell&gt; at &lt;Location&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                  <Parameters>
			        <KnowIt visible="true">
			          <Name>Caster</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Spell</Name>
			          <Labels/>
			          <Types>
			            <Type>spell</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Location</Name>
			          <Labels/>
			          <Types>
			            <Type>location</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                  <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Caster">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionCastFakeSpellAtObject(</Literal>
			          <Scope data="argument" ref="Spell">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Location">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--30 ScriptIts-->
    <ScriptIt visible="true">
      <Name>&lt;Caster&gt; casts a known &lt;Spell&gt; on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                   <Parameters>
			        <KnowIt visible="true">
			          <Name>Caster</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Spell</Name>
			          <Labels/>
			          <Types>
			            <Type>spell</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                  <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Caster">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionCastSpellAtObject(</Literal>
			          <Scope data="argument" ref="Spell">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Caster&gt; casts a known &lt;Spell&gt; at &lt;Location&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
		      <Parameters>
		        <KnowIt visible="true">
		          <Name>Caster</Name>
		          <Labels/>
		          <Types>
						<Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
		          </Types>
		        </KnowIt>
		        <KnowIt visible="true">
		          <Name>Spell</Name>
		          <Labels/>
		          <Types>
		            <Type>spell</Type>
		          </Types>
		        </KnowIt>
		        <KnowIt visible="true">
		          <Name>Location</Name>
		          <Labels/>
		          <Types>
		            <Type>location</Type>
		          </Types>
		        </KnowIt>
		      </Parameters>
		      <Code>
		        <Line>
		          <Literal>AssignCommand(</Literal>
		          <Scope data="argument" ref="Caster">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>, ActionCastSpellAtLocation(</Literal>
		          <Scope data="argument" ref="Spell">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>, </Literal>
		          <Scope data="argument" ref="Location">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>));</Literal>
		        </Line>
		      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Caster&gt; force casts &lt;Spell&gt; on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                  <Parameters>
			        <KnowIt visible="true">
			          <Name>Caster</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Spell</Name>
			          <Labels/>
			          <Types>
			            <Type>spell</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                   <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Caster">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionCastSpellAtObject(</Literal>
			          <Scope data="argument" ref="Spell">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, METAMAGIC_ANY, TRUE));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Caster&gt; force casts &lt;Spell&gt; at &lt;Location&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                  <Parameters>
			        <KnowIt visible="true">
			          <Name>Caster</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Spell</Name>
			          <Labels/>
			          <Types>
			            <Type>spell</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Location</Name>
			          <Labels/>
			          <Types>
			            <Type>location</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                   <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Caster">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionCastSpellAtLocation(</Literal>
			          <Scope data="argument" ref="Spell">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Location">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, METAMAGIC_ANY, TRUE));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Decrement &lt;Target&gt;&apos;s remaining uses of &lt;Feat&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                  <Parameters>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Feat</Name>
			          <Labels/>
			          <Types>
			            <Type>feat</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                   <Code>
			        <Line>
			          <Literal>DecrementRemainingFeatUses(</Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Feat">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Give &lt;Target&gt; &lt;Negative Levels&gt; for &lt;Time&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                        <Parameters>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Negative Levels</Name>
			          <Labels/>
			          <Types>
			            <Type>int</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Time</Name>
			          <Labels/>
			          <Types>
			            <Type>int</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                         <Code>
			        <Line>
			          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectNegativeLevel(</Literal>
			          <Scope data="argument" ref="Negative Levels">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>), </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Time">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Remove effect &lt;The Effect&gt; from &lt;The Target&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
                              <Parameters>
			        <KnowIt visible="true">
			          <Name>The Effect</Name>
			          
			          <Labels/>
			          <Types>
			            <Type>disturbance_type</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>The Target</Name>
			          
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
                         <Code>
			        <Line>
			          <Literal>RemoveSpecificEffect(</Literal>
			          <Scope data="argument" ref="The Effect">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="The Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>);</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;The Activator&gt; removes effect &lt;The Effect&gt; from &lt;The Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			     <Parameters>
			        <KnowIt visible="true">
			          <Name>The Activator</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>The Effect</Name>
			          <Labels/>
			          <Types>
			            <Type>disturbance_type</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>The Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
			     <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="The Activator">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionDoCommand(RemoveSpecificEffect(</Literal>
			          <Scope data="argument" ref="The Effect">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="The Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>)));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Feat User&gt; uses &lt;Feat&gt; on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
			      <Parameters>
			        <KnowIt visible="true">
			          <Name>Feat User</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Feat</Name>
			          <Labels/>
			          <Types>
			            <Type>feat</Type>
			          </Types>
			        </KnowIt>
			        <KnowIt visible="true">
			          <Name>Target</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
			          </Types>
			        </KnowIt>
			      </Parameters>
			      <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Feat User">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionUseFeat(</Literal>
			          <Scope data="argument" ref="Feat">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Skill User&gt; uses &lt;Skill&gt; on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
		      <Parameters>
		        <KnowIt visible="true">
		          <Name>Skill User</Name>
		          <Labels/>
		          <Types>
		            <Type>creature</Type>
		          </Types>
		        </KnowIt>
		        <KnowIt visible="true">
		          <Name>Skill</Name>
		          <Labels/>
		          <Types>
		            <Type>skill</Type>
		          </Types>
		        </KnowIt>
		        <KnowIt visible="true">
		          <Name>Target</Name>
		          <Labels/>
		          <Types>
						<Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
		          </Types>
		        </KnowIt>
		      </Parameters>
			      <Code>
			        <Line>
			          <Literal>AssignCommand(</Literal>
			          <Scope data="argument" ref="Skill User">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, ActionUseSkill(</Literal>
			          <Scope data="argument" ref="Skill">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>, </Literal>
			          <Scope data="argument" ref="Target">
			            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
			          </Scope>
			          <Literal>));</Literal>
			        </Line>
			      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--40 ScriptIts-->
    <ScriptIt visible="true">
      <Name>Show &lt;Caption&gt; above the PC</Name>
      <Labels/> 
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
		      <Parameters>
		        <KnowIt visible="true">
		          <Name>Caption</Name>
		          <Labels/>
		          <Types>
		            <Type>string</Type>
		          </Types>
		        </KnowIt>
		      </Parameters>
		      <Code>
		        <Line reference="/APIDictionary/Effects/ScriptIt[5]/CodeBlocks/CodeBlock/Code/Line"/>
		      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show &lt;The Text&gt; in the chat window of &lt;The PC&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
		      <Parameters>
		        <KnowIt visible="true">
		          <Name>The Text</Name>
		          <Labels/>
		          <Types>
		            <Type>string</Type>
		          </Types>
		        </KnowIt>
		        <KnowIt visible="true">
		          <Name>The PC</Name>
		          <Labels/>
		          <Types>
		            <Type>creature</Type>
		          </Types>
		        </KnowIt>
		      </Parameters>
		      <Code>
		        <Line>
		          <Literal>SendMessageToPC(</Literal>
		          <Scope data="argument" ref="The PC">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>, </Literal>
		          <Scope data="argument" ref="The Text">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>);</Literal>
		        </Line>
		      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Speaker&gt; &lt;Speak&gt;s &lt;Text&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Speaker</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Speak</Name>
          <Labels/>
          <Types>
            <Type>dialogue</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Text</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
		      <Code>
		        <Line>
		          <Literal>AssignCommand(</Literal>
		          <Scope data="argument" ref="Speaker">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>, SpeakString(</Literal>
		          <Scope data="argument" ref="Speak">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>, </Literal>
		          <Scope data="argument" ref="Text">
		            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
		          </Scope>
		          <Literal>));</Literal>
		        </Line>
		      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Speaker&gt; &lt;Speak&gt;s &lt;Text&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
            <Parameters>
        <KnowIt visible="true">
          <Name>Speaker</Name>
          <Labels/>
          <Types>
					<Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Speak</Name>
          <Labels/>
          <Types>
            <Type>dialogue</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Text</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
		            <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[43]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Integer Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
		<Parameters>
        <KnowIt visible="true">
          <Name>Integer Value</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
						<Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalInt(</Literal>
          <Scope data="argument" ref="Integer Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Give &lt;Target&gt;-&lt;Ability Decrease&gt; &lt;Ability&gt; for &lt;Time&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
					<Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Ability Decrease</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Ability</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Time</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectAbilityDecrease(</Literal>
          <Scope data="argument" ref="Ability Decrease">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Ability">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Give &lt;Target&gt; &lt;Ability Increase&gt; &lt;Ability&gt; for &lt;Time&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Ability Increase</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Ability</Name>
          <Labels/>
          <Types>
            <Type>ability</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Time</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectAbilityIncrease(</Literal>
          <Scope data="argument" ref="Ability Increase">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Ability">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Seconds">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <!-- LULZ, we need the AC decrease amount enum, tis does not exist-->
	<ScriptIt visible="true">
      <Name>Give &lt;Target&gt; &lt;AC Decrease&gt; AC for &lt;Time&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                  <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>AC Decrease</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Time</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectACDecrease(</Literal>
          <Scope data="argument" ref="AC Decrease">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Give &lt;Target&gt; &lt;AC Increase&gt; AC for &lt;Time&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>AC Increase</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Time</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectACIncrease(</Literal>
          <Scope data="argument" ref="AC Increase">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;The Advancer&gt; advances the game&apos;s time to beginning of the next hour</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>The Advancer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>int nHour = GetTimeHour();</Literal>
        </Line>
        <Line>
          <Literal>int nMinute = 0;</Literal>
        </Line>
        <Line>
          <Literal>int nSecond = 0;</Literal>
        </Line>
        <Line>
          <Literal>int nMillisecond = 0;</Literal>
        </Line>
        <Line>
          <Literal>nHour += 1;</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Advancer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetTime(nHour, nMinute, nSecond, nMillisecond)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--50 ScriptIts-->
    <ScriptIt visible="true">
      <Name>Advance the game&apos;s time by &lt;The Hours&gt; hours</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                  <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>The Hours</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
       <Code>
        <Line>
          <Literal>int nHour = GetTimeHour();</Literal>
        </Line>
        <Line>
          <Literal>int nMinute = 0;</Literal>
        </Line>
        <Line>
          <Literal>int nSecond = 0;</Literal>
        </Line>
        <Line>
          <Literal>int nMillisecond = 0;</Literal>
        </Line>
        <Line>
          <Literal>nHour += </Literal>
          <Scope data="argument" ref="The Hours">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>SetTime(nHour, nMinute, nSecond, nMillisecond);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;The Advancer&gt; advances the game&apos;s time by &lt;The Hours&gt; hours</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                        <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>The Advancer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Hours</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>int nHour = GetTimeHour();</Literal>
        </Line>
        <Line>
          <Literal>int nMinute = 0;</Literal>
        </Line>
        <Line>
          <Literal>int nSecond = 0;</Literal>
        </Line>
        <Line>
          <Literal>int nMillisecond = 0;</Literal>
        </Line>
        <Line>
          <Literal>nHour += </Literal>
          <Scope data="argument" ref="The Hours">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Advancer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetTime(nHour, nMinute, nSecond, nMillisecond)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Advance time by &lt;The Hours&gt; hours, &lt;The Minutes&gt; minutes, &lt;The Seconds&gt; seconds and &lt;The Milliseconds&gt; milliseconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                              <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>The Hours</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Minutes</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Seconds</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Milliseconds</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>int nHour = GetTimeHour();</Literal>
        </Line>
        <Line>
          <Literal>int nMinute = GetTimeMinute();</Literal>
        </Line>
        <Line>
          <Literal>int nSecond = GetTimeSecond();</Literal>
        </Line>
        <Line>
          <Literal>int nMillisecond = GetTimeMillisecond();</Literal>
        </Line>
        <Line>
          <Literal>nHour += </Literal>
          <Scope data="argument" ref="The Hours">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>nMinute += </Literal>
          <Scope data="argument" ref="The Minutes">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>nSecond += </Literal>
          <Scope data="argument" ref="The Seconds">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>nMillisecond += </Literal>
          <Scope data="argument" ref="The Milliseconds">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>SetTime(nHour, nMinute, nSecond, nMillisecond);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;The Advancer&gt; advances time by &lt;The Hours&gt; hours, &lt;The Minutes&gt; minutes, &lt;The Seconds&gt; seconds and &lt;The Milliseconds&gt; milliseconds </Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>The Advancer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Hours</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Minutes</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Seconds</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Milliseconds</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
            <Code>
        <Line>
          <Literal>int nHour = GetTimeHour();</Literal>
        </Line>
        <Line>
          <Literal>int nMinute = GetTimeMinute();</Literal>
        </Line>
        <Line>
          <Literal>int nSecond = GetTimeSecond();</Literal>
        </Line>
        <Line>
          <Literal>int nMillisecond = GetTimeMillisecond();</Literal>
        </Line>
        <Line>
          <Literal>nHour += </Literal>
          <Scope data="argument" ref="The Hours">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>nMinute += </Literal>
          <Scope data="argument" ref="The Minutes">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>nSecond += </Literal>
          <Scope data="argument" ref="The Seconds">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>nMillisecond += </Literal>
          <Scope data="argument" ref="The Milliseconds">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Advancer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetTime(nHour, nMinute, nSecond, nMillisecond)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Set the game&apos;s date to year &lt;Year&gt;, month &lt;Month&gt; and day &lt;Day&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Year</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Month</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Day</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetCalendar(</Literal>
          <Scope data="argument" ref="Year">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Month">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Day">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Integer Value&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                  <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Integer Value</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalInt(GetModule(), </Literal>
          <Scope data="argument" ref="Integer Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Real Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                        <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Real Value</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalFloat(</Literal>
          <Scope data="argument" ref="Real Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Real Value&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                              <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Real Value</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalFloat(GetModule(), </Literal>
          <Scope data="argument" ref="Real Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Text Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                                    <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Text Value</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalString(</Literal>
          <Scope data="argument" ref="Text Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Text Value&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                                          <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Text Value</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalString(GetModule(), </Literal>
          <Scope data="argument" ref="Text Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--60 ScriptIts-->
    <ScriptIt visible="true">
      <Name>Assign &lt;Binary Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                                                <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Binary Value</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalInt(</Literal>
          <Scope data="argument" ref="Binary Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Binary Value&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                                                      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Binary Value</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalInt(GetModule(), </Literal>
          <Scope data="argument" ref="Binary Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Assigner&gt; assigns &lt;Binary Value&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
	<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Assigner</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Binary Value</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Assigner">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetLocalInt(GetModule(), </Literal>
          <Scope data="argument" ref="Binary Value">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Object&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      	<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Object</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalObject(</Literal>
          <Scope data="argument" ref="Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign &lt;Object&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
            	<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>SetLocalObject(GetModule(), </Literal>
          <Scope data="argument" ref="Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Label">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Combat Effect&gt; combat visual effect on &lt;Target&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                  	<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Combat Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_combat</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Combat Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Combat Effect&gt; combat visual effect on &lt;Creature&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                        	<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Combat Effect</Name>
          <Labels/>
          <Types>
            <Type>combat_mode</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Combat Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Combat Effect&gt; combat visual effect at &lt;Location&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
     <Parameters>
        <KnowIt visible="true">
          <Name>Combat Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_combat</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Combat Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Fired Effect&gt; fired visual effect on &lt;Target&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Fired Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Fired Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Fired Effect&gt; fired visual effect on &lt;Creature&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                  <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Fired Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Fired Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--70 ScriptIts-->
    <ScriptIt visible="true">
      <Name>Show the &lt;Fired Effect&gt; fired visual effect at &lt;Location&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                        <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Fired Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Fired Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Shower&gt; shows &lt;Fired Effect&gt; fired visual effect on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                             <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Shower</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Fired Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Fired Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Shower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, loc)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Shower&gt; shows &lt;Fired Effect&gt; fired visual effect at &lt;Location&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                                   <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Shower</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Fired Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Fired Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Shower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Impact Effect&gt; impact visual effect on &lt;Target&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Impact Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_impact</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Impact Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Impact Effect&gt; impact visual effect on &lt;Creature&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
       <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Impact Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_impact</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Impact Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Impact Effect&gt; impact visual effect at &lt;Location&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
       <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Impact Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_impact</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Impact Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Shower&gt; shows &lt;Impact Effect&gt; impact visual effect on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
             <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Shower</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Impact Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_impact</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Impact Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Shower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand( ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>))));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Shower&gt; shows &lt;Impact Effect&gt; impact visual effect at &lt;Location&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                   <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Shower</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Impact Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_impact</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Impact Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Shower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Target&gt; permanently</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                         <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Beam Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_beam</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Source</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect beam = EffectBeam(</Literal>
          <Scope data="argument" ref="Beam Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Source">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, BODY_NODE_CHEST);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, beam, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Creature&gt; permanently</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
    <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Beam Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_beam</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Source</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect beam = EffectBeam(</Literal>
          <Scope data="argument" ref="Beam Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Source">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, BODY_NODE_CHEST);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, beam, </Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--80 ScriptIts-->
    <ScriptIt visible="true">
      <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
          <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Beam Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_beam</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Source</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect beam = EffectBeam(</Literal>
          <Scope data="argument" ref="Beam Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Source">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, BODY_NODE_CHEST);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, beam, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Creature&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Beam Effect</Name>
          <Labels/>
          <Types>
            <Type>visual_effect_beam</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Source</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect beam = EffectBeam(</Literal>
          <Scope data="argument" ref="Beam Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Source">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, BODY_NODE_CHEST);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, beam, </Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Shower&gt; shows permanent death effect on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Shower</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectDeath();</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Shower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetIsDestroyable(FALSE)));</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(param_1_object, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_INSTANT, veffect, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Shower&gt; shows permanent knock down effect on &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Shower</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect eKnockdown = EffectKnockdown();</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Shower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, eKnockdown, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Shower&gt; shows temporary knock down effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Shower</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
       <Code>
        <Line>
          <Literal>effect eKnockdown = EffectKnockdown();</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Shower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, eKnockdown, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Spell Effect&gt; spell visual effect on &lt;Creature&gt; permanently</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
       <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Spell Effect</Name>
          <Labels/>
          <Types>
            <Type>spell_visual_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Spell Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_PERMANENT, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Spell Effect&gt; spell visual effect at &lt;Location&gt; permanently</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
             <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Spell Effect</Name>
          <Labels/>
          <Types>
            <Type>spell_visual_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Spell Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_PERMANENT, veffect, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Spell Effect&gt; spell visual effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Spell Effect</Name>
          <Labels/>
          <Types>
            <Type>spell_visual_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Spell Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_TEMPORARY, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Spell Effect&gt; spell visual effect on &lt;Creature&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Spell Effect</Name>
          <Labels/>
          <Types>
            <Type>spell_visual_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Spell Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_TEMPORARY, veffect, GetLocation(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Show the &lt;Spell Effect&gt; spell visual effect at &lt;Location&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
     <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Spell Effect</Name>
          <Labels/>
          <Types>
            <Type>spell_visual_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>effect veffect = EffectVisualEffect(</Literal>
          <Scope data="argument" ref="Spell Effect">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectAtLocation(DURATION_TYPE_TEMPORARY, veffect, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--90 ScriptIts-->
    <ScriptIt visible="true">
      <Name>Show the &lt;Area of Effect&gt; area of effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Area of Effect</Name>
          <Labels/>
          <Types>
            <Type>area_of_effect</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
      <!-- todo code -->
        <Line>
          <Literal></Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;The Placeable&gt; alerts nearby creatures from its faction.</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>The Placeable</Name>
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ShoutDisturbed());</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;User&gt; bashes &lt;Placeable&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                  <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable</Name>
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DoPlaceableObjectAction(</Literal>
          <Scope data="argument" ref="Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, PLACEABLE_ACTION_BASH)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;User&gt; knocks &lt;Placeable&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                        <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable</Name>
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DoPlaceableObjectAction(</Literal>
          <Scope data="argument" ref="Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, PLACEABLE_ACTION_KNOCK)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;User&gt; unlocks &lt;Placeable&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                              <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable</Name>
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DoPlaceableObjectAction(</Literal>
          <Scope data="argument" ref="Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, PLACEABLE_ACTION_UNLOCK)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;User&gt; uses &lt;Placeable&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                                    <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable</Name>
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DoPlaceableObjectAction(</Literal>
          <Scope data="argument" ref="Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, PLACEABLE_ACTION_USE)));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign original facing of &lt;Actor&gt; to itself</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                                          <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Actor</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>float originalFacing = GetFacing(</Literal>
          <Scope data="argument" ref="Actor">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>SetLocalFloat(</Literal>
          <Scope data="argument" ref="Actor">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, &quot;SE_AUX_ORIGINAL_FACING&quot;, originalFacing);</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>Assign original facing of &lt;Actor&gt; to itself</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
 	<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Actor</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[97]/CodeBlocks/CodeBlock/Code/Line"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[97]/CodeBlocks/CodeBlock/Code/Line[2]"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Facer&gt; faces &lt;Direction&gt; degrees counterclockwise from East</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Facer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Direction</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Face">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SetFacing(</Literal>
          <Scope data="argument" ref="Direction">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Facer&gt; faces &lt;Direction&gt; degrees counterclockwise from East</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
     <Parameters>
        <KnowIt visible="true">
          <Name>Facer</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Direction</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[99]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--100 ScriptIts-->
    <ScriptIt visible="true">
      <Name>&lt;Facing Creature&gt; faces &lt;Object To Face&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
            <Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Facing Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Object To Face</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>vector vFacing = GetPosition(</Literal>
          <Scope data="argument" ref="Object To Face">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Facing Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SetFacingPoint(vFacing));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Facing Creature&gt; faces &lt;Object To Face&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Facing Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Object To Face</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[101]/CodeBlocks/CodeBlock/Code/Line"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[101]/CodeBlocks/CodeBlock/Code/Line[2]"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps &lt;Direction&gt; in direction &lt;Distance&gt; degrees counterclockwise from East</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
            <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Direction</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>location jumperLocation = GetLocation(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>object area = GetAreaFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>vector jumperPosition = GetPositionFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>vector targetPosition = </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>*AngleToVector(</Literal>
          <Scope data="argument" ref="Direction">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>) + jumperPosition;</Literal>
        </Line>
        <Line>
          <Literal>location targetLocation = Location(area, targetPosition, </Literal>
          <Scope data="argument" ref="Direction">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, JumpToLocation(targetLocation));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps &lt;Direction&gt; in direction &lt;Distance&gt; degrees counterclockwise from East</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
                  <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Direction</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[103]/CodeBlocks/CodeBlock/Code/Line"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[103]/CodeBlocks/CodeBlock/Code/Line[2]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[103]/CodeBlocks/CodeBlock/Code/Line[3]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[103]/CodeBlocks/CodeBlock/Code/Line[4]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[103]/CodeBlocks/CodeBlock/Code/Line[5]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[103]/CodeBlocks/CodeBlock/Code/Line[6]"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps near &lt;Target&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, JumpToObject(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps near &lt;Target&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
            <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[105]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps to &lt;Location&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, JumpToLocation(</Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps to &lt;Location&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
        <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
	 <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[107]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt>
<Name>&lt;Jumper&gt; jumps &lt;Distance&gt; meters towards &lt;Location&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location jumperLocation;</Literal>
        </Line>
        <Line>
          <Literal>vector jumperPosition;</Literal>
        </Line>
        <Line>
          <Literal>float jumperFacing;</Literal>
        </Line>
        <Line>
          <Literal>object jumperArea;</Literal>
        </Line>
        <Line>
          <Literal>vector targetPosition;</Literal>
        </Line>
        <Line>
          <Literal>vector heading;</Literal>
        </Line>
        <Line>
          <Literal>jumperLocation = GetLocation(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>jumperPosition = GetPositionFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>jumperArea = GetAreaFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>jumperFacing = GetFacingFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>targetPosition = GetPositionFromLocation(</Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>heading = Vector(targetPosition.x - jumperPosition.x, targetPosition.y -   jumperPosition.y, targetPosition.z - jumperPosition.z);</Literal>
        </Line>
        <Line>
          <Literal>  heading = VectorNormalize(heading);</Literal>
        </Line>
        <Line>
          <Literal>jumperPosition = jumperPosition + </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>*heading;</Literal>
        </Line>
        <Line>
          <Literal>jumperLocation = Location(jumperArea, jumperPosition, jumperFacing);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, JumpToLocation(jumperLocation));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks></ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; meters towards &lt;Location&gt;</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
              <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[2]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[3]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[4]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[5]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[6]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[7]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[8]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[9]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[10]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[11]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[12]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[13]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[14]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[15]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[109]/CodeBlocks/CodeBlock/Code/Line[16]"/>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt><!--110 ScriptIts-->
    <ScriptIt visible="true">
      <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; meters towards &lt;Target&gt;</Name>
      <Labels>
        <Label>NOW</Label>
      </Labels>
                    <Children/>
      		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>location jumperLocation;</Literal>
        </Line>
        <Line>
          <Literal>vector jumperPosition;</Literal>
        </Line>
        <Line>
          <Literal>float jumperFacing;</Literal>
        </Line>
        <Line>
          <Literal>object jumperArea;</Literal>
        </Line>
        <Line>
          <Literal>vector targetPosition;</Literal>
        </Line>
        <Line>
          <Literal>vector heading;</Literal>
        </Line>
        <Line>
          <Literal>jumperLocation = GetLocation(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>jumperPosition = GetPositionFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>jumperArea = GetAreaFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>jumperFacing = GetFacingFromLocation(jumperLocation);</Literal>
        </Line>
        <Line>
          <Literal>targetPosition = GetPositionFromLocation(GetLocation(</Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
        <Line>
          <Literal>heading = Vector(targetPosition.x - jumperPosition.x, targetPosition.y -   jumperPosition.y, targetPosition.z - jumperPosition.z);</Literal>
        </Line>
        <Line>
          <Literal>heading = VectorNormalize(heading);</Literal>
        </Line>
        <Line>
          <Literal>jumperPosition = jumperPosition + </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>*heading;</Literal>
        </Line>
        <Line>
          <Literal>jumperLocation = Location(jumperArea, jumperPosition, jumperFacing);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Jumper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, JumpToLocation(jumperLocation));</Literal>
        </Line>
      </Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
    </ScriptIt>
    <ScriptIt>
<Name>&lt;Jumper&gt; jumps &lt;Distance&gt; meters towards &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Jumper</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[2]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[3]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[4]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[5]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[6]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[7]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[8]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[9]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[10]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[11]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[12]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[13]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[14]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[15]"/>
        <Line reference="/APIDictionary/Effects/ScriptIt[111]/CodeBlocks/CodeBlock/Code/Line[16]"/>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks></ScriptIt>
    <ScriptIt>
<Name>&lt;Walker&gt; walks randomly</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Walker</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Walker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionRandomWalk());</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks></ScriptIt>
    <ScriptIt>
<Name>&lt;Walker&gt; walks waypoints</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Walker</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Walker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(WalkWayPoints()));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks></ScriptIt>
    <ScriptIt>
<Name>Assign &lt;Object&gt; to the global variable labelled &lt;Label&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[65]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Fleeing Creature&gt; &lt;walk&gt;s to &lt;Range&gt; meters from &lt;Location&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Fleeing Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Range</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Fleeing Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionMoveAwayFromLocation(</Literal>
          <Scope data="argument" ref="Walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Range">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Fleeing Creature&gt; &lt;walk&gt;s to &lt;Range&gt; meters from &lt;Repeller&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Fleeing Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Range</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Repeller</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Fleeing Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionMoveAwayFromObject(</Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Repeller">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Range">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt;&lt;walk&gt;s to &lt;Location&gt; for &lt;Timeout&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Timeout</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionForceMoveToLocation(</Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Timeout">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt;&lt;walk&gt;s to &lt;Location&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionMoveToLocation(</Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt; &lt;walk&gt;s within &lt;Distance&gt; meters of &lt;Target&gt; for &lt;Timeout&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Timeout</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionForceMoveToObject(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope> 
          <Literal>, </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Timeout">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--120 ScriptIts-->
    <ScriptIt>
<Name>&lt;Mover&gt; &lt;walk&gt;s within &lt;Distance&gt; meters of &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionMoveToObject(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt; &lt;walk&gt;s near &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionMoveToObject(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt; &lt;walk&gt;s randomly within &lt;Distance&gt; meters of &lt;Location&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location aLocation = </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>float rawDistance = </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>int randomDistance = Random(FloatToInt(rawDistance));</Literal>
        </Line>
        <Line>
          <Literal>float distance = IntToFloat(randomDistance) + (rawDistance - FloatToInt(rawDistance));</Literal>
        </Line>
        <Line>
          <Literal>vector aPosition = GetPositionFromLocation(aLocation);</Literal>
        </Line>
        <Line>
          <Literal>object area = GetAreaFromLocation(aLocation);</Literal>
        </Line>
        <Line>
          <Literal>float facing = IntToFloat(Random(361));</Literal>
        </Line>
        <Line>
          <Literal>vector facingVector = VectorNormalize(AngleToVector(facing));</Literal>
        </Line>
        <Line>
          <Literal>aPosition = aPosition + facingVector*distance;</Literal>
        </Line>
        <Line>
          <Literal>location newLocation = Location(area, aPosition, facing);</Literal>
        </Line>
        <Line>
          <Literal>SetFacingPoint(GetPositionFromLocation(newLocation));</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ActionMoveToLocation(newLocation, </Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt; &lt;walk&gt;s randomly within &lt;Distance&gt; meters of &lt;Source Object&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Source Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location aLocation = GetLocation(</Literal>
          <Scope data="argument" ref="Source Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>float rawDistance = </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>int randomDistance = Random(FloatToInt(rawDistance));</Literal>
        </Line>
        <Line>
          <Literal>float distance = IntToFloat(randomDistance) + (rawDistance - FloatToInt(rawDistance));</Literal>
        </Line>
        <Line>
          <Literal>vector aPosition = GetPositionFromLocation(aLocation);</Literal>
        </Line>
        <Line>
          <Literal>object area = GetAreaFromLocation(aLocation);</Literal>
        </Line>
        <Line>
          <Literal>float facing = IntToFloat(Random(361));</Literal>
        </Line>
        <Line>
          <Literal>vector facingVector = VectorNormalize(AngleToVector(facing));</Literal>
        </Line>
        <Line>
          <Literal>aPosition = aPosition + facingVector*distance;</Literal>
        </Line>
        <Line>
          <Literal>location newLocation = Location(area, aPosition, facing);</Literal>
        </Line>
        <Line>
          <Literal>SetFacingPoint(GetPositionFromLocation(newLocation));</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ActionMoveToLocation(newLocation, </Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt; &lt;walk&gt;s &lt;Distance&gt; meters towards &lt;Location&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk</Name>
          
          <Labels/>
          <Types>
            <Type>walk_speed</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location moverLocation;</Literal>
        </Line>
        <Line>
          <Literal>vector moverPosition;</Literal>
        </Line>
        <Line>
          <Literal>float moverFacing;</Literal>
        </Line>
        <Line>
          <Literal>object moverArea;</Literal>
        </Line>
        <Line>
          <Literal>vector targetPosition;</Literal>
        </Line>
        <Line>
          <Literal>vector heading;</Literal>
        </Line>
        <Line>
          <Literal>moverLocation = GetLocation(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>moverPosition = GetPositionFromLocation(moverLocation);</Literal>
        </Line>
        <Line>
          <Literal>moverArea = GetAreaFromLocation(moverLocation);</Literal>
        </Line>
        <Line>
          <Literal>moverFacing = GetFacingFromLocation(moverLocation);</Literal>
        </Line>
        <Line>
          <Literal>targetPosition = GetPositionFromLocation(</Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>heading = Vector(targetPosition.x - moverPosition.x, targetPosition.y -   moverPosition.y, targetPosition.z - moverPosition.z);</Literal>
        </Line>
        <Line>
          <Literal>heading = VectorNormalize(heading);</Literal>
        </Line>
        <Line>
          <Literal>moverPosition = moverPosition + </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>*heading;</Literal>
        </Line>
        <Line>
          <Literal>moverLocation = Location(moverArea, moverPosition, moverFacing);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionMoveToLocation(moverLocation, </Literal>
          <Scope data="argument" ref="Lcoation">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Mover&gt; &lt;walk&gt;s &lt;Distance&gt; meters towards &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Mover</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>walk_speed</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location moverLocation;</Literal>
        </Line>
        <Line>
          <Literal>vector moverPosition;</Literal>
        </Line>
        <Line>
          <Literal>float moverFacing;</Literal>
        </Line>
        <Line>
          <Literal>object moverArea;</Literal>
        </Line>
        <Line>
          <Literal>vector targetPosition;</Literal>
        </Line>
        <Line>
          <Literal>vector heading;</Literal>
        </Line>
        <Line>
          <Literal>moverLocation = GetLocation(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>moverPosition = GetPositionFromLocation(moverLocation);</Literal>
        </Line>
        <Line>
          <Literal>moverArea = GetAreaFromLocation(moverLocation);</Literal>
        </Line>
        <Line>
          <Literal>moverFacing = GetFacingFromLocation(moverLocation);</Literal>
        </Line>
        <Line>
          <Literal>targetPosition = GetPositionFromLocation(GetLocation(</Literal>
          <Scope data="argument" ref="walk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
        <Line>
          <Literal>heading = Vector(targetPosition.x - moverPosition.x, targetPosition.y -   moverPosition.y, targetPosition.z - moverPosition.z);</Literal>
        </Line>
        <Line>
          <Literal>heading = VectorNormalize(heading);</Literal>
        </Line>
        <Line>
          <Literal>moverPosition = moverPosition + </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>*heading;</Literal>
        </Line>
        <Line>
          <Literal>moverLocation = Location(moverArea, moverPosition, moverFacing);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Mover">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionMoveToLocation(moverLocation, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Adjust &lt;Creature&gt;&apos;s alignment towards &lt;Alignment Type&gt; by &lt;Alignment Shift&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Alignment Type</Name>
          
          <Labels/>
          <Types>
            <Type>alignment</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Alignment Shift</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AdjustAlignment(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Alignment Type">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Alignment Shift">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Adjuster&gt; adjusts &lt;Creature&gt;&apos;s alignment towards &lt;Alignment Type&gt; by &lt;Alignment Shift&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Adjuster</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Alignment Type</Name>
          
          <Labels/>
          <Types>
            <Type>alignment</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Alignment Shift</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Adjuster">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(AdjustAlignment(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Alignment Type">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Alignment Shift">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Cancel the performing task after &lt;Delay&gt; seconds</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Delay</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>DelayCommand(</Literal>
          <Scope data="argument" ref="Delay">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SCEZ_Behaviour_CancelTaskOnTopQueue());</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>"i_se_behav"</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Clear all actions of &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ClearAllActions(TRUE));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--130 ScriptIts-->
    <ScriptIt>
<Name>&lt;Interactor&gt; interacts with &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Interactor</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Interactor">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionInteractObject(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Actor&gt; knows &lt;Partner&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Actor</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Partner</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Literal></Literal>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Actor&gt; knows &lt;Partner&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Actor</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Partner</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <!--  todo finish code -->
	<Code>
		<Line>
        <Literal></Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Resurrect &lt;PC&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>PC</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>object oPlayer = </Literal>
          <Scope data="argument" ref="PC">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>effect eVisual = EffectVisualEffect(VFX_IMP_RESTORATION);</Literal>
        </Line>
        <Line>
          <Literal>effect eBad = GetFirstEffect(oPlayer);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT,EffectResurrection(),oPlayer);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT,EffectHeal(GetMaxHitPoints(oPlayer)), oPlayer);</Literal>
        </Line>
        <Line>
          <Literal>while(GetIsEffectValid(eBad)){</Literal>
        </Line>
        <Line>
          <Literal>if (GetEffectType(eBad) == EFFECT_TYPE_ABILITY_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>        	GetEffectType(eBad) == EFFECT_TYPE_AC_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_ATTACK_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_DAMAGE_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_DAMAGE_IMMUNITY_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_SAVING_THROW_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_SPELL_RESISTANCE_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_SKILL_DECREASE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_BLINDNESS ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_DEAF ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_PARALYZE ||</Literal>
        </Line>
        <Line>
          <Literal>                GetEffectType(eBad) == EFFECT_TYPE_NEGATIVELEVEL)</Literal>
        </Line>
        <Line>
          <Literal>   {</Literal>
        </Line>
        <Line>
          <Literal>                    //Remove effect if it is negative.</Literal>
        </Line>
        <Line>
          <Literal>                    RemoveEffect(oPlayer, eBad);</Literal>
        </Line>
        <Line>
          <Literal>        }</Literal>
        </Line>
        <Line>
          <Literal>		eBad = GetNextEffect(oPlayer);</Literal>
        </Line>
        <Line>
          <Literal>SignalEvent(oPlayer, EventSpellCastAt(OBJECT_SELF, SPELL_RESTORATION, FALSE));</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, eVisual, oPlayer);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Remove from &lt;Creature/Placeable&gt;&lt;Immunity Percentage&gt; % damage immunity to &lt;Immunity Type&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature/Placeable</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Immunity Percentage</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Immunity Type</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>effect eImmunity = EffectDamageImmunityDecrease(</Literal>
          <Scope data="argument" ref="Immunity Percentage">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Immunity Type">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, eImmunity, </Literal>
          <Scope data="argument" ref="Creature/Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Sleepy&gt; rests</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Sleepy</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Sleepy">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionRest());</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Reveal &lt;Area&gt; for &lt;Player&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Area</Name>
          
          <Labels/>
          <Types>
            <Type>area</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Player</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ExploreAreaForPlayer(</Literal>
          <Scope data="argument" ref="Area">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Revealer&gt; reveals &lt;Area&gt; for &lt;Player&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Revealer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Area</Name>
          
          <Labels/>
          <Types>
            <Type>area</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Player</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Revealer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ExploreAreaForPlayer(</Literal>
          <Scope data="argument" ref="Area">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Target&gt; &lt;refuse&gt;s action commands</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>refuse</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SetCommandable(</Literal>
          <Scope data="argument" ref="refuse">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Target&gt; &lt;refuse&gt;s action commands</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>refuse</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[139]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--140 ScriptIts-->
    <ScriptIt>
<Name>&lt;Creature&gt; sits on &lt;Target&gt; (Note: No (TODO) actions can follow)</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionSit(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Waiter&gt; waits for &lt;Waiting Time&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Waiter</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Waiting Time</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Waiter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionWait(</Literal>
          <Scope data="argument" ref="Waiting Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Destroy &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>DestroyObject(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Destroyer&gt; destroys &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Destroyer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Destroyer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DestroyObject(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Destroy &lt;Target&gt; with its death animation</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>effect death = EffectDeath(TRUE);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, death, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Destroyer&gt; destroys &lt;Target&gt; with its death animation</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Destroyer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>effect death = EffectDeath(TRUE);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Destroyer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_INSTANT, death, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;Target&gt; as &lt;Undestroyable&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Undestroyable</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SetIsDestroyable(</Literal>
          <Scope data="argument" ref="Undestroyable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Create &apos;label&apos; from &lt;Item Blueprint&gt; at &lt;Location&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>item</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Item Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>return CreateObject(OBJECT_TYPE_ITEM, GetResRef( </Literal>
          <Scope data="argument" ref="Item Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Creator&gt; creates an item from &lt;Item Blueprint&gt; at &lt;Location&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SE_AUX_CreateObject(OBJECT_TYPE_ITEM, GetResRef( </Literal>
          <Scope data="argument" ref="Item Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Create &apos;label&apos; from &lt;Item Blueprint&gt; and place it in &lt;Container&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>item</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Item Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Container</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
       
		<Line>
          <Literal>return CreateItemOnObject(GetResRef(</Literal>
          <Scope data="argument" ref="Item Blueprint">
            <Fragment data="name"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Container">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--150 ScriptIts-->
    <ScriptIt>
<Name>&lt;Creator&gt; creates an item from &lt;Item Blueprint&gt; and places it in &lt;Container&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Container</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SE_AUX_CreateItemOnObject( GetResRef(</Literal>
          <Scope data="argument" ref="Item Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Container">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Create &apos;label&apos; from &lt;Item Blueprint&gt; near &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>item</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Item Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>return CreateObject(OBJECT_TYPE_ITEM, GetResRef( </Literal>
          <Scope data="argument" ref="Item Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), loc);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Creator&gt; creates an item from &lt;Item Blueprint&gt; near &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SE_AUX_CreateObject(OBJECT_TYPE_ITEM, GetResRef( </Literal>
          <Scope data="argument" ref="Item Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), loc)));</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Create &apos;label&apos; from &lt;Placeable Blueprint&gt; at &lt;Location&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>placeable</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Placeable Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>return CreateObject(OBJECT_TYPE_PLACEABLE, GetResRef( </Literal>
          <Scope data="argument" ref="Placeable Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Creator&gt; creates a placeable from &lt;Placeable Blueprint&gt; at &lt;Location&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SE_AUX_CreateObject(OBJECT_TYPE_PLACEABLE, GetResRef( </Literal>
          <Scope data="argument" ref="Placeable Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Create &apos;label&apos; from &lt;Placeable Blueprint&gt; near &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>placeable</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Placeable Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>return CreateObject(OBJECT_TYPE_PLACEABLE,GetResRef( </Literal>
          <Scope data="argument" ref="Placeable Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), loc);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Creator&gt; creates a placeable from &lt;Placeable Blueprint&gt; near &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SE_AUX_CreateObject(OBJECT_TYPE_ITEM,GetResRef( </Literal>
          <Scope data="argument" ref="Placeable Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), loc)));</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Give monk treasure to &lt;Monk&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Monk</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>GiveMonkTreasure(</Literal>
          <Scope data="argument" ref="Monk">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Spawn &apos;label&apos; from &lt;Creature Blueprint&gt; at &lt;Location&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>return CreateObject(OBJECT_TYPE_CREATURE, </Literal>
          <Scope data="argument" ref="Creature Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, loc);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Creator&gt; spawns a creature from &lt;Creature Blueprint&gt; at &lt;Location&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Location</Name>
          
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Location">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SE_AUX_CreateObject(OBJECT_TYPE_CREATURE, </Literal>
          <Scope data="argument" ref="Creature Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, loc)));</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--160 ScriptIts-->
    <ScriptIt>
<Name>Spawn &apos;label&apos; from &lt;Creature Blueprint&gt; near &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>location loc = GetLocation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>return CreateObject(OBJECT_TYPE_CREATURE, </Literal>
          <Scope data="argument" ref="Creature Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, loc);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Creator&gt; spawns a creature from &lt;Creature Blueprint&gt; near &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Literal></Literal>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set immortal property of &lt;Creature&gt; to &lt;Immortal&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Immortal</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetImmortal(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Immortal">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Property Setter&gt; sets Immortal property of &lt;Creature&gt; to &lt;Immortal&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Property Setter</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Immortal</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Property Setter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetImmortal(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Immortal">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set the plot property of &lt;Object&gt; to &lt;Plot&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Plot</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetPlotFlag(</Literal>
          <Scope data="argument" ref="Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Plot">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Property Setter&gt; sets the plot property of &lt;Object&gt; to &lt;Plot&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Property Setter</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Plot</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Property Setter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetPlotFlag(</Literal>
          <Scope data="argument" ref="Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Plot">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Unlock&gt; &lt;Door&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Unlock</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetLocked(</Literal>
          <Scope data="argument" ref="Unlock">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;User&gt; &lt;unlock&gt;s &lt;Door&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>unlock</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetLocked(</Literal>
          <Scope data="argument" ref="unlock">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;User&gt; &lt;unlock&gt;s &lt;Door&gt; after a delay of &lt;Delay&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>unlock</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Delay</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>DelayCommand(</Literal>
          <Scope data="argument" ref="Delay">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetLocked(</Literal>
          <Scope data="argument" ref="unlock">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>))));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;User&gt; &lt;unlock&gt;s &lt;Door&gt; using the Open Locks skill</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>unlock</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>if (</Literal>
          <Scope data="argument" ref="Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)</Literal>
        </Line>
        <Line>
          <Literal>	AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionLockObject(</Literal>
          <Scope data="argument" ref="Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
        <Line>
          <Literal>  else</Literal>
        </Line>
        <Line>
          <Literal>	AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionUnlockObject(</Literal>
          <Scope data="argument" ref="Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--170 ScriptIts-->
    <ScriptIt>
<Name>&lt;Unlock&gt; &lt;Placeable&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Unlock</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetLocked(</Literal>
          <Scope data="argument" ref="Unlock">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;User&gt; &lt;unlock&gt;s &lt;Placeable&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>unlock</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(</Literal>
          <Scope data="argument" ref="unlock">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;User&gt; &lt;unlock&gt;s &lt;Placeable&gt; using the Open Locks skill</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>unlock</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Placeable</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>if (</Literal>
          <Scope data="argument" ref="Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)</Literal>
        </Line>
        <Line>
          <Literal>	AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionLockObject(</Literal>
          <Scope data="argument" ref="unlock">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
        <Line>
          <Literal>else</Literal>
        </Line>
        <Line>
          <Literal>	AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionUnlockObject(</Literal>
          <Scope data="argument" ref="unlock">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;User&gt; &lt;close&gt;s &lt;Door&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>close</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>if (</Literal>
          <Scope data="argument" ref="Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)</Literal>
        </Line>
        <Line>
          <Literal>    AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionOpenDoor(</Literal>
          <Scope data="argument" ref="close">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
        <Line>
          <Literal>  else</Literal>
        </Line>
        <Line>
          <Literal>    AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionCloseDoor(</Literal>
          <Scope data="argument" ref="close">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;User&gt; &lt;close&gt;s &lt;Door&gt; after a delay of &lt;Delay&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>User</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>close</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Delay</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>if (param_3)</Literal>
        </Line>
        <Line>
          <Literal>	DelayCommand(</Literal>
          <Scope data="argument" ref="Delay">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionOpenDoor(</Literal>
          <Scope data="argument" ref="close">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
        <Line>
          <Literal>	else</Literal>
        </Line>
        <Line>
          <Literal>	DelayCommand(</Literal>
          <Scope data="argument" ref="Delay">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, AssignCommand(</Literal>
          <Scope data="argument" ref="User">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionCloseDoor(</Literal>
          <Scope data="argument" ref="close">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Disable a trap on &lt;Trapped Door&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Trapped Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetTrapDisabled(</Literal>
          <Scope data="argument" ref="Trapped Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Disarmer&gt; disables a trap on &lt;Trapped Door&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Disarmer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Trapped Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Disarner">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetTrapDisabled(</Literal>
          <Scope data="argument" ref="Trapped Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Disable a trap on &lt;Trapped Placeable&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Trapped Placeable</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetTrapDisabled(</Literal>
          <Scope data="argument" ref="Trapped Placeable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Disarmer&gt; disables a trap on &lt;Trapped Door&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Disarmer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Trapped Door</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[177]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Creature&gt; performs &lt;Door Action&gt; on &lt;The Door&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Door Action</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DoDoorAction(</Literal>
          <Scope data="argument" ref="Door Action">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--180 ScriptIts-->
    <ScriptIt>
<Name>Attack &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ActionAttack(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Attacker&gt; attacks &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Attacker</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Attacker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionAttack(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Deal &lt;Amount&gt; points of &lt;Damage Type&gt; damage to &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Damage Type</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>effect dEff = EffectDamage(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Damage Type">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, dEff, </Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Damager&gt; deals &lt;Amount&gt; points of &lt;Damage Type&gt; to &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Damager</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Damage Type</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>effect dEff = EffectDamage(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Damage Type">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Damager">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_INSTANT, dEff, </Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Creature&gt; determines its combat round</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DetermineCombatRound()));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Heal &lt;Target&gt; for &lt;Amount&gt; hit points</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>effect hEff = EffectHeal(</Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, hEff, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Healer&gt; Heals &lt;Target&gt; for &lt;Amount&gt; hit points</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Healer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>effect hEff = EffectHeal(</Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Healer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ApplyEffectToObject(DURATION_TYPE_INSTANT, hEff, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Deactivate&gt; &lt;Target&gt;&apos;s &lt;Action Mode&gt; mode</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Deactivate</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Action Mode</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetActionMode(</Literal>
          <Scope data="argument" ref="Deactivate">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Action Mode">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Action Mode Settler&gt; &lt;deactivate&gt;s &lt;Target&gt;&apos;s &lt;Action Mode&gt; mode</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Action Mode Settler</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>deactivate</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Action Mode</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Action Mode Setter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SetActionMode(</Literal>
          <Scope data="argument" ref="deactivate">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Action Mode">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Surrenderer&gt; surrenders to its enemies</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Surrenderer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Surrenderer">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SurrenderToEnemies());</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--190 ScriptIts-->
    <ScriptIt>
<Name>&lt;Surrenderer&gt; surrenders to its enemies</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Surrenderer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[190]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Speaker&gt; plays voice chat &lt;Voice Chat&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Speaker</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Voice Chat</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Speaker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(PlayVoiceChat(</Literal>
          <Scope data="argument" ref="Voice Chat">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Speaker&gt; speaks a one-liner conversation from &lt;Conversation&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Speaker</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Conversation</Name>
          
          <Labels/>
          <Types>
            <Type>dialogue</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Speaker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SpeakOneLinerConversation(</Literal>
          <Scope data="argument" ref="Conversation">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Speaker&gt; speaks a string with reference number &lt;String Reference Number&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Speaker</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>String Reference Number</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Speaker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionSpeakStringByStrRef(</Literal>
          <Scope data="argument" ref="String Reference Number">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Record &lt;Creature&gt;&apos;s current appearance type</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>object aCreature = </Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>SetLocalInt(aCreature, &quot;SE_AUX_APPEARANCE_TYPE&quot;, GetAppearanceType(aCreature));</Literal>
        </Line>
        <Line>
          <Literal>SetLocalInt(aCreature, &quot;SE_AUX_APPEARANCE_TYPE_SET&quot;, 1);</Literal>
        </Line>
      </Code>
					<Includes>
						<Include>i_se_aux</Include>
					</Includes>
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;Creature&gt;&apos;s appearance to &lt;Appearance&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Appearance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetCreatureAppearanceType(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Appearance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Appearance Setter&gt; sets &lt;Creature&gt;&apos;s appearance to &lt;Appearance&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Appearance Setter</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Appearance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Appearance Setter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SetCreatureAppearanceType(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Appearance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;Creature&gt;&apos;s portrait to &lt;Portrait Reference&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Portrait Reference</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetPortraitResRef(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Portrait Reference">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;Creature&gt;&apos;s &lt;Body Part&gt; to model number &lt;Model Number&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Body Part</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Model Number</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetCreatureBodyPart(</Literal>
          <Scope data="argument" ref="Body Part">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Model Number">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Model Number">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Apply cutscene ghost effect to &lt;The Target&gt; permanently</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneGhost(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--200 ScriptIts-->
    <ScriptIt>
<Name>Apply cutscene ghost effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Duration</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneGhost(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a cutscene ghost effect to &lt;The Target&gt; permanently</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneGhost(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a cutscene ghost effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Duration</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneGhost(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Apply cutscene immobilize effect to &lt;The Target&gt; permanently</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneImmobilize(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a cutscene immobilize to &lt;The Target&gt; permanently</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneImmobilize(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a cutscene immobilize effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Duration</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneImmobilize(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Apply cutscene paralyze effect to &lt;The Target&gt; permanently</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneParalyze(),</Literal>
          <Scope data="argument" ref=" The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Apply cutscene paralyze effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Duration</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneParalyze(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a cutscene paralyze effect to &lt;The Target&gt; permanently</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneParalyze(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a cutscene paralyze effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Duration</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneParalyze(), </Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)))</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--210 ScriptIts-->
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a store the PC&apos;s camera facing</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(StoreCameraFacing()));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a restores the PC&apos;s camera facing</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(RestoreCameraFacing()));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a fade from black on &lt;The Target&gt;&apos;s screen at &lt;Fade Speed&gt; speed</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Fade Speed</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(FadeFromBlack(</Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Fade Speed">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)))</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a fade to black on &lt;The Target&gt;&apos;s screen at &lt;Fade Speed&gt; speed</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Fade Speed</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(FadeToBlack(</Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Fade Speed">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)))</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a set black screen on &lt;The Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(BlackScreen(</Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a set height of &lt;Target Camera Owner&gt;&apos;s camera to &lt;Height&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target Camera Owner</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Height</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetCameraHeight(</Literal>
          <Scope data="argument" ref="Target Camera Owner">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Height">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;Target PC&gt;&apos;s camera mode to &lt;Camera Mode&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target PC</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Camera Mode</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetCameraMode(</Literal>
          <Scope data="argument" ref="Target PC">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Camera Mode">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a set &lt;Target PC&gt;&apos;s camera mode to &lt;Camera Mode&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>void</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target PC</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Camera Mode</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetCameraMode(</Literal>
          <Scope data="argument" ref="Target PC">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Camera Mode">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a set the cutscene movement rate of &lt;The Camera Owner&gt; to &lt;Movement speed&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Camera Owner</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Movement speed</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetCutsceneCameraMoveRate(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Camera Owner">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a set cutscene mode of &lt;The Creature&gt; to &lt;Cutscene Mode&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Cutscene Mode</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetCutsceneMode(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Cutscene Mode">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--220 ScriptIts-->
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a stop all fade effects on &lt;The Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(StopFade(</Literal>
          <Scope data="argument" ref="The Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set the PC&apos;s day/night cycle to night in &lt;Transition Time&gt; seconds</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Transition Time</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>if( GetIsDay() == TRUE ) {</Literal>
        </Line>
        <Line>
          <Literal>	DayToNight(GetFirstPC(), </Literal>
          <Scope data="argument" ref="Transition Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>}</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Cycle Setter&gt; sets the PC&apos;s day/night cycle to night in &lt;Transition Time&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Cycle Setter</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Transition Time</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>if( GetIsDay() == TRUE ) {</Literal>
        </Line>
        <Line>
          <Literal>	AssignCommand(</Literal>
          <Scope data="argument" ref="Cycle Setter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(DayToNight(GetFirstPC(), </Literal>
          <Scope data="argument" ref="Transition Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
        <Line>
          <Literal>}</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set the PC&apos;s day/night cycle to day in &lt;Transition Time&gt; seconds</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Transition Time</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>  if( GetIsDay() == FALSE ) {</Literal>
        </Line>
        <Line>
          <Literal>    NightToDay(GetFirstPC(), </Literal>
          <Scope data="argument" ref="Transition Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Cycle Setter&gt; sets the PC&apos;s day/night cycle to day in &lt;Transition Time&gt; seconds</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Cycle Setter</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Transition Time</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Cycle Setter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(NightToDay(GetFirstPC(), </Literal>
          <Scope data="argument" ref="Transition Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;Area&gt;&apos;s sky to &lt;Sky&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Area</Name>
          
          <Labels/>
          <Types>
            <Type>area</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Sky</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetSkyBox(</Literal>
          <Scope data="argument" ref="Area">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Sky">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set the weather for &lt;Target Area&gt; to &lt;Type of Weather&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target Area</Name>
          
          <Labels/>
          <Types>
            <Type>area</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Type of Weather</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetWeather(</Literal>
          <Scope data="argument" ref="Target Area">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Type of Weather">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Turn &lt;Light Source&gt; &lt;off&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Light Source</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>off</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>  int anim;</Literal>
        </Line>
        <Line/>
        <Line>
          <Literal>  if( </Literal>
          <Scope data="argument" ref="off">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal> == TRUE ) {</Literal>
        </Line>
        <Line>
          <Literal>    anim = ANIMATION_PLACEABLE_ACTIVATE;</Literal>
        </Line>
        <Line>
          <Literal>  } </Literal>
        </Line>
        <Line>
          <Literal>  else {</Literal>
        </Line>
        <Line>
          <Literal>    anim = ANIMATION_PLACEABLE_DEACTIVATE;</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
        <Line>
          <Literal>AssignCommand(param_1_object, PlayAnimation(anim));</Literal>
        </Line>
        <Line>
          <Literal>SetPlaceableIllumination(</Literal>
          <Scope data="argument" ref="Light Source">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="off">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>RecomputeStaticLighting(GetArea(</Literal>
          <Scope data="argument" ref="Light Source">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Adjust &lt;Target&gt;&apos;s reputation with respect to &lt;Faction Member&gt;&apos;s faction by &lt;Change&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Faction Member</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Change</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AdjustReputation(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Faction Member">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Change">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;The Enemy&gt; as an enemy of &lt;The Creature&gt; for &lt;Duration&gt; seconds</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Enemy</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetIsTemporaryEnemy(</Literal>
          <Scope data="argument" ref="The Enemy">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, FALSE, </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--230 ScriptIts-->
    <ScriptIt>
<Name>End the module with movie &lt;End Movie&gt; after &lt;Delay Time&gt; seconds</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>End Movie</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Delay Time</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>DelayCommand(</Literal>
          <Scope data="argument" ref="End Movie">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, EndGame(</Literal>
          <Scope data="argument" ref="Delay Time">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Assign &lt;Object&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Label</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line reference="/APIDictionary/Effects/ScriptIt[64]/CodeBlocks/CodeBlock/Code/Line"/>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Destroy &lt;Target&gt; in &lt;Container&gt;&apos;s inventory</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Container</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>object InvItem = GetItemPossessedBy(</Literal>
          <Scope data="argument" ref="Container">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, GetTag(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
        <Line>
          <Literal> if(GetIsObjectValid(InvItem))</Literal>
        </Line>
        <Line>
          <Literal>  {</Literal>
        </Line>
        <Line>
          <Literal>    DestroyObject(InvItem);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Remove a spell effect &lt;Effect Type&gt; from &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Effect Type</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>int effectRemoved = </Literal>
          <Scope data="argument" ref="Effect Type">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>object target = </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>effect eLoop = GetFirstEffect(target);</Literal>
        </Line>
        <Line/>
        <Line>
          <Literal>  while (GetIsEffectValid(eLoop)){</Literal>
        </Line>
        <Line>
          <Literal>    if (GetEffectType(eLoop) == effectRemoved){</Literal>
        </Line>
        <Line>
          <Literal>          RemoveEffect(target, eLoop);</Literal>
        </Line>
        <Line>
          <Literal>    }</Literal>
        </Line>
        <Line>
          <Literal>    eLoop=GetNextEffect(target);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Make &lt;Creature&gt; drunk losing &lt;Intelligence Lost&gt; points for &lt;Duration&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Intelligence Lost</Name>
          
          <Labels/>
          <Types>
            <Type>void</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Duration</Name>
          
          <Labels/>
          <Types>
            <Type>void</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>if (Random(100) + 1 &lt; 40)</Literal>
        </Line>
        <Line>
          <Literal>        AssignCommand(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionPlayAnimation(ANIMATION_LOOPING_TALK_LAUGHING));</Literal>
        </Line>
        <Line>
          <Literal>    else</Literal>
        </Line>
        <Line>
          <Literal>        AssignCommand(</Literal>
          <Scope data="argument" ref="Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionPlayAnimation(ANIMATION_LOOPING_PAUSE_DRUNK));</Literal>
        </Line>
        <Line/>
        <Line>
          <Literal>effect eDumb = EffectAbilityDecrease(ABILITY_INTELLIGENCE, </Literal>
          <Scope data="argument" ref="Intelligence Lost">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>    ApplyEffectToObject(DURATION_TYPE_TEMPORARY, eDumb, param_1_object, </Literal>
          <Scope data="argument" ref="Duration">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Starter&gt; starts &lt;Conversation&gt; with &lt;Partner&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Starter</Name>
          
          <Labels/>
          <Types>
            <Type>void</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Conversation</Name>
          
          <Labels/>
          <Types>
            <Type>dialogue</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Partner</Name>
          
          <Labels/>
          <Types>
            <Type>void</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Starter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionStartConversation(</Literal>
          <Scope data="argument" ref="Conversation">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Starter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Conversation">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Partner">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>) );</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set the PC&apos;s camera facing to be &lt;Direction&gt; &lt;Distance&gt; at &lt;Pitch&gt; at &lt;Speed&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Direction</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Pitch</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Speed</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetCameraFacing(</Literal>
          <Scope data="argument" ref="Direction">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Pitch">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Speed">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; triggers a set PC&apos;s camera facing to be &lt;Direction&gt; &lt;Distance&gt; at &lt;Pitch&gt; at &lt;Speed&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Direction</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Pitch</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Speed</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionDoCommand(SetCameraFacing(</Literal>
          <Scope data="argument" ref="Direction">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Pitch">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Speed">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Start new module &lt;Module Name&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Module Name</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>StartNewModule(</Literal>
          <Scope data="argument" ref="Module Name">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Assign &lt;Amount&gt; GP to &lt;Recipient&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Recipient</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, GiveGoldToCreature(</Literal>
          <Scope data="argument" ref="Recipient">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--240 ScriptIts-->
    <ScriptIt>
<Name>Assign &lt;Amount&gt; XP to &lt;Recipient&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Recipient</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>GiveXPToCreature(</Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Recipient">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Reward &lt;Percent&gt; % XP to &lt;Recipient&gt; for a &lt;quest&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Percent</Name>
          
          <Labels/>
          <Types>
            <Type>void</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Recipient</Name>
          
          <Labels/>
          <Types>
            <Type>void</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>quest</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>RewardXP(</Literal>
          <Scope data="argument" ref="quest">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Percent">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Recipient">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;Recipient&gt;&apos;s XP to &lt;XP Amount&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Recipient</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>XP Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetXP(</Literal>
          <Scope data="argument" ref="Recipient">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="XP Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Take &lt;Amount&gt; GP from &lt;Payer&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Payer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, TakeGoldFromCreature(</Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, TRUE));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Take all gold from &lt;Payer&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Payer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, TakeGoldFromCreature(GetGold(</Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>), </Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, TRUE));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Take &lt;Amount&gt; XP from &lt;Payer&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Amount</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Payer</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetXP(</Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, GetXP(</Literal>
          <Scope data="argument" ref="Player">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>) - </Literal>
          <Scope data="argument" ref="Amount">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Make &lt;The Henchmen&gt; become the henchman of &lt;The PC&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Henchmen</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The PC</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AddHenchman(</Literal>
          <Scope data="argument" ref="The Henchmen">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The PC">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Follower&gt; follows &lt;Followed&gt; at distance &lt;Distance&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Follower</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Followed</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Distance</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Follower">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionForceFollowObject(</Literal>
          <Scope data="argument" ref="Followed">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Distance">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Make &lt;The Henchman&gt; stop being the henchman of &lt;The PC&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Henchman</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The PC</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>RemoveHenchman(</Literal>
          <Scope data="argument" ref="The Henchman">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The PC">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set the max number of henchmen to be &lt;Number of Henchmen&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Number of Henchmen</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetMaxHenchmen(</Literal>
          <Scope data="argument" ref="Number of Henchmen">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--250 ScriptIts-->
    <ScriptIt>
<Name>Destroy &lt;The Number&gt; items of type &lt;The Item Blueprint&gt; in the inventory of &lt;The Container&gt;, &lt;not including its equipped items&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Number</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Item Blueprint</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Container</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>not including its equipped items</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>int left = </Literal>
          <Scope data="argument" ref="The Container">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>object owner = </Literal>
          <Scope data="argument" ref="The Number">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>string resref = </Literal>
          <Scope data="argument" ref="The Item Blueprint">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>object oItem = GetFirstItemInInventory(owner);</Literal>
        </Line>
        <Line>
          <Literal>int stacksize;</Literal>
        </Line>
        <Line>
          <Literal>int i;</Literal>
        </Line>
        <Line/>
        <Line>
          <Literal>  while( GetIsObjectValid(oItem) ) {</Literal>
        </Line>
        <Line>
          <Literal>        if( GetResRef(oItem) == resref ) {</Literal>
        </Line>
        <Line>
          <Literal>            stacksize = GetItemStackSize(oItem);</Literal>
        </Line>
        <Line>
          <Literal>            if(  stacksize &lt;= left ) {</Literal>
        </Line>
        <Line>
          <Literal>                DestroyObject(oItem,0.1f);</Literal>
        </Line>
        <Line>
          <Literal>                left -= stacksize;</Literal>
        </Line>
        <Line>
          <Literal>            } else {</Literal>
        </Line>
        <Line>
          <Literal>                SetItemStackSize(oItem, stacksize - left);</Literal>
        </Line>
        <Line>
          <Literal>                return;</Literal>
        </Line>
        <Line>
          <Literal>            }</Literal>
        </Line>
        <Line>
          <Literal>        }</Literal>
        </Line>
        <Line>
          <Literal>        oItem = GetNextItemInInventory(owner);</Literal>
        </Line>
        <Line>
          <Literal>    }</Literal>
        </Line>
        <Line/>
        <Line>
          <Literal> if(</Literal>
          <Scope data="argument" ref="not including its equipped items">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>)</Literal>
        </Line>
        <Line>
          <Literal>    {</Literal>
        </Line>
        <Line>
          <Literal>	for(i = 0; i &lt; NUM_INVENTORY_SLOTS; i ++)</Literal>
        </Line>
        <Line>
          <Literal>	{</Literal>
        </Line>
        <Line>
          <Literal>	    oItem = GetItemInSlot(i, owner);</Literal>
        </Line>
        <Line>
          <Literal>	    </Literal>
        </Line>
        <Line>
          <Literal>	    if(	GetIsObjectValid(oItem) &amp;&amp;</Literal>
        </Line>
        <Line>
          <Literal>		GetResRef(oItem) == resref )</Literal>
        </Line>
        <Line>
          <Literal>	    {</Literal>
        </Line>
        <Line>
          <Literal>		stacksize = GetItemStackSize(oItem);</Literal>
        </Line>
        <Line>
          <Literal>		if(stacksize &lt;= left)</Literal>
        </Line>
        <Line>
          <Literal>		{</Literal>
        </Line>
        <Line>
          <Literal>		    DestroyObject(oItem,0.1f);</Literal>
        </Line>
        <Line>
          <Literal>		    left -= stacksize;</Literal>
        </Line>
        <Line>
          <Literal>		}</Literal>
        </Line>
        <Line>
          <Literal>		else</Literal>
        </Line>
        <Line>
          <Literal>		{</Literal>
        </Line>
        <Line>
          <Literal>		    SetItemStackSize(oItem, stacksize - left);</Literal>
        </Line>
        <Line>
          <Literal>		    return;</Literal>
        </Line>
        <Line>
          <Literal>		}</Literal>
        </Line>
        <Line>
          <Literal>	    }</Literal>
        </Line>
        <Line>
          <Literal>	}</Literal>
        </Line>
        <Line>
          <Literal>    }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Equipping creature&gt; equips &lt;Equipment&gt; on &lt;Slot&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Equipping creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Equipment</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Slot</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Equipping creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionEquipItem(</Literal>
          <Scope data="argument" ref="Equipment">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Slot">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Equipping creature&gt; equips its most effective melee weapon against &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Equipping creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal> AssignCommand(</Literal>
          <Scope data="argument" ref="Equipping Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionEquipMostDamagingMelee(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt visible="true">
      <Name>&lt;Equipping creature&gt; equips its most effective armor</Name>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Equipping creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Equipping creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionEquipMostEffectiveArmor());</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt>
<Name>&lt;Equipping creature&gt; equips its most effective ranged weapon against &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Equipping creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Equipping creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionEquipMostDamagingRanged(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Equipping creature&gt; equips its most effective weapons against &lt;Target&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Equipping creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Equipping Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, EquipAppropriateWeapons(</Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Giver&gt; gives &lt;Item&gt; to &lt;Receiver&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Giver</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Receiver</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Giver">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionGiveItem(</Literal>
          <Scope data="argument" ref="Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Receiver">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Picker&gt; picks up &lt;Item&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Picker</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Picker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionPickUpItem(</Literal>
          <Scope data="argument" ref="Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Dropper&gt; puts down &lt;Item&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Dropper</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Dropper">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionPutDownItem(</Literal>
          <Scope data="argument" ref="Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;The Item&gt;&apos;s droppable property to &lt;Droppable&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Droppable</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetDroppableFlag(</Literal>
          <Scope data="argument" ref="The Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Droppable">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--260 ScriptIts-->
    <ScriptIt>
<Name>Set the stack size of &lt;The Item&gt; to &lt;The Stack Size&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Stack Size</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetItemStackSize(</Literal>
          <Scope data="argument" ref="The Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="The Stack Size">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Set &lt;The Item&gt;&apos;s charges to &lt;Charges&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Charges</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>SetItemCharges(</Literal>
          <Scope data="argument" ref="The Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Charges">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Activator&gt; sets &lt;The Item&gt;&apos;s charges to &lt;Charges&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Activator</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Charges</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Activator">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, SetItemCharges(</Literal>
          <Scope data="argument" ref="The Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Charges">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;The Taker&gt; takes &lt;Item&gt; from &lt;Loser&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Taker</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item</Name>
          
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Loser</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="The Taker">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionTakeItem(</Literal>
          <Scope data="argument" ref="Item">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Loser">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;Unequipping creature&gt; unequips &lt;Equipment&gt;</Name>
<Labels>
        <Label>TODO</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Unequipping creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Equipment</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>AssignCommand(</Literal>
          <Scope data="argument" ref="Unequipping creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionUnequipItem(</Literal>
          <Scope data="argument" ref="Equipment">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;deactivate&gt; all encounters with same tag as &lt;The Encounter&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>deactivate</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Encounter</Name>
          
          <Labels/>
          <Types>
            <Type>encounter</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>int nth = 0;</Literal>
        </Line>
        <Line>
          <Literal>string tag = GetTag(</Literal>
          <Scope data="argument" ref="Deactivate">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>object anEncounter = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>while (GetIsObjectValid(anEncounter))</Literal>
        </Line>
        <Line>
          <Literal>{</Literal>
        </Line>
        <Line>
          <Literal>	SetEncounterActive(</Literal>
          <Scope data="argument" ref="The Encounter">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, anEncounter);</Literal>
        </Line>
        <Line>
          <Literal>	nth++;</Literal>
        </Line>
        <Line>
          <Literal>	anEncounter = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>}</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Destroy all equipped items of &lt;The Creature&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Creature</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>int nSlot;</Literal>
        </Line>
        <Line>
          <Literal>object oItem;</Literal>
        </Line>
        <Line>
          <Literal>  for(nSlot = 0; nSlot &lt; NUM_INVENTORY_SLOTS; nSlot++){</Literal>
        </Line>
        <Line>
          <Literal>      oItem = GetItemInSlot(nSlot, </Literal>
          <Scope data="argument" ref="The Creature">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);      </Literal>
        </Line>
        <Line>
          <Literal>      DestroyObject(oItem, 0.1f);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Destroy all objects with same tag as &lt;The Object&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>  int nth = 0;</Literal>
        </Line>
        <Line>
          <Literal>  string tag = GetTag(</Literal>
          <Scope data="argument" ref="The Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>  object anObject = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>  while (GetIsObjectValid(anObject) &amp;&amp; ! GetIsPC(anObject))</Literal>
        </Line>
        <Line>
          <Literal>  {</Literal>
        </Line>
        <Line>
          <Literal>    SetPlotFlag(anObject, FALSE);</Literal>
        </Line>
        <Line>
          <Literal>    DestroyObject(anObject);</Literal>
        </Line>
        <Line>
          <Literal>    nth++;</Literal>
        </Line>
        <Line>
          <Literal>    anObject = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Destroy all objects in the inventory of &lt;The Object&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>object oItem = GetFirstItemInInventory(</Literal>
          <Scope data="argument" ref="The Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>  while (GetIsObjectValid(oItem) == TRUE)</Literal>
        </Line>
        <Line>
          <Literal>  {</Literal>
        </Line>
        <Line>
          <Literal>    DestroyObject(oItem, 0.1f);</Literal>
        </Line>
        <Line>
          <Literal>    oItem = GetNextItemInInventory(</Literal>
          <Scope data="argument" ref="The Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Apply the death effect to all creatures of racial type &lt;Racial Type&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Racial Type</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Literal></Literal>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt><!--270 ScriptIts-->
    <ScriptIt>
<Name>Apply the death effect to all objects with the same tag as &lt;The Object&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>  int nth = 0;</Literal>
        </Line>
        <Line>
          <Literal>  string tag = GetTag(</Literal>
          <Scope data="argument" ref="The Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>  effect eDeath = EffectDeath(FALSE, FALSE);</Literal>
        </Line>
        <Line>
          <Literal>  object anObject = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>  while (GetIsObjectValid(anObject) &amp;&amp; ! GetIsPC(anObject))</Literal>
        </Line>
        <Line>
          <Literal>  {</Literal>
        </Line>
        <Line>
          <Literal>    SetPlotFlag(anObject, FALSE);</Literal>
        </Line>
        <Line>
          <Literal>    ApplyEffectToObject(DURATION_TYPE_INSTANT, eDeath, anObject);</Literal>
        </Line>
        <Line>
          <Literal>    nth++;</Literal>
        </Line>
        <Line>
          <Literal>    anObject = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Move all items from &lt;The Object&gt;&apos;s inventory to &lt;Container&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Object</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Container</Name>
          
          <Labels/>
          <Types>
            <Type>placeable</Type>
            <Type>creature</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>  object oitem = GetFirstItemInInventory(</Literal>
          <Scope data="argument" ref="The Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>  while (GetIsObjectValid(oitem)) {</Literal>
        </Line>
        <Line>
          <Literal>    AssignCommand(</Literal>
          <Scope data="argument" ref="The Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, ActionGiveItem(oitem, </Literal>
          <Scope data="argument" ref="Container">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>));</Literal>
        </Line>
        <Line>
          <Literal>    oitem = GetNextItemInInventory(</Literal>
          <Scope data="argument" ref="The Object">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>  }</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Open all doors with the same tag as &lt;The Door&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>int nth = 0;</Literal>
        </Line>
        <Line>
          <Literal>string tag = GetTag(</Literal>
          <Scope data="argument" ref="The Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>object aDoor = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>while (GetIsObjectValid(aDoor) &amp;&amp; ! GetIsPC(aDoor))</Literal>
        </Line>
        <Line>
          <Literal>{</Literal>
        </Line>
        <Line>
          <Literal>  SetLocked(aDoor, FALSE);</Literal>
        </Line>
        <Line>
          <Literal>  AssignCommand(aDoor, ActionOpenDoor(aDoor));</Literal>
        </Line>
        <Line/>
        <Line>
          <Literal>  nth++;</Literal>
        </Line>
        <Line>
          <Literal>  aDoor = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>}</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>&lt;lock and close&gt; all doors with same tag as &lt;The Door&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>lock and close</Name>
          
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>The Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>int nth = 0;</Literal>
        </Line>
        <Line>
          <Literal>int lock = ! </Literal>
          <Scope data="argument" ref="The Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
        <Line>
          <Literal>string tag = GetTag(</Literal>
          <Scope data="argument" ref="lock and close">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>object aDoor = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>while (GetIsObjectValid(aDoor) &amp;&amp; ! GetIsPC(aDoor))</Literal>
        </Line>
        <Line>
          <Literal>{</Literal>
        </Line>
        <Line>
          <Literal>  SetLocked(aDoor, lock);</Literal>
        </Line>
        <Line>
          <Literal>  if (lock)</Literal>
        </Line>
        <Line>
          <Literal>    AssignCommand(aDoor, ActionCloseDoor(aDoor));</Literal>
        </Line>
        <Line>
          <Literal>  else</Literal>
        </Line>
        <Line>
          <Literal>    AssignCommand(aDoor, ActionOpenDoor(aDoor));</Literal>
        </Line>
        <Line>
          <Literal>  nth++;</Literal>
        </Line>
        <Line>
          <Literal>  aDoor = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>}</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Toggle all doors with same tag as &lt;The Door&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>The Door</Name>
          
          <Labels/>
          <Types>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>int nth = 0;</Literal>
        </Line>
        <Line>
          <Literal>string tag = GetTag(</Literal>
          <Scope data="argument" ref="The Door">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
        <Line>
          <Literal>object aDoor = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>int lock = ! GetLocked(aDoor);</Literal>
        </Line>
        <Line>
          <Literal>while (GetIsObjectValid(aDoor) &amp;&amp; ! GetIsPC(aDoor))</Literal>
        </Line>
        <Line>
          <Literal>{</Literal>
        </Line>
        <Line>
          <Literal>  SetLocked(aDoor, lock);</Literal>
        </Line>
        <Line>
          <Literal>  if (lock)</Literal>
        </Line>
        <Line>
          <Literal>    AssignCommand(aDoor, ActionCloseDoor(aDoor));</Literal>
        </Line>
        <Line>
          <Literal>  else</Literal>
        </Line>
        <Line>
          <Literal>    AssignCommand(aDoor, ActionOpenDoor(aDoor));</Literal>
        </Line>
        <Line>
          <Literal>  nth++;</Literal>
        </Line>
        <Line>
          <Literal>  aDoor = GetObjectByTag(tag, nth);</Literal>
        </Line>
        <Line>
          <Literal>}</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Execute the script &quot;&lt;Script&gt;&quot; on &lt;Target&gt;</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Script</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Target</Name>
          
          <Labels/>
          <Types>
            <Type>creature</Type>
						<Type>journal</Type>
						<Type>placeable</Type>
						<Type>door</Type>
						<Type>item</Type>
						<Type>trigger</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ExecuteScript(</Literal>
          <Scope data="argument" ref="Script">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, </Literal>
          <Scope data="argument" ref="Target">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt>
<Name>Execute the script &quot;&lt;Script&gt; on OBJECT_SELF</Name>
<Labels>
        <Label>NOW</Label>
      </Labels>
<Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>void</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Script</Name>
          
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>ExecuteScript(</Literal>
          <Scope data="argument" ref="Script">
            <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
          </Scope>
          <Literal>, OBJECT_SELF);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
</ScriptIt>
    <ScriptIt visible="false">
      <Name>Current Hitpoints of Object &lt;Object&gt;</Name>
      <Labels/>
      <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>int</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Object</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>return GetCurrentHitPoints(</Literal>
          <Scope data="argument" ref="Object">
								<Fragment data="name"/>
							</Scope>
							<Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>Maximum Hitpoints for Object &lt;Object&gt;</Name>
      <Labels/>
            <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>int</Type>
      </Types>
<Parameters>
        <KnowIt visible="true">
          <Name>Object</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
        </KnowIt>
      </Parameters>
<Code>
        <Line>
          <Literal>return GetMaxHitPoints(</Literal>
          <Scope data="argument" ref="Object">
								<Fragment data="name"/>
							</Scope>
							<Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>&lt;X&gt; equals &lt;Y&gt;</Name>
      <Labels/>
                 <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>question</Type>
      </Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>X</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Y</Name>
          <Labels/>
          <Types>
            <Type>int</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>return </Literal>
          <Scope data="argument" ref="X">
            <Fragment data="name"/>
          </Scope>
          <Literal>==</Literal>
          <Scope data="argument" ref="Y">
            <Fragment data="name"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt><!--280 ScriptIts-->
    <ScriptIt visible="false">
      <Name>Random Creature &lt;with Object Tag&gt;</Name>
      <Labels/>
                       <Children/>
<CodeBlocks>
	<CodeBlock>
		<Types>
			<Type>creature</Type>
		</Types>
		<Parameters>
			<KnowIt visible="true">
		   		<Name>with Object Tag</Name>
		    	<Labels/>
		    	<Types>
		    		<Type>string</Type>
		    	</Types>
		   	</KnowIt>
		</Parameters>
		<Code>
			<Line>
				<Literal>return SE_AUX_GetRandomObjectWithoutSelf(</Literal>
				<Scope data="argument" ref="with Object Tag">
		    		<Fragment data="name"/>
		      	</Scope>
			    <Literal>);</Literal>
		    </Line>
		</Code>
		<Includes>
			<Include>i_se_aux</Include>
		</Includes>
	</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>Last Perceived</Name>
      <Labels/>
                            <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
      <Parameters/>
      <Code>
        <Line>
          <Literal>return GetLastPerceived();</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>Was Last Perceived Heard</Name>
      <Labels/>
                               <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>question</Type>
      </Types>
      <Parameters/>
      <Code>
        <Line>
          <Literal>return GetLastPerceptionHeard();</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>Was Last Perceived Inaudible</Name>
      <Labels/>
                                    <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>question</Type>
      </Types>
      <Parameters/>
      <Code>
        <Line>
          <Literal>return GetLastPerceptionInaudible();</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>Was Last Perceived Seen</Name>
      <Labels/>
                                        <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>question</Type>
      </Types>
      <Parameters/>
      <Code>
        <Line>
          <Literal>return GetLastPerceptionSeen();</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>Has Last Perceived Vanished</Name>
      <Labels/>
                                             <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>question</Type>
      </Types>
      <Parameters/>
      <Code>
        <Line>
          <Literal>return GetLastPerceptionVanished();</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>if &lt;Creature&gt; has &lt;Item Tag&gt;</Name>
      <Labels/>
                                                   <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>question</Type>
      </Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Creature</Name>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <KnowIt visible="true">
          <Name>Item Tag</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>return HasItem(</Literal>
          <Scope data="argument" ref="Creature">
								<Fragment data="name"/>
							</Scope>
          <Literal>, GetTag( </Literal>
          <Scope data="argument" ref="Item Tag">
								<Fragment data="name"/>
							</Scope>
			<Literal>));</Literal>
        </Line>
      </Code>
      <Includes>
      	<Include>"nw_i0_plot"</Include>
      </Includes>
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt visible="false">
      <Name>the opposite of &lt;Number&gt;</Name>
      <Labels/>
      <Children />
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>float</Type>
      </Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>Number</Name>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
        </KnowIt>
      </Parameters>
      <Code>
        <Line>
          <Literal>return </Literal>
          <Scope data="argument" ref="Number">
            <Fragment data="name"/>
          </Scope>
          <Literal>;</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[12]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[12]"/><!--290 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/><!--300 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[12]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/><!--310 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[12]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/><!--320 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[12]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/><!--330 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[12]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[13]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[14]"/><!--340 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[15]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[16]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/><!--350 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[18]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/><!--360 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[19]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[20]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[23]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[24]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[25]"/><!--370 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[27]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[28]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[29]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[30]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[31]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[32]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[33]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[34]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[35]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[36]"/><!--380 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[37]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[38]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[39]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[40]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[42]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[43]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[45]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[46]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[47]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[48]"/><!--390 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[49]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[55]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[56]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[57]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[58]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[59]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[60]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[61]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[62]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[63]"/><!--400 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[64]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[65]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[92]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[93]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[94]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[95]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[96]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[105]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[107]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[113]"/><!--410 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[114]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[116]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[117]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[118]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[119]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[120]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[121]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[122]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[128]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[127]"/><!--420 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[129]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[130]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[131]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[136]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[137]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[138]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[139]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[141]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[142]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[143]"/><!--430 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[144]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[147]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[148]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[150]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[151]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[154]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[155]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[158]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[159]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[160]"/><!--440 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[163]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[164]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[165]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[166]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[167]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[168]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[169]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[171]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[172]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[176]"/><!--450 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[177]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[178]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[177]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[180]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[181]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[182]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[185]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[188]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[189]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[190]"/><!--460 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[192]"></ScriptIt>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[193]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[194]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[196]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[197]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[198]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[199]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[200]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[201]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[202]"/><!--470 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[203]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[204]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[205]"></ScriptIt>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[206]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[207]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[208]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[209]"></ScriptIt>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[210]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[211]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[212]"/><!--480 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[213]"></ScriptIt>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[214]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[215]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[216]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[217]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[218]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[219]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[220]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[221]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[226]"/><!--490 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[227]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[229]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[230]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[231]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[239]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[240]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[241]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[242]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[243]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[244]"/><!--500 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[245]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[246]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[247]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[248]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[249]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[252]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[253]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[254]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[255]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[256]"/><!--510 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[257]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[258]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[259]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[260]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[261]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[262]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[263]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[264]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[265]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[266]"/><!--520 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[276]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[277]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/><!--530 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[21]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[22]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/><!--540 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[5]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[50]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[51]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[52]"/><!--550 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[53]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[54]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[66]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[67]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[68]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[69]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[70]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[71]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[72]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[73]"/><!--560 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[74]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[75]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[76]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[77]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[78]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[79]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[80]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[81]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[82]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[83]"/><!--570 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[84]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[85]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[86]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[87]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[88]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[89]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[90]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[97]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[99]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[101]"/><!--580 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[103]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[109]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[111]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[123]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[124]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[125]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[126]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[134]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[135]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[145]"/><!--590 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[233]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[146]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[149]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[152]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[156]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[157]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[159]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[160]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[157]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[153]"/><!--600 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[161]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[173]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[170]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[174]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[175]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[183]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[184]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[186]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[187]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[195]"/><!--610 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[222]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[223]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[224]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[225]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[228]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[234]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[235]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[236]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[237]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[238]"/><!--620 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[250]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[251]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[266]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[267]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[268]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[269]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[271]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[272]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[273]"/>
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[274]"/><!--630 ScriptIts-->
    <ScriptIt reference="/APIDictionary/Effects/ScriptIt[275]"></ScriptIt>
	<ScriptIt visible="true">
			<Name>&lt;Enable&gt; &lt;dialogue line&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<!-- Set the conversation node Enable -->
				<CodeBlock>
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="true">
							<Name>Enable</Name>
							<Labels/>
							<Types>
								<Type>enable_disable</Type>
							</Types>
						</KnowIt>
						<KnowIt visible="true">
							<Name>dialogue line</Name>
							<Labels/>
							<Types>
								<Type>dialogue_line</Type>
							</Types>
						</KnowIt>
					</Parameters>
					<Code>
						<Line>
							<Literal>SetLocalInt(GetModule(), </Literal>
							<Scope data="argument" ref="dialogue line">
								<Fragment data="name"/>
							</Scope>
							<Literal>, abs(1-</Literal> 
							<Scope data="argument" ref="Enable">
								<Fragment data="name"/>
							</Scope>
							<Literal>));</Literal>
						</Line>
					</Code>
					<Includes />
				</CodeBlock>
				<!-- Check for the conversation node Enable -->
				<CodeBlock subject="dialogue line" slot="Active">
					<Types>
						<Type>int</Type>
					</Types>
					<Parameters />
					<Code>
						<Line>
							<Literal>return abs(1-GetLocalInt(GetModule(), </Literal>
							<Scope data="argument" ref="dialogue line">
								<Scope data="binding">
									<Fragment data="formattedValue"/>
								</Scope>
							</Scope>
							<Literal>));</Literal>
						</Line>
					</Code>
					<Includes />
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
	
<!-- Quest -->
		<ScriptIt>
			<Name>Succeed &lt;QuestPoint&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock>
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters> 
						<KnowIt visible="true">
						  <Name>QuestPoint</Name>
						  <Labels/>
						  <Types>
							<Type>questPoint</Type>
						  </Types>
						</KnowIt>
					</Parameters>
					<Code>
						<Line>
							<Literal>SE2_Quest_SucceedQuestPoint(</Literal>
							<Scope data="argument" ref="QuestPoint">
								<Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
							</Scope>
							<Literal>);</Literal>
						</Line>
					</Code>
					<Includes>
						<Include>i_se_quest2</Include>
					</Includes>
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>Fail &lt;QuestPoint&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock>
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters> 
						<KnowIt visible="true">
						  <Name>QuestPoint</Name>
						  <Labels/>
						  <Types>
							<Type>questPoint</Type>
						  </Types>
						</KnowIt>
					</Parameters>
					<Code>
						<Line>
							<Literal>SE2_Quest_FailQuestPoint(</Literal>
							<Scope data="argument" ref="QuestPoint">
								<Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
							</Scope>
							<Literal>);</Literal>
						</Line>
					</Code>
					<Includes>
						<Include>i_se_quest2</Include>
					</Includes>
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<ScriptIt>
			<Name>Initialize Quest System for &lt;module&gt;</Name>
			<Labels/>
			<Children/>
			<CodeBlocks>
				<CodeBlock subject="module" slot = "Mod_OnClientEntr">
					<Types>
						<Type>void</Type>
					</Types>
					<Parameters>
						<KnowIt visible="false">
							<Name>module</Name>
							<Labels />
							<Types>
								<Type>module</Type>
							</Types>
						</KnowIt>
					</Parameters>					
					<Code>
						<Line><Literal>string name;</Literal></Line>
						<!-- Register each questpoint with the system -->
						<Series data="questPointNodes" unique="true">
							<Line>
								<Literal>name=</Literal>
								<Fragment data="formattedValue" /> 
								<Literal>;</Literal> 
							</Line>
							<Line>
								<Literal>SE2_Quest_RegisterQuestPoint(</Literal>
								<Literal>name, </Literal>
								<Fragment data="fanIn" />
								<!-- TODO <Fragment data="questContainer" /> -->
								<Literal>, GetFirstPC());</Literal>
							</Line>
							<Series data="parentNodes" unique="true">
								<Line>
									<Literal>SE2_Quest_RegisterQuestPointParent(</Literal>
									<Literal>name, </Literal>
									<Fragment data="formattedValue" />
									<Literal>, GetFirstPC());</Literal>
								</Line>
							</Series>
							<Series data="childrenNodes" unique="true">
								<Line>
									<Literal>SE2_Quest_RegisterQuestPointChild(</Literal>
									<Literal>name, </Literal>
									<Fragment data="formattedValue" />
									<Literal>, GetFirstPC());</Literal>
								</Line>
							</Series>
							<!-- TODO register quests -->
						</Series>
						<Scope data="start">
							<Line><Literal>//enable the starting quest point</Literal></Line>
							<Line><Literal>SE2_Quest_setState(GetFirstPC(), </Literal>
							<Fragment data="formattedValue" />
							<Literal>, QUEST_POINT_STATE_ENABLED);</Literal></Line>
						</Scope>
					</Code>
					<Includes>
						<Include>i_se_quest2</Include>
					</Includes>
				</CodeBlock>
			</CodeBlocks>
		</ScriptIt>
		<!-- /Quest -->
		<!--REMEMBER REMEMBER THE IDES OF DECEMBER-->
		<ScriptIt visible="true">
		<Name> Remember &lt;Text&gt; as attribute &lt;Name&gt; in &lt;Object&gt;</Name>
		<Labels/>
		<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
				<Parameters>
					<KnowIt visible="true">
			          <Name>Text</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
					<KnowIt visible="true">
			          <Name>Object</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			            <Type>placeable</Type>
			            <Type>door</Type>
			         </Types>
			        </KnowIt>
					<KnowIt visible="true">
			          <Name>Name</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
				</Parameters>
				<Code>
					<Line>
			          <Literal>ActionDoCommand(SetLocalString(</Literal>
			          <Scope data="argument" ref="Object">
			            <Fragment data="name"/>
			          </Scope>
					  <Literal>,</Literal>
					  <Scope data="argument" ref="Name">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>,</Literal>
					   <Scope data="argument" ref="Text">
			            <Fragment data="name"/>
			           </Scope>
					  <Literal>));</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="true">
		<Name> Remember &lt;Value&gt; as attribute &lt;Name&gt; in &lt;Object&gt;</Name>
		<Labels/>
		<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
				<Parameters>
					<KnowIt visible="true">
			          <Name>Value</Name>
			          <Labels/>
			          <Types>
			            <Type>question</Type>
			          </Types>
			        </KnowIt>
					<KnowIt visible="true">
			          <Name>Object</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			            <Type>placeable</Type>
			            <Type>door</Type>
			         </Types>
			        </KnowIt>
					<KnowIt visible="true">
			          <Name>Name</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
				</Parameters>
				<Code>
					<Line>
			          <Literal>ActionDoCommand(SetLocalInt(</Literal>
			          <Scope data="argument" ref="Object">
			            <Fragment data="name"/>
			          </Scope>
					  <Literal>,</Literal>
					  <Scope data="argument" ref="Name">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>,</Literal>
					   <Scope data="argument" ref="Value">
			            <Fragment data="name"/>
			           </Scope>
					  <Literal>));</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="true">
		<Name> Remember &lt;Number&gt; as attribute &lt;Name&gt; in &lt;Object&gt;</Name>
		<Labels/>
		<Children/>
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
				<Parameters>
					<KnowIt visible="true">
			          <Name>Number</Name>
			          <Labels/>
			          <Types>
			            <Type>int</Type>
			          </Types>
			        </KnowIt>
					<KnowIt visible="true">
			          <Name>Object</Name>
			          <Labels/>
			          <Types>
			            <Type>creature</Type>
			            <Type>placeable</Type>
			            <Type>door</Type>
			         </Types>
			        </KnowIt>
					<KnowIt visible="true">
			          <Name>Name</Name>
			          <Labels/>
			          <Types>
			            <Type>string</Type>
			          </Types>
			        </KnowIt>
				</Parameters>
				<Code>
					<Line>
			          <Literal>ActionDoCommand(SetLocalInt(</Literal>
			          <Scope data="argument" ref="Object">
			            <Fragment data="name"/>
			          </Scope>
					  <Literal>,</Literal>
					  <Scope data="argument" ref="Name">
			            <Fragment data="name"/>
			          </Scope>
			          <Literal>,</Literal>
					   <Scope data="argument" ref="Number">
			            <Fragment data="name"/>
			           </Scope>
					  <Literal>));</Literal>
			        </Line>
				</Code>
					<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="true">
		<Name>Reverse attribute &lt;Named&gt; in &lt;Object&gt;</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
				<Parameters>
					<KnowIt visible="true">
						<Name>Named</Name>
						<Labels />
						<Types>
							<Type>string</Type>
						</Types>
					</KnowIt>
					<KnowIt visible="true">
						<Name>Object</Name>
						<Labels />
						<Types>
							<Type>creature</Type>
							<Type>placeable</Type>
							<Type>door</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
					<Line>
						<Literal>ActionDoCommand(SetLocalInt(</Literal>
						<Scope data="argument" ref="Object">
							<Fragment data="name" />
						</Scope>
						<Literal>,</Literal>
						<Scope data="argument" ref="Named">
							<Fragment data="name" />
						</Scope>
						<Literal>, !getLocalInt(</Literal>
						<Scope data="argument" ref="Object">
							<Fragment data="name" />
						</Scope>
						<Literal>,</Literal>
						<Scope data="argument" ref="Named">
							<Fragment data="name" />
						</Scope>
						<Literal>)));</Literal>
					</Line>
				</Code>
				<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="false">
		<Name>The Player Character</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>creature</Type>
				</Types>
				<Parameters />
				<Code>
					<Line>
						<Literal>return GetFirstPC();</Literal>
					</Line>
				</Code>
				<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
    <!--640 ScriptIts-->
	<ScriptIt visible="false">
		<Name>Get Nearest Object Without Self</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>creature</Type>
					<Type>placeable</Type>
					<Type>door</Type>
				</Types>
				<Parameters>
					<KnowIt visible="false">
						<Name>Tag</Name>
						<Labels />
						<Types>
							<Type>string</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
						<Literal>SE_AUX_GetNearestObjectWithoutSelf("</Literal>
						<Scope data="argument" ref="Tag">
							<Fragment data="name" />
						</Scope>
						<Literal>")</Literal>
				</Code>
				<Includes>
					<Include>i_se_aux</Include>
				</Includes>
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="false">
		<Name>Get Random Object Without Self</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>creature</Type>
					<Type>placeable</Type>
					<Type>door</Type>
				</Types>
				<Parameters>
					<KnowIt visible="false">
						<Name>Tag</Name>
						<Labels />
						<Types>
							<Type>string</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
						<Literal>SE_AUX_GetRandomObjectWithoutSelf("</Literal>
						<Scope data="argument" ref="Tag">
							<Fragment data="name" />
						</Scope>
						<Literal>")</Literal>
				</Code>
				<Includes>
					<Include>i_se_aux</Include>
				</Includes>
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="false">
		<Name>Get Nearest Object By Tag Include Self</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>creature</Type>
					<Type>placeable</Type>
					<Type>door</Type>
					<Type>item</Type>
					<Type>module</Type>
				</Types>
				<Parameters>
					<KnowIt visible="false">
						<Name>Tag</Name>
						<Labels />
						<Types>
							<Type>string</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
						<Literal>SE_AUX_GetNearestObjectByTagIncludeSelf("</Literal>
						<Scope data="argument" ref="Tag">
							<Fragment data="name" />
						</Scope>
						<Literal>")</Literal>
				</Code>
				<Includes>
					<Include>i_se_aux</Include>
				</Includes>
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="false">
		<Name>Get Random Object With Self</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>creature</Type>
					<Type>placeable</Type>
					<Type>door</Type>
				</Types>
				<Parameters>
					<KnowIt visible="false">
						<Name>Tag</Name>
						<Labels />
						<Types>
							<Type>string</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
						<Literal>SE_AUX_GetRandomObjectWithSelf("</Literal>
						<Scope data="argument" ref="Tag">
							<Fragment data="name" />
						</Scope>
						<Literal>")</Literal>
				</Code>
				<Includes>
					<Include>i_se_aux</Include>
				</Includes>
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
 	<ScriptIt visible="false">
		<Name>Get Module</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>module</Type>
				</Types>
				<Parameters />
				<Code>
						<Literal>GetModule()</Literal>
				</Code>
				<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="false">
		<Name>if &lt;First Object&gt; equals &lt;Second Object&gt;</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>question</Type>
				</Types>
				<Parameters>
					<KnowIt visible="true">
						<Name>First Object</Name>
						<Labels />
						<Types>
						    <Type>creature</Type>
							<Type>placeable</Type>
							<Type>door</Type>
							<Type>item</Type>
						</Types>
					</KnowIt>
					<KnowIt visible="true">
						<Name>Second Object</Name>
						<Labels />
						<Types>
						    <Type>creature</Type>
							<Type>placeable</Type>
							<Type>door</Type>
							<Type>item</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
					<Line>
						<Literal>return GetTag(</Literal>
						<Scope data="argument" ref="First Object">
							<Fragment data="name" />
						</Scope>
						<Literal>) == GetTag(</Literal>
						<Scope data="argument" ref="Second Object">
							<Fragment data="name" />
						</Scope>
						<Literal>);</Literal>
					</Line>
				</Code>
				<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="false">
		<Name>the location of &lt;Object&gt;</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>location</Type>
				</Types>
				<Parameters>
					<KnowIt visible="true">
						<Name>Object</Name>
						<Labels />
						<Types>
						    <Type>creature</Type>
							<Type>placeable</Type>
							<Type>waypoint</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
					<Line>
						<Literal>return GetLocation(</Literal>
						<Scope data="argument" ref="Object">
							<Fragment data="name" />
						</Scope>
						<Literal>);</Literal>
					</Line>
				</Code>
				<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="true">
		<Name>Create &lt;Object&gt; at &lt;Location&gt;</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
				<Parameters>
					<KnowIt visible="true">
						<Name>Object</Name>
						<Labels />
						<Types>
						    <Type>creature</Type>
							<Type>placeable</Type>
						</Types>
					</KnowIt>
					<KnowIt visible="true">
						<Name>Location</Name>
						<Labels />
						<Types>
						    <Type>location</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
					<Line>
						<Literal>CreateObject(GetObjectType(</Literal>
						<Scope data="argument" ref="Object">
							<Fragment data="name" />
						</Scope>
						<Literal>), GetResRef(</Literal>
						<Scope data="argument" ref="Object">
							<Fragment data="name" />
						</Scope>
						<Literal>), </Literal>
						<Scope data="argument" ref="Location">
							<Fragment data="name" />
						</Scope>
						<Literal>);</Literal>
					</Line>
				</Code>
				<Includes />
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
	<ScriptIt visible="true">
		<Name>Continue quest at &lt;Quest Point&gt;</Name>
		<Labels />
		<Children />
		<CodeBlocks>
			<CodeBlock>
				<Types>
					<Type>void</Type>
				</Types>
				<Parameters>
					<KnowIt visible="false">
						<Name>Quest Point</Name>
						<Labels/>
						<Types>
							<Type>questPoint</Type>
						</Types>
					</KnowIt>
				</Parameters>
				<Code>
					<Line>
						<Literal>SE2_Quest_ResetAtQuestPoint(</Literal>
						<Scope data="argument" ref="Quest Point">
							<Fragment data="name"/>
						</Scope>
						<Literal>);</Literal>
					</Line>
				</Code>
				<Includes>
					<Include>i_se_quest2</Include>
				</Includes>
			</CodeBlock>
		</CodeBlocks>
	</ScriptIt>
  </Effects>
  <DescribeIts>
    <KnowIt visible="true">
      <Name>Current Hitpoints</Name>
      <Labels/>
      <Types>
        <Type>int</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Maximum Hitpoints</Name>
      <Labels/>
      <Types>
        <Type>int</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Is Equal</Name>
      <Labels/>
      <Types>
        <Type>question</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Random Creature</Name>
      <Labels/>
      <Types>
        <Type>creature</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Last Perceived</Name>
      <Labels/>
      <Types>
        <Type>creature</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Was Heard</Name>
      <Labels/>
      <Types>
        <Type>question</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Was Inaudible</Name>
      <Labels/>
      <Types>
        <Type>question</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Was Seen</Name>
      
      <Labels/>
      <Types>
        <Type>question</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[285]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Has Vanished</Name>
      
      <Labels/>
      <Types>
        <Type>question</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Has This Item</Name>
      
      <Labels/>
      <Types>
        <Type>question</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Opposite</Name>
      
      <Labels/>
      <Types>
        <Type>float</Type>
      </Types>
      <Binding flavour="function">
        <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
      </Binding>
    </KnowIt>
    <KnowIt visible="true">
      <Name>Nearest Creature</Name>
      <Labels/>
      <Types>
        <Type>creature</Type>
      </Types>
      <Binding flavour="describeIt">
        <DescribeIt>
          <Head>
            <TextNode>
              <Children>
                <KnowItNode>
                  <Children>
                    <TextNode>
                      <Children>
                        <KnowItNode terminal="true">
                          <Children>
                            <TextNode>
                              <Children>
                                <KnowItNode terminal="true">
                                  <Children/>
                                  <KnowIt visible="true">
                                    <Name>creature</Name>
                                    
                                    <Labels/>
                                    <Types>
                                      <Type>creature</Type>
                                    </Types>
                                  </KnowIt>
                                </KnowItNode>
                              </Children>
                              <Text>with same tag as</Text>
                            </TextNode>
                          </Children>
                          <KnowIt visible="true">
                            <Name>object</Name>
                            
                            <Labels/>
                            <Types>
                              <Type>creature</Type>
                              <Type>door</Type>
                              <Type>placeable</Type>
                            </Types>
                          </KnowIt>
                        </KnowItNode>
                      </Children>
                      <Text>nearest creature to</Text>
                    </TextNode>
                  </Children>
                  <KnowIt visible="true">
                    <Name>nth</Name>
                    
                    <Labels/>
                    <Types>
                      <Type>int</Type>
                    </Types>
                  </KnowIt>
                </KnowItNode>
                <TextNode>
                  <Children>
                    <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
                  </Children>
                  <Text>different</Text>
                </TextNode>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
              </Children>
              <Text>the</Text>
            </TextNode>
          </Head>
          <PathMap>
            <Entry>
              <Path>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
              </Path>
              <ScriptIt visible="true">
                <Name>the &lt;nth&gt; nearest creature to &lt;object&gt; with same tag as &lt;creature&gt;</Name>
                <Labels/>
                      <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
                <Parameters>
                  <KnowIt visible="true">
                    <Name>nth</Name>
                    
                    <Labels/>
                    <Types>
                      <Type>int</Type>
                    </Types>
                  </KnowIt>
                  <KnowIt visible="true">
                    <Name>object</Name>
                    
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                      <Type>door</Type>
                      <Type>placeable</Type>
                    </Types>
                  </KnowIt>
                  <KnowIt visible="true">
                    <Name>creature</Name>
                    
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                    </Types>
                  </KnowIt>
                </Parameters>
                <Code>
                  <Line>
                    <Literal>return GetNearestObjectByTag(GetTag(</Literal>
                    <Scope data="argument" ref="creature">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>), </Literal>
                    <Scope data="argument" ref="object">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>, </Literal>
                    <Scope data="argument" ref="nth">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>);</Literal>
                  </Line>
                </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
              </ScriptIt>
            </Entry>
            <Entry>
              <Path>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/TextNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
              </Path>
              <ScriptIt visible="true">
                <Name>the different nearest creature to &lt;object&gt;</Name>
                <Labels/>
                                      <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
                <Parameters>
                  <KnowIt visible="true">
                    <Name>object</Name>
                    
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                      <Type>door</Type>
                      <Type>placeable</Type>
                    </Types>
                  </KnowIt>
                </Parameters>
                <Code>
                  <Line>
                    <Literal>object obj = GetNearestObject(OBJECT_TYPE_CREATURE,</Literal>
                    <Scope data="argument" ref="object">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>);</Literal>
                  </Line>
                  <Line>
                    <Literal>if (obj == OBJECT_SELF)</Literal>
                  </Line>
                  <Indent>
                    <Line>
                      <Literal>obj = GetNearestObject(</Literal>
                      <Scope data="argument" ref="object">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>, 1);</Literal>
                    </Line>
                  </Indent>
                  <Line>
                    <Literal>return obj;</Literal>
                  </Line>
                </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
              </ScriptIt>
            </Entry>
            <Entry>
              <Path>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
              </Path>
              <ScriptIt visible="true">
                <Name>the &lt;nth&gt; nearest creature to &lt;object&gt;</Name>
                <Labels/>
                                                      <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
                <Parameters>
                  <KnowIt visible="true">
                    <Name>nth</Name>
                    <Labels/>
                    <Types>
                      <Type>int</Type>
                    </Types>
                  </KnowIt>
                  <KnowIt visible="true">
                    <Name>object</Name>
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                      <Type>door</Type>
                      <Type>placeable</Type>
                    </Types>
                  </KnowIt>
                </Parameters>
                <Code>
                  <Line>
                    <Literal>return GetNearestObject(OBJECT_TYPE_CREATURE,</Literal>
                    <Scope data="argument" ref="object">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>, </Literal>
                    <Scope data="argument" ref="nth">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>);</Literal>
                  </Line>
                </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
              </ScriptIt>
            </Entry>
            <Entry>
              <Path>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
              </Path>
              <ScriptIt visible="true">
                <Name>the nearest creature to &lt;object&gt;</Name>
                <Labels/>
                                                                      <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
                <Parameters>
                  <KnowIt visible="true">
                    <Name>object</Name>
                    
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                      <Type>door</Type>
                      <Type>placeable</Type>
                    </Types>
                  </KnowIt>
                </Parameters>
                <Code>
                  <Line>
                    <Literal>return GetNearestObject(OBJECT_TYPE_CREATURE,</Literal>
                    <Scope data="argument" ref="object">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>);</Literal>
                  </Line>
                </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
              </ScriptIt>
            </Entry>
            <Entry>
              <Path>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
              </Path>
              <ScriptIt visible="true">
                <Name>the nearest creature to &lt;object&gt; with same tag as &lt;creature&gt;</Name>
                <Labels/>
                                                                                     <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
                <Parameters>
                  <KnowIt visible="true">
                    <Name>object</Name>
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                      <Type>door</Type>
                      <Type>placeable</Type>
                    </Types>
                  </KnowIt>
                  <KnowIt visible="true">
                    <Name>creature</Name>
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                    </Types>
                  </KnowIt>
                </Parameters>
                <Code>
                  <Line>
                    <Literal>return GetNearestObjectByTag(GetTag(</Literal>
                    <Scope data="argument" ref="creature">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>), </Literal>
                    <Scope data="argument" ref="object">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>);</Literal>
                  </Line>
                </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
              </ScriptIt>
            </Entry>
            <Entry>
              <Path>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/TextNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
                <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode/Children/TextNode"/>
                <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
              </Path>
              <ScriptIt visible="true">
                <Name>the different nearest creature to &lt;object&gt; with same tag as &lt;creature&gt;</Name>
                <Labels/>
                                                                                                     <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>creature</Type>
      </Types>
                <Parameters>
                  <KnowIt visible="true">
                    <Name>object</Name>
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                      <Type>door</Type>
                      <Type>placeable</Type>
                    </Types>
                  </KnowIt>
                  <KnowIt visible="true">
                    <Name>creature</Name>
                    <Labels/>
                    <Types>
                      <Type>creature</Type>
                    </Types>
                  </KnowIt>
                </Parameters>
                <Code>
                  <Line>
                    <Literal>object obj = GetNearestObjectByTag(GetTag(</Literal>
                    <Scope data="argument" ref="creature">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>), </Literal>
                    <Scope data="argument" ref="object">
                      <Fragment data="name"/>
                    </Scope>
                    <Literal>);</Literal>
                  </Line>
                  <Line>
                    <Literal>if (obj == OBJECT_SELF)</Literal>
                  </Line>
                  <Indent>
                    <Line>
                      <Literal>obj = GetNearestObjectByTag(GetTag(</Literal>
                      <Scope data="argument" ref="creature">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>), </Literal>
                      <Scope data="argument" ref="object">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>, 1);</Literal>
                    </Line>
                  </Indent>
                  <Line>
                    <Literal>return obj;</Literal>
                  </Line>
                </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
              </ScriptIt>
            </Entry>
          </PathMap>
          <DefaultPath>
            <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
            <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
            <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
          </DefaultPath>
          <SelectedPath>
            <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode"/>
            <TextNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode"/>
            <KnowItNode reference="/APIDictionary/DescribeIts/KnowIt[12]/Binding/DescribeIt/Head/TextNode/Children/KnowItNode/Children/TextNode/Children/KnowItNode"/>
          </SelectedPath>
        </DescribeIt>
      </Binding>
    </KnowIt>
	<!-- QUEST POINTS-->
	<KnowIt>
		<Name>Is Active</Name>
		<Labels/>
		<Types>
			<Type>question</Type>
		</Types>
		<Binding flavour="function">
			<ScriptIt>
				<Name>if &lt;QuestPoint&gt; is active</Name>
				<Labels/>
				<Children/>
				<CodeBlocks>
					<CodeBlock>
						<Types>
							<Type>question</Type>
						</Types>
					    <Parameters> 
							<KnowIt visible="true">
							  <Name>QuestPoint</Name>
							  <Labels/>
							  <Types>
								<Type>questPoint</Type>
							  </Types>
							</KnowIt>
					    </Parameters>
						<Code>
							<Line>
								<Literal>return SE2_Quest_getState(GetFirstPC(), </Literal>
								<Scope data="argument" ref="QuestPoint">
									<Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
								</Scope>
								<Literal>) == QUEST_POINT_STATE_ENABLED;</Literal>
							</Line>
						</Code>
					<Includes>
						<Include>i_se_quest2</Include>
					</Includes>
					</CodeBlock>
				</CodeBlocks>
			</ScriptIt>
		</Binding>
	</KnowIt>
	<KnowIt>
		<Name>Has Succeeded</Name>
		<Labels/>
		<Types>
			<Type>question</Type>
		</Types>
		<Binding flavour="function">
			<ScriptIt>
				<Name>if &lt;QuestPoint&gt; has succeeded</Name>
				<Labels/>
				<Children/>
				<CodeBlocks>
					<CodeBlock>
						<Types>
							<Type>question</Type>
						</Types>
					    <Parameters> 
							<KnowIt visible="true">
							  <Name>QuestPoint</Name>
							  <Labels/>
							  <Types>
								<Type>questPoint</Type>
							  </Types>
							</KnowIt>
					    </Parameters>
						<Code>
							<Line>
								<Literal>return SE2_Quest_getState(GetFirstPC(), </Literal>
								<Scope data="argument" ref="QuestPoint">
									<Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
								</Scope>
								<Literal>) == QUEST_POINT_STATE_SUCCESS;</Literal>
							</Line>
						</Code>
					<Includes>
						<Include>i_se_quest2</Include>
					</Includes>
					</CodeBlock>
				</CodeBlocks>
			</ScriptIt>
		</Binding>
	</KnowIt>
	<KnowIt>
	<Name>Recall value</Name>
		<Labels/>
		<Types>
			<Type>question</Type>
		</Types>
		<Binding flavour="function">
		<ScriptIt>
				<Name>attribute &lt;Text&gt; in &lt;Object&gt;</Name>
				<Labels/>
				<Children/>
				<CodeBlocks>
					<CodeBlock>
						<Types>
							<Type>question</Type>
						</Types>
						 <Parameters> 
							<KnowIt visible="true">
							  <Name>Object</Name>
							  <Labels/>
							  <Types>
								<Type>creature</Type>
								<Type>placeable</Type>
								<Type>door</Type>
							  </Types>
							</KnowIt>
							<KnowIt visible="true">
							  <Name>Text</Name>
							  <Labels/>
							  <Types>
								<Type>string</Type>
							  </Types>
							</KnowIt>
					    </Parameters>
						<Code>
						<Line>
						 <Literal>getLocalInt(</Literal>
							<Scope data="argument" ref="Object">
								<Fragment data="name"/>
							</Scope>
							<Literal>,</Literal>
							<Scope data="argument" ref="Text">
								<Fragment data="name"/>
							</Scope>
							<Literal>);</Literal>
						</Line>
						</Code>
					<Includes />
						</CodeBlock>
				</CodeBlocks>
		</ScriptIt>
		</Binding>
	</KnowIt>
	<KnowIt visible="true">
		<Name>The Player Character</Name>
		<Labels />
		<Types>
			<Type>creature</Type>
		</Types>
		<Binding flavour="function">
			<ScriptIt reference="/APIDictionary/Effects/ScriptIt[640]"></ScriptIt>
		</Binding>
	</KnowIt>
	<KnowIt visible="true">
		<Name>Objects are Equal</Name>
		<Labels />
		<Types>
			<Type>question</Type>
		</Types>
		<Binding flavour="function">
			<ScriptIt reference="/APIDictionary/Effects/ScriptIt[646]"></ScriptIt>
		</Binding>
	</KnowIt>
	<KnowIt visible="true">
		<Name>Object Location</Name>
		<Labels />
		<Types>
			<Type>location</Type>
		</Types>
		<Binding flavour="function">
			<ScriptIt reference="/APIDictionary/Effects/ScriptIt[647]"></ScriptIt>
		</Binding>
	</KnowIt>
 </DescribeIts>
  <TypeConverters>
    <ScriptIt visible="false">
      <Name>Convert item &lt;value&gt; to string</Name>
      <Labels/>
      <Children/>
<CodeBlocks>
<CodeBlock>
<Types>
        <Type>string</Type>
      </Types>
      <Parameters>
        <KnowIt visible="true">
          <Name>value</Name>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="runTime">
            <Types>
              <Type>item</Type>
            </Types>
          </Binding>
        </KnowIt> 
      </Parameters>
      <Code>
        <Line>
          <Literal>return getTag(</Literal>
          <Scope data="argument" ref="value"> 
            <Fragment data="name"/>
          </Scope>
          <Literal>);</Literal>
        </Line>
      </Code>
					<Includes />
</CodeBlock>
</CodeBlocks>
    </ScriptIt>
  </TypeConverters>
</APIDictionary>