<APIDictionary name="DefaultNWNAPIDictionary" author="ScriptEase2">
  <Types>
    <Type>
      <Name>CameraMode</Name>
      <Keyword>camera_mode</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>CAMERA_MODE_TOP_DOWN&lt;Top Down&gt;|CAMERA_MODE_CHASE_CAMERA&lt;Chase Camera&gt;|CAMERA_MODE_STIFF_CHASE_CAMERA&lt;Stiff Chase Camera&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Store</Name>
      <Keyword>store</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnOpenStore</Slot>
        <Slot>OnStoreClosed</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Location</Name>
      <Keyword>location</Keyword>
      <CodeSymbol>location</CodeSymbol>
    </Type>
    <Type>
      <Name>AppearanceType</Name>
      <Keyword>appearance_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>APPEARANCE_TYPE_MEPHIT_ICE&lt;Appearance Type Mephit Ice&gt;|APPEARANCE_TYPE_MINOTAUR&lt;Appearance Type Minotaur&gt;|APPEARANCE_TYPE_UTHGARD_ELK_TRIBE&lt;Appearance Type Uthgard Elk Tribe&gt;|APPEARANCE_TYPE_OLD_WOMAN&lt;Appearance Type Old Woman&gt;|APPEARANCE_TYPE_DROW_FEMALE_1&lt;Appearance Type Drow Female 1&gt;|APPEARANCE_TYPE_DROW_FEMALE_2&lt;Appearance Type Drow Female 2&gt;|APPEARANCE_TYPE_HALFLING&lt;Appearance Type Halfling&gt;|APPEARANCE_TYPE_BEAR_BLACK&lt;Appearance Type Bear Black&gt;|APPEARANCE_TYPE_KOBOLD_A&lt;Appearance Type Kobold A&gt;|APPEARANCE_TYPE_DOG_BLINKDOG&lt;Appearance Type Dog Blinkdog&gt;|APPEARANCE_TYPE_FAIRY&lt;Appearance Type Fairy&gt;|APPEARANCE_TYPE_GHAST&lt;Appearance Type Ghast&gt;|APPEARANCE_TYPE_YUAN_TI&lt;Appearance Type Yuan Ti&gt;|APPEARANCE_TYPE_SEAGULL_FLYING&lt;Appearance Type Seagull Flying&gt;|APPEARANCE_TYPE_ORC_B&lt;Appearance Type Orc B&gt;|APPEARANCE_TYPE_ORC_A&lt;Appearance Type Orc A&gt;|APPEARANCE_TYPE_GOLEM_FLESH&lt;Appearance Type Golem Flesh&gt;|APPEARANCE_TYPE_JAGUAR&lt;Appearance Type Jaguar&gt;|APPEARANCE_TYPE_STINGER&lt;Appearance Type Stinger&gt;|APPEARANCE_TYPE_FAERIE_DRAGON&lt;Appearance Type Faerie Dragon&gt;|APPEARANCE_TYPE_UMBERHULK&lt;Appearance Type Umberhulk&gt;|APPEARANCE_TYPE_YUAN_TI_WIZARD&lt;Appearance Type Yuan Ti Wizard&gt;|APPEARANCE_TYPE_HELMED_HORROR&lt;Appearance Type Helmed Horror&gt;|APPEARANCE_TYPE_HALFLING_NPC_FEMALE&lt;Appearance Type Halfling Npc Female&gt;|APPEARANCE_TYPE_DUERGAR_SLAVE&lt;Appearance Type Duergar Slave&gt;|APPEARANCE_TYPE_HEURODIS_LICH&lt;Appearance Type Heurodis Lich&gt;|APPEARANCE_TYPE_MEPHISTO_NORM&lt;Appearance Type Mephisto Norm&gt;|APPEARANCE_TYPE_BEETLE_STAG&lt;Appearance Type Beetle Stag&gt;|APPEARANCE_TYPE_RAT&lt;Appearance Type Rat&gt;|APPEARANCE_TYPE_ZOMBIE_TYRANT_FOG&lt;Appearance Type Zombie Tyrant Fog&gt;|APPEARANCE_TYPE_GREY_RENDER&lt;Appearance Type Grey Render&gt;|APPEARANCE_TYPE_TROLL_SHAMAN&lt;Appearance Type Troll Shaman&gt;|APPEARANCE_TYPE_NW_MILITIA_MEMBER&lt;Appearance Type Nw Militia Member&gt;|APPEARANCE_TYPE_SLAAD_GREEN&lt;Appearance Type Slaad Green&gt;|APPEARANCE_TYPE_OGRE_CHIEFTAINB&lt;Appearance Type Ogre Chieftainb&gt;|APPEARANCE_TYPE_LION&lt;Appearance Type Lion&gt;|APPEARANCE_TYPE_VROCK&lt;Appearance Type Vrock&gt;|APPEARANCE_TYPE_GOLEM_ADAMANTIUM&lt;Appearance Type Golem Adamantium&gt;|APPEARANCE_TYPE_BEAR_BROWN&lt;Appearance Type Bear Brown&gt;|APPEARANCE_TYPE_DEER&lt;Appearance Type Deer&gt;|APPEARANCE_TYPE_PANTHER&lt;Appearance Type Panther&gt;|APPEARANCE_TYPE_OCHRE_JELLY_SMALL&lt;Appearance Type Ochre Jelly Small&gt;|APPEARANCE_TYPE_DOG_DIRE_WOLF&lt;Appearance Type Dog Dire Wolf&gt;|APPEARANCE_TYPE_NWN_SEDOS&lt;Appearance Type Nwn Sedos&gt;|APPEARANCE_TYPE_GOBLIN_SHAMAN_A&lt;Appearance Type Goblin Shaman A&gt;|APPEARANCE_TYPE_BADGER_DIRE&lt;Appearance Type Badger Dire&gt;|APPEARANCE_TYPE_GOBLIN_SHAMAN_B&lt;Appearance Type Goblin Shaman B&gt;|APPEARANCE_TYPE_SHARK_HAMMERHEAD&lt;Appearance Type Shark Hammerhead&gt;|APPEARANCE_TYPE_GIANT_FIRE_FEMALE&lt;Appearance Type Giant Fire Female&gt;|APPEARANCE_TYPE_HARPY&lt;Appearance Type Harpy&gt;|APPEARANCE_TYPE_RAKSHASA_TIGER_FEMALE&lt;Appearance Type Rakshasa Tiger Female&gt;|APPEARANCE_TYPE_DOG_WORG&lt;Appearance Type Dog Worg&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR_2&lt;Appearance Type Skeleton Warrior 2&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR_1&lt;Appearance Type Skeleton Warrior 1&gt;|APPEARANCE_TYPE_WYRMLING_SILVER&lt;Appearance Type Wyrmling Silver&gt;|APPEARANCE_TYPE_MINOTAUR_CHIEFTAN&lt;Appearance Type Minotaur Chieftan&gt;|APPEARANCE_TYPE_SHIELD_GUARDIAN&lt;Appearance Type Shield Guardian&gt;|APPEARANCE_TYPE_WEREWOLF&lt;Appearance Type Werewolf&gt;|APPEARANCE_TYPE_GOLEM_STONE&lt;Appearance Type Golem Stone&gt;|APPEARANCE_TYPE_ARCH_TARGET&lt;Appearance Type Arch Target&gt;|APPEARANCE_TYPE_RAKSHASA_WOLF_MALE&lt;Appearance Type Rakshasa Wolf Male&gt;|APPEARANCE_TYPE_DRAGON_SILVER&lt;Appearance Type Dragon Silver&gt;|APPEARANCE_TYPE_GNOME_NPC_FEMALE&lt;Appearance Type Gnome Npc Female&gt;|APPEARANCE_TYPE_WERECAT&lt;Appearance Type Werecat&gt;|APPEARANCE_TYPE_PROSTITUTE_02&lt;Appearance Type Prostitute 02&gt;|APPEARANCE_TYPE_PROSTITUTE_01&lt;Appearance Type Prostitute 01&gt;|APPEARANCE_TYPE_SLAAD_BLUE&lt;Appearance Type Slaad Blue&gt;|APPEARANCE_TYPE_ELEMENTAL_AIR&lt;Appearance Type Elemental Air&gt;|APPEARANCE_TYPE_LUSKAN_GUARD&lt;Appearance Type Luskan Guard&gt;|APPEARANCE_TYPE_OLD_MAN&lt;Appearance Type Old Man&gt;|APPEARANCE_TYPE_WYRMLING_BLUE&lt;Appearance Type Wyrmling Blue&gt;|APPEARANCE_TYPE_SVIRF_MALE&lt;Appearance Type Svirf Male&gt;|APPEARANCE_TYPE_FORMIAN_QUEEN&lt;Appearance Type Formian Queen&gt;|APPEARANCE_TYPE_ZOMBIE_WARRIOR_2&lt;Appearance Type Zombie Warrior 2&gt;|APPEARANCE_TYPE_MPANTHER&lt;Appearance Type Mpanther&gt;|APPEARANCE_TYPE_ZOMBIE_WARRIOR_1&lt;Appearance Type Zombie Warrior 1&gt;|APPEARANCE_TYPE_DRYAD&lt;Appearance Type Dryad&gt;|APPEARANCE_TYPE_GRAY_OOZE&lt;Appearance Type Gray Ooze&gt;|APPEARANCE_TYPE_BEAR_POLAR&lt;Appearance Type Bear Polar&gt;|APPEARANCE_TYPE_HEDRALINE&lt;Appearance Type Hedraline&gt;|APPEARANCE_TYPE_ZOMBIE&lt;Appearance Type Zombie&gt;|APPEARANCE_TYPE_GOBLIN_A&lt;Appearance Type Goblin A&gt;|APPEARANCE_TYPE_OBJECT_GREEN&lt;Appearance Type Object Green&gt;|APPEARANCE_TYPE_OGRE_MAGEB&lt;Appearance Type Ogre Mageb&gt;|APPEARANCE_TYPE_WYRMLING_COPPER&lt;Appearance Type Wyrmling Copper&gt;|APPEARANCE_TYPE_GOLEM_MITHRAL&lt;Appearance Type Golem Mithral&gt;|APPEARANCE_TYPE_DRAGON_BLACK&lt;Appearance Type Dragon Black&gt;|APPEARANCE_TYPE_LIZARDFOLK_B&lt;Appearance Type Lizardfolk B&gt;|APPEARANCE_TYPE_GOBLIN_B&lt;Appearance Type Goblin B&gt;|APPEARANCE_TYPE_LIZARDFOLK_A&lt;Appearance Type Lizardfolk A&gt;|APPEARANCE_TYPE_TROLL_CHIEFTAIN&lt;Appearance Type Troll Chieftain&gt;|APPEARANCE_TYPE_MEPHIT_EARTH&lt;Appearance Type Mephit Earth&gt;|APPEARANCE_TYPE_SPECTRE&lt;Appearance Type Spectre&gt;|APPEARANCE_TYPE_FORMIAN_MYRMARCH&lt;Appearance Type Formian Myrmarch&gt;|APPEARANCE_TYPE_WYRMLING_GOLD&lt;Appearance Type Wyrmling Gold&gt;|APPEARANCE_TYPE_ELEMENTAL_FIRE&lt;Appearance Type Elemental Fire&gt;|APPEARANCE_TYPE_MALE_04&lt;Appearance Type Male 04&gt;|APPEARANCE_TYPE_MALE_05&lt;Appearance Type Male 05&gt;|APPEARANCE_TYPE_MALE_02&lt;Appearance Type Male 02&gt;|APPEARANCE_TYPE_MALE_03&lt;Appearance Type Male 03&gt;|APPEARANCE_TYPE_MALE_01&lt;Appearance Type Male 01&gt;|APPEARANCE_TYPE_SPIDER_SWORD&lt;Appearance Type Spider Sword&gt;|APPEARANCE_TYPE_MEPHIT_SALT&lt;Appearance Type Mephit Salt&gt;|APPEARANCE_TYPE_NWN_NASHER&lt;Appearance Type Nwn Nasher&gt;|APPEARANCE_TYPE_OGRE_MAGE&lt;Appearance Type Ogre Mage&gt;|APPEARANCE_TYPE_BUGBEAR_CHIEFTAIN_B&lt;Appearance Type Bugbear Chieftain B&gt;|APPEARANCE_TYPE_OX&lt;Appearance Type Ox&gt;|APPEARANCE_TYPE_SLAAD_RED&lt;Appearance Type Slaad Red&gt;|APPEARANCE_TYPE_BEETLE_SLICER&lt;Appearance Type Beetle Slicer&gt;|APPEARANCE_TYPE_CONVICT&lt;Appearance Type Convict&gt;|APPEARANCE_TYPE_GNOLL_WARRIOR&lt;Appearance Type Gnoll Warrior&gt;|APPEARANCE_TYPE_DRAGON_WHITE&lt;Appearance Type Dragon White&gt;|APPEARANCE_TYPE_ELF_NPC_FEMALE&lt;Appearance Type Elf Npc Female&gt;|APPEARANCE_TYPE_DWARF_NPC_MALE&lt;Appearance Type Dwarf Npc Male&gt;|APPEARANCE_TYPE_ELEMENTAL_WATER&lt;Appearance Type Elemental Water&gt;|APPEARANCE_TYPE_WYRMLING_WHITE&lt;Appearance Type Wyrmling White&gt;|APPEARANCE_TYPE_WYRMLING_GREEN&lt;Appearance Type Wyrmling Green&gt;|APPEARANCE_TYPE_BUGBEAR_SHAMAN_A&lt;Appearance Type Bugbear Shaman A&gt;|APPEARANCE_TYPE_BUGBEAR_SHAMAN_B&lt;Appearance Type Bugbear Shaman B&gt;|APPEARANCE_TYPE_BASILISK&lt;Appearance Type Basilisk&gt;|APPEARANCE_TYPE_VAMPIRE_MALE&lt;Appearance Type Vampire Male&gt;|APPEARANCE_TYPE_STINGER_CHIEFTAIN&lt;Appearance Type Stinger Chieftain&gt;|APPEARANCE_TYPE_SKELETON_COMMON&lt;Appearance Type Skeleton Common&gt;|APPEARANCE_TYPE_HOBGOBLIN_WIZARD&lt;Appearance Type Hobgoblin Wizard&gt;|APPEARANCE_TYPE_MEPHIT_OOZE&lt;Appearance Type Mephit Ooze&gt;|APPEARANCE_TYPE_BADGER&lt;Appearance Type Badger&gt;|APPEARANCE_TYPE_UTHGARD_TIGER_TRIBE&lt;Appearance Type Uthgard Tiger Tribe&gt;|APPEARANCE_TYPE_LEOPARD&lt;Appearance Type Leopard&gt;|APPEARANCE_TYPE_HOBGOBLIN_WARRIROR&lt;Appearance Type Hobgoblin Warriror&gt;|APPEARANCE_TYPE_BODAK&lt;Appearance Type Bodak&gt;|APPEARANCE_TYPE_BEHOLDER_MOTHER&lt;Appearance Type Beholder Mother&gt;|APPEARANCE_TYPE_COCKATRICE&lt;Appearance Type Cockatrice&gt;|APPEARANCE_TYPE_SHADOW&lt;Appearance Type Shadow&gt;|APPEARANCE_TYPE_BLOOD_SAILER&lt;Appearance Type Blood Sailer&gt;|APPEARANCE_TYPE_FEMALE_04&lt;Appearance Type Female 04&gt;|APPEARANCE_TYPE_FEMALE_03&lt;Appearance Type Female 03&gt;|APPEARANCE_TYPE_FEMALE_05&lt;Appearance Type Female 05&gt;|APPEARANCE_TYPE_GYNOSPHINX&lt;Appearance Type Gynosphinx&gt;|APPEARANCE_TYPE_FEMALE_02&lt;Appearance Type Female 02&gt;|APPEARANCE_TYPE_SKELETON_WARRIOR&lt;Appearance Type Skeleton Warrior&gt;|APPEARANCE_TYPE_FEMALE_01&lt;Appearance Type Female 01&gt;|APPEARANCE_TYPE_OBJECT_CHEST&lt;Appearance Type Object Chest&gt;|APPEARANCE_TYPE_DRAGON_SHADOW&lt;Appearance Type Dragon Shadow&gt;|APPEARANCE_TYPE_BEGGER&lt;Appearance Type Begger&gt;|APPEARANCE_TYPE_COMBAT_DUMMY&lt;Appearance Type Combat Dummy&gt;|APPEARANCE_TYPE_SVIRF_FEMALE&lt;Appearance Type Svirf Female&gt;|APPEARANCE_TYPE_ASABI_CHIEFTAIN&lt;Appearance Type Asabi Chieftain&gt;|APPEARANCE_TYPE_SPIDER_DIRE&lt;Appearance Type Spider Dire&gt;|APPEARANCE_TYPE_ALLIP&lt;Appearance Type Allip&gt;|APPEARANCE_TYPE_GOBLIN_CHIEF_B&lt;Appearance Type Goblin Chief B&gt;|APPEARANCE_TYPE_GOBLIN_CHIEF_A&lt;Appearance Type Goblin Chief A&gt;|APPEARANCE_TYPE_DRAGON_BRONZE&lt;Appearance Type Dragon Bronze&gt;|APPEARANCE_TYPE_GIANT_FIRE&lt;Appearance Type Giant Fire&gt;|APPEARANCE_TYPE_GOLEM_BONE&lt;Appearance Type Golem Bone&gt;|APPEARANCE_TYPE_DROW_WIZARD&lt;Appearance Type Drow Wizard&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_FEMALE&lt;Appearance Type Half Orc Npc Female&gt;|APPEARANCE_TYPE_OBJECT_ORANGE&lt;Appearance Type Object Orange&gt;|APPEARANCE_TYPE_OBJECT_FLAME_SMALL&lt;Appearance Type Object Flame Small&gt;|APPEARANCE_TYPE_MUMMY_GREATER&lt;Appearance Type Mummy Greater&gt;|APPEARANCE_TYPE_SLAAD_BLACK&lt;Appearance Type Slaad Black&gt;|APPEARANCE_TYPE_BEHOLDER_EYEBALL&lt;Appearance Type Beholder Eyeball&gt;|APPEARANCE_TYPE_WYRMLING_BRASS&lt;Appearance Type Wyrmling Brass&gt;|APPEARANCE_TYPE_MANTICORE&lt;Appearance Type Manticore&gt;|APPEARANCE_TYPE_INN_KEEPER&lt;Appearance Type Inn Keeper&gt;|APPEARANCE_TYPE_INVISIBLE_STALKER&lt;Appearance Type Invisible Stalker&gt;|APPEARANCE_TYPE_DOG_WINTER_WOLF&lt;Appearance Type Dog Winter Wolf&gt;|APPEARANCE_TYPE_DROW_CLERIC&lt;Appearance Type Drow Cleric&gt;|APPEARANCE_TYPE_DRAGON_COPPER&lt;Appearance Type Dragon Copper&gt;|APPEARANCE_TYPE_MUMMY_FIGHTER_2&lt;Appearance Type Mummy Fighter 2&gt;|APPEARANCE_TYPE_MEPHIT_DUST&lt;Appearance Type Mephit Dust&gt;|APPEARANCE_TYPE_DRAGON_RED&lt;Appearance Type Dragon Red&gt;|APPEARANCE_TYPE_OBJECT_CYAN&lt;Appearance Type Object Cyan&gt;|APPEARANCE_TYPE_WYRMLING_BRONZE&lt;Appearance Type Wyrmling Bronze&gt;|APPEARANCE_TYPE_COW&lt;Appearance Type Cow&gt;|APPEARANCE_TYPE_MUMMY_COMMON&lt;Appearance Type Mummy Common&gt;|APPEARANCE_TYPE_DROW_WARRIOR_3&lt;Appearance Type Drow Warrior 3&gt;|APPEARANCE_TYPE_SUCCUBUS&lt;Appearance Type Succubus&gt;|APPEARANCE_TYPE_DROW_WARRIOR_2&lt;Appearance Type Drow Warrior 2&gt;|APPEARANCE_TYPE_DROW_WARRIOR_1&lt;Appearance Type Drow Warrior 1&gt;|APPEARANCE_TYPE_GOLEM_IRON&lt;Appearance Type Golem Iron&gt;|APPEARANCE_TYPE_TROGLODYTE_WARRIOR&lt;Appearance Type Troglodyte Warrior&gt;|APPEARANCE_TYPE_BEETLE_FIRE&lt;Appearance Type Beetle Fire&gt;|APPEARANCE_TYPE_RAKSHASA_BEAR_MALE&lt;Appearance Type Rakshasa Bear Male&gt;|APPEARANCE_TYPE_MEPHISTO_BIG&lt;Appearance Type Mephisto Big&gt;|APPEARANCE_TYPE_ARANEA&lt;Appearance Type Aranea&gt;|APPEARANCE_TYPE_DOG_WOLF&lt;Appearance Type Dog Wolf&gt;|APPEARANCE_TYPE_VAMPIRE_FEMALE&lt;Appearance Type Vampire Female&gt;|APPEARANCE_TYPE_SLAAD_DEATH&lt;Appearance Type Slaad Death&gt;|APPEARANCE_TYPE_NWN_MAUGRIM&lt;Appearance Type Nwn Maugrim&gt;|APPEARANCE_TYPE_DRUEGAR_CLERIC&lt;Appearance Type Druegar Cleric&gt;|APPEARANCE_TYPE_GIANT_HILL&lt;Appearance Type Giant Hill&gt;|APPEARANCE_TYPE_SPIDER_PHASE&lt;Appearance Type Spider Phase&gt;|APPEARANCE_TYPE_DOG&lt;Appearance Type Dog&gt;|APPEARANCE_TYPE_LICH&lt;Appearance Type Lich&gt;|APPEARANCE_TYPE_COUGAR&lt;Appearance Type Cougar&gt;|APPEARANCE_TYPE_NYMPH&lt;Appearance Type Nymph&gt;|APPEARANCE_TYPE_LANTERN_ARCHON&lt;Appearance Type Lantern Archon&gt;|APPEARANCE_TYPE_PLAGUE_VICTIM&lt;Appearance Type Plague Victim&gt;|APPEARANCE_TYPE_MEPHIT_WATER&lt;Appearance Type Mephit Water&gt;|APPEARANCE_TYPE_RAT_DIRE&lt;Appearance Type Rat Dire&gt;|APPEARANCE_TYPE_HOUSE_GUARD&lt;Appearance Type House Guard&gt;|APPEARANCE_TYPE_QUASIT&lt;Appearance Type Quasit&gt;|APPEARANCE_TYPE_MINDFLAYER&lt;Appearance Type Mindflayer&gt;|APPEARANCE_TYPE_PARROT&lt;Appearance Type Parrot&gt;|APPEARANCE_TYPE_RAVEN&lt;Appearance Type Raven&gt;|APPEARANCE_TYPE_SAHUAGIN_LEADER&lt;Appearance Type Sahuagin Leader&gt;|APPEARANCE_TYPE_DOG_HELL_HOUND&lt;Appearance Type Dog Hell Hound&gt;|APPEARANCE_TYPE_BEHOLDER_MAGE&lt;Appearance Type Beholder Mage&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_MALE_02&lt;Appearance Type Half Orc Npc Male 02&gt;|APPEARANCE_TYPE_HALF_ORC_NPC_MALE_01&lt;Appearance Type Half Orc Npc Male 01&gt;|APPEARANCE_TYPE_BARTENTER&lt;Appearance Type Bartenter&gt;|APPEARANCE_TYPE_OGRE&lt;Appearance Type Ogre&gt;|APPEARANCE_TYPE_MINDFLAYER_ALHOON&lt;Appearance Type Mindflayer Alhoon&gt;|APPEARANCE_TYPE_WRAITH&lt;Appearance Type Wraith&gt;|APPEARANCE_TYPE_KID_FEMALE&lt;Appearance Type Kid Female&gt;|APPEARANCE_TYPE_OGREB&lt;Appearance Type Ogreb&gt;|APPEARANCE_TYPE_KRENSHAR&lt;Appearance Type Krenshar&gt;|APPEARANCE_TYPE_FORMIAN_&lt;Appearance Type Formian&gt;|APPEARANCE_TYPE_MUMMY_WARRIOR&lt;Appearance Type Mummy Warrior&gt;|APPEARANCE_TYPE_ELF_NPC_MALE01&lt;Appearance Type Elf Npc Male01&gt;|APPEARANCE_TYPE_HUMAN&lt;Appearance Type Human&gt;|APPEARANCE_TYPE_GNOLL_WIZ&lt;Appearance Type Gnoll Wiz&gt;|APPEARANCE_TYPE_ELF_NPC_MALE02&lt;Appearance Type Elf Npc Male02&gt;|APPEARANCE_TYPE_SEAGULL_WALKING&lt;Appearance Type Seagull Walking&gt;|APPEARANCE_TYPE_&lt;Appearance Type&gt;|APPEARANCE_TYPE_DRACOLICH&lt;Appearance Type Dracolich&gt;|APPEARANCE_TYPE_ASABI_SHAMAN&lt;Appearance Type Asabi Shaman&gt;|APPEARANCE_TYPE_IMP&lt;Appearance Type Imp&gt;|APPEARANCE_TYPE_MINOGON&lt;Appearance Type Minogon&gt;|APPEARANCE_TYPE_OBJECT_BLUE&lt;Appearance Type Object Blue&gt;|APPEARANCE_TYPE_NWN_MORAG&lt;Appearance Type Nwn Morag&gt;|APPEARANCE_TYPE_SKELETAL_DEVOURER&lt;Appearance Type Skeletal Devourer&gt;|APPEARANCE_TYPE_ETTIN&lt;Appearance Type Ettin&gt;|APPEARANCE_TYPE_NWN_AARIN&lt;Appearance Type Nwn Aarin&gt;|APPEARANCE_TYPE_SPIDER_GIANT&lt;Appearance Type Spider Giant&gt;|APPEARANCE_TYPE_ORC_SHAMAN_B&lt;Appearance Type Orc Shaman B&gt;|APPEARANCE_TYPE_ORC_SHAMAN_A&lt;Appearance Type Orc Shaman A&gt;|APPEARANCE_TYPE_SAHUAGIN_CLERIC&lt;Appearance Type Sahuagin Cleric&gt;|APPEARANCE_TYPE_CHICKEN&lt;Appearance Type Chicken&gt;|APPEARANCE_TYPE_DRAGON_BRASS&lt;Appearance Type Dragon Brass&gt;|APPEARANCE_TYPE_DRUEGAR_FIGHTER&lt;Appearance Type Druegar Fighter&gt;|APPEARANCE_TYPE_DOG_FENHOUND&lt;Appearance Type Dog Fenhound&gt;|APPEARANCE_TYPE_GARGOYLE&lt;Appearance Type Gargoyle&gt;|APPEARANCE_TYPE_OBJECT_YELLOW&lt;Appearance Type Object Yellow&gt;|APPEARANCE_TYPE_BEHOLDER&lt;Appearance Type Beholder&gt;|APPEARANCE_TYPE_DEER_STAG&lt;Appearance Type Deer Stag&gt;|APPEARANCE_TYPE_WAR_DEVOURER&lt;Appearance Type War Devourer&gt;|APPEARANCE_TYPE_DROW_SLAVE&lt;Appearance Type Drow Slave&gt;|APPEARANCE_TYPE_GIANT_FROST&lt;Appearance Type Giant Frost&gt;|APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_A&lt;Appearance Type Lizardfolk Shaman A&gt;|APPEARANCE_TYPE_HALF_ORC&lt;Appearance Type Half Orc&gt;|APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_B&lt;Appearance Type Lizardfolk Shaman B&gt;|APPEARANCE_TYPE_SKELETON_MAGE&lt;Appearance Type Skeleton Mage&gt;|APPEARANCE_TYPE_ELF&lt;Appearance Type Elf&gt;|APPEARANCE_TYPE_ELEMENTAL_FIRE_ELDER&lt;Appearance Type Elemental Fire Elder&gt;|APPEARANCE_TYPE_BOAR&lt;Appearance Type Boar&gt;|APPEARANCE_TYPE_CULT_MEMBER&lt;Appearance Type Cult Member&gt;|APPEARANCE_TYPE_MINDFLAYER_2&lt;Appearance Type Mindflayer 2&gt;|APPEARANCE_TYPE_GOLEM_CLAY&lt;Appearance Type Golem Clay&gt;|APPEARANCE_TYPE_ZOMBIE_ROTTING&lt;Appearance Type Zombie Rotting&gt;|APPEARANCE_TYPE_SEA_HAG&lt;Appearance Type Sea Hag&gt;|APPEARANCE_TYPE_GORGON&lt;Appearance Type Gorgon&gt;|APPEARANCE_TYPE_ELEMENTAL_EARTH&lt;Appearance Type Elemental Earth&gt;|APPEARANCE_TYPE_SHARK_GOBLIN&lt;Appearance Type Shark Goblin&gt;|APPEARANCE_TYPE_PENGIUN&lt;Appearance Type Pengiun&gt;|APPEARANCE_TYPE_WILL_O_WISP&lt;Appearance Type Will O Wisp&gt;|APPEARANCE_TYPE_DRIDER&lt;Appearance Type Drider&gt;|APPEARANCE_TYPE_GNOME&lt;Appearance Type Gnome&gt;|APPEARANCE_TYPE_KOBOLD_SHAMAN_A&lt;Appearance Type Kobold Shaman A&gt;|APPEARANCE_TYPE_OBJECT_CHAIR&lt;Appearance Type Object Chair&gt;|APPEARANCE_TYPE_KOBOLD_SHAMAN_B&lt;Appearance Type Kobold Shaman B&gt;|APPEARANCE_TYPE_GHOUL_LORD&lt;Appearance Type Ghoul Lord&gt;|APPEARANCE_TYPE_DEMI_LICH&lt;Appearance Type Demi Lich&gt;|APPEARANCE_TYPE_OBJECT_TABLE&lt;Appearance Type Object Table&gt;|APPEARANCE_TYPE_HOOK_HORROR&lt;Appearance Type Hook Horror&gt;|APPEARANCE_TYPE_BEAR_DIRE&lt;Appearance Type Bear Dire&gt;|APPEARANCE_TYPE_BAT_HORROR&lt;Appearance Type Bat Horror&gt;|APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_A&lt;Appearance Type Lizardfolk Warrior A&gt;|APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_B&lt;Appearance Type Lizardfolk Warrior B&gt;|APPEARANCE_TYPE_MINOTAUR_SHAMAN&lt;Appearance Type Minotaur Shaman&gt;|APPEARANCE_TYPE_ASABI_WARRIOR&lt;Appearance Type Asabi Warrior&gt;|APPEARANCE_TYPE_OGRE_CHIEFTAIN&lt;Appearance Type Ogre Chieftain&gt;|APPEARANCE_TYPE_HALF_ELF&lt;Appearance Type Half Elf&gt;|APPEARANCE_TYPE_TROGLODYTE_CLERIC&lt;Appearance Type Troglodyte Cleric&gt;|APPEARANCE_TYPE_WERERAT&lt;Appearance Type Wererat&gt;|APPEARANCE_TYPE_DRAGON_GREEN&lt;Appearance Type Dragon Green&gt;|APPEARANCE_TYPE_WIGHT&lt;Appearance Type Wight&gt;|APPEARANCE_TYPE_DROW_FIGHTER&lt;Appearance Type Drow Fighter&gt;|APPEARANCE_TYPE_OBJECT_CANDLE&lt;Appearance Type Object Candle&gt;|APPEARANCE_TYPE_MEDUSA&lt;Appearance Type Medusa&gt;|APPEARANCE_TYPE_DROW_MATRON&lt;Appearance Type Drow Matron&gt;|APPEARANCE_TYPE_DWARF_NPC_FEMALE&lt;Appearance Type Dwarf Npc Female&gt;|APPEARANCE_TYPE_DRIDER_CHIEF&lt;Appearance Type Drider Chief&gt;|APPEARANCE_TYPE_HALFLING_NPC_MALE&lt;Appearance Type Halfling Npc Male&gt;|APPEARANCE_TYPE_NWN_ARIBETH_EVIL&lt;Appearance Type Nwn Aribeth Evil&gt;|APPEARANCE_TYPE_OBJECT_WHITE&lt;Appearance Type Object White&gt;|APPEARANCE_TYPE_INVALID&lt;Appearance Type Invalid&gt;|APPEARANCE_TYPE_MEPHIT_STEAM&lt;Appearance Type Mephit Steam&gt;|APPEARANCE_TYPE_WAITRESS&lt;Appearance Type Waitress&gt;|APPEARANCE_TYPE_BEETLE_STINK&lt;Appearance Type Beetle Stink&gt;|APPEARANCE_TYPE_DOG_SHADOW_MASTIF&lt;Appearance Type Dog Shadow Mastif&gt;|APPEARANCE_TYPE_GIANT_MOUNTAIN&lt;Appearance Type Giant Mountain&gt;|APPEARANCE_TYPE_DRAGON_BLUE&lt;Appearance Type Dragon Blue&gt;|APPEARANCE_TYPE_SHARK_MAKO&lt;Appearance Type Shark Mako&gt;|APPEARANCE_TYPE_SHADOW_FIEND&lt;Appearance Type Shadow Fiend&gt;|APPEARANCE_TYPE_MEPHIT_MAGMA&lt;Appearance Type Mephit Magma&gt;|APPEARANCE_TYPE_FALCON&lt;Appearance Type Falcon&gt;|APPEARANCE_TYPE_SKELETON_CHIEFTAIN&lt;Appearance Type Skeleton Chieftain&gt;|APPEARANCE_TYPE_CAT_CAT_DIRE&lt;Appearance Type Cat Cat Dire&gt;|APPEARANCE_TYPE_SAHUAGIN&lt;Appearance Type Sahuagin&gt;|APPEARANCE_TYPE_SPIDER_DEMON&lt;Appearance Type Spider Demon&gt;|APPEARANCE_TYPE_OCHRE_JELLY_MEDIUM&lt;Appearance Type Ochre Jelly Medium&gt;|APPEARANCE_TYPE_OBJECT_PURPLE&lt;Appearance Type Object Purple&gt;|APPEARANCE_TYPE_YUAN_TI_CHIEFTEN&lt;Appearance Type Yuan Ti Chieften&gt;|APPEARANCE_TYPE_GELATINOUS_CUBE&lt;Appearance Type Gelatinous Cube&gt;|APPEARANCE_TYPE_DWARF&lt;Appearance Type Dwarf&gt;|APPEARANCE_TYPE_GHOUL&lt;Appearance Type Ghoul&gt;|APPEARANCE_TYPE_ELEMENTAL_WATER_ELDER&lt;Appearance Type Elemental Water Elder&gt;|APPEARANCE_TYPE_DRAGON_GOLD&lt;Appearance Type Dragon Gold&gt;|APPEARANCE_TYPE_INVISIBLE_HUMAN_MALE&lt;Appearance Type Invisible Human Male&gt;|APPEARANCE_TYPE_SLAAD_GRAY&lt;Appearance Type Slaad Gray&gt;|APPEARANCE_TYPE_OBJECT_RED&lt;Appearance Type Object Red&gt;|APPEARANCE_TYPE_MEPHIT_AIR&lt;Appearance Type Mephit Air&gt;|APPEARANCE_TYPE_SHOP_KEEPER&lt;Appearance Type Shop Keeper&gt;|APPEARANCE_TYPE_WYRMLING_RED&lt;Appearance Type Wyrmling Red&gt;|APPEARANCE_TYPE_TROGLODYTE&lt;Appearance Type Troglodyte&gt;|APPEARANCE_TYPE_PSEUDODRAGON&lt;Appearance Type Pseudodragon&gt;|APPEARANCE_TYPE_DRAGON_PRIS&lt;Appearance Type Dragon Pris&gt;|APPEARANCE_TYPE_ORC_CHIEFTAIN_B&lt;Appearance Type Orc Chieftain B&gt;|APPEARANCE_TYPE_ORC_CHIEFTAIN_A&lt;Appearance Type Orc Chieftain A&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_05&lt;Appearance Type Human Npc Male 05&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_04&lt;Appearance Type Human Npc Male 04&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_01&lt;Appearance Type Human Npc Female 01&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_07&lt;Appearance Type Human Npc Male 07&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_02&lt;Appearance Type Human Npc Female 02&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_06&lt;Appearance Type Human Npc Male 06&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_03&lt;Appearance Type Human Npc Female 03&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_01&lt;Appearance Type Human Npc Male 01&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_04&lt;Appearance Type Human Npc Female 04&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_05&lt;Appearance Type Human Npc Female 05&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_03&lt;Appearance Type Human Npc Male 03&gt;|APPEARANCE_TYPE_ARIBETH&lt;Appearance Type Aribeth&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_06&lt;Appearance Type Human Npc Female 06&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_02&lt;Appearance Type Human Npc Male 02&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_09&lt;Appearance Type Human Npc Female 09&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_08&lt;Appearance Type Human Npc Female 08&gt;|APPEARANCE_TYPE_KOBOLD_CHIEF_B&lt;Appearance Type Kobold Chief B&gt;|APPEARANCE_TYPE_ELEMENTAL_AIR_ELDER&lt;Appearance Type Elemental Air Elder&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_07&lt;Appearance Type Human Npc Female 07&gt;|APPEARANCE_TYPE_KOBOLD_CHIEF_A&lt;Appearance Type Kobold Chief A&gt;|APPEARANCE_TYPE_BULETTE&lt;Appearance Type Bulette&gt;|APPEARANCE_TYPE_MEPHIT_FIRE&lt;Appearance Type Mephit Fire&gt;|APPEARANCE_TYPE_GIANT_FROST_FEMALE&lt;Appearance Type Giant Frost Female&gt;|APPEARANCE_TYPE_OBJECT_FLAME_LARGE&lt;Appearance Type Object Flame Large&gt;|APPEARANCE_TYPE_OCHRE_JELLY_LARGE&lt;Appearance Type Ochre Jelly Large&gt;|APPEARANCE_TYPE_STINGER_MAGE&lt;Appearance Type Stinger Mage&gt;|APPEARANCE_TYPE_ETTERCAP&lt;Appearance Type Ettercap&gt;|APPEARANCE_TYPE_BOAR_DIRE&lt;Appearance Type Boar Dire&gt;|APPEARANCE_TYPE_OBJECT_BOAT&lt;Appearance Type Object Boat&gt;|APPEARANCE_TYPE_WYRMLING_BLACK&lt;Appearance Type Wyrmling Black&gt;|APPEARANCE_TYPE_BUGBEAR_A&lt;Appearance Type Bugbear A&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_12&lt;Appearance Type Human Npc Female 12&gt;|APPEARANCE_TYPE_BUGBEAR_B&lt;Appearance Type Bugbear B&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_10&lt;Appearance Type Human Npc Female 10&gt;|APPEARANCE_TYPE_HUMAN_NPC_FEMALE_11&lt;Appearance Type Human Npc Female 11&gt;|APPEARANCE_TYPE_DRIDER_FEMALE&lt;Appearance Type Drider Female&gt;|APPEARANCE_TYPE_SPIDER_WRAITH&lt;Appearance Type Spider Wraith&gt;|APPEARANCE_TYPE_DOOM_KNIGHT&lt;Appearance Type Doom Knight&gt;|APPEARANCE_TYPE_MOHRG&lt;Appearance Type Mohrg&gt;|APPEARANCE_TYPE_DEEP_ROTHE&lt;Appearance Type Deep Rothe&gt;|APPEARANCE_TYPE_INTELLECT_DEVOURER&lt;Appearance Type Intellect Devourer&gt;|APPEARANCE_TYPE_BUGBEAR_CHIEFTAN&lt;Appearance Type Bugbear Chieftan&gt;|APPEARANCE_TYPE_BEAR_KODIAK&lt;Appearance Type Bear Kodiak&gt;|APPEARANCE_TYPE_KID_MALE&lt;Appearance Type Kid Male&gt;|APPEARANCE_TYPE_SKELETON_PRIEST&lt;Appearance Type Skeleton Priest&gt;|APPEARANCE_TYPE_OBJECT_FLAME_MEDIUM&lt;Appearance Type Object Flame Medium&gt;|APPEARANCE_TYPE_GNOME_NPC_MALE&lt;Appearance Type Gnome Npc Male&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_08&lt;Appearance Type Human Npc Male 08&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_09&lt;Appearance Type Human Npc Male 09&gt;|APPEARANCE_TYPE_BALOR&lt;Appearance Type Balor&gt;|APPEARANCE_TYPE_DUERGAR_CHIEF&lt;Appearance Type Duergar Chief&gt;|APPEARANCE_TYPE_SPHINX&lt;Appearance Type Sphinx&gt;|APPEARANCE_TYPE_TROLL&lt;Appearance Type Troll&gt;|APPEARANCE_TYPE_CRAG_CAT&lt;Appearance Type Crag Cat&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_10&lt;Appearance Type Human Npc Male 10&gt;|APPEARANCE_TYPE_ELEMENTAL_EARTH_ELDER&lt;Appearance Type Elemental Earth Elder&gt;|APPEARANCE_TYPE_GOLEM_DEMONFLESH&lt;Appearance Type Golem Demonflesh&gt;|APPEARANCE_TYPE_RAKSHASA_TIGER_MALE&lt;Appearance Type Rakshasa Tiger Male&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_14&lt;Appearance Type Human Npc Male 14&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_13&lt;Appearance Type Human Npc Male 13&gt;|APPEARANCE_TYPE_BAT&lt;Appearance Type Bat&gt;|APPEARANCE_TYPE_SLAAD_WHITE&lt;Appearance Type Slaad White&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_12&lt;Appearance Type Human Npc Male 12&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_11&lt;Appearance Type Human Npc Male 11&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_18&lt;Appearance Type Human Npc Male 18&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_17&lt;Appearance Type Human Npc Male 17&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_16&lt;Appearance Type Human Npc Male 16&gt;|APPEARANCE_TYPE_HUMAN_NPC_MALE_15&lt;Appearance Type Human Npc Male 15&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Door</Name>
      <Keyword>door</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnClosed</Slot>
        <Slot>OnDamaged</Slot>
        <Slot>OnDeath</Slot>
        <Slot>OnDisarm</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnLock</Slot>
        <Slot>OnMeleeAttacked</Slot>
        <Slot>OnOpen</Slot>
        <Slot>OnSpellCastAt</Slot>
        <Slot>OnTrapTriggered</Slot>
        <Slot>OnUnlock</Slot>
        <Slot>OnUserDefined</Slot>
        <Slot>OnClick</Slot>
        <Slot>OnFailToOpen</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Dialogue</Name>
      <Keyword>dialogue</Keyword>
      <CodeSymbol>string</CodeSymbol>
      <Slots>
        <Slot>EndConversation</Slot>
        <Slot>EndConverAbort</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>DamageType</Name>
      <Keyword>damage_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>DAMAGE_TYPE_POSITIVE&lt;Positive&gt;|DAMAGE_TYPE_MAGICAL&lt;Magical&gt;|DAMAGE_TYPE_NEGATIVE&lt;Negative&gt;|DAMAGE_TYPE_DIVINE&lt;Divine&gt;|DAMAGE_TYPE_BASE_WEAPON&lt;Base Weapon&gt;|DAMAGE_TYPE_COLD&lt;Cold&gt;|DAMAGE_TYPE_ELECTRICAL&lt;Electrical&gt;|DAMAGE_TYPE_ACID&lt;Acid&gt;|DAMAGE_TYPE_PIERCING&lt;Piercing&gt;|DAMAGE_TYPE_FIRE&lt;Fire&gt;|DAMAGE_TYPE_SONIC&lt;Sonic&gt;|DAMAGE_TYPE_BLUDGEONING&lt;Bludgeoning&gt;|DAMAGE_TYPE_SLASHING&lt;Slashing&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Encounter</Name>
      <Keyword>encounter</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnEntered</Slot>
        <Slot>OnExhausted</Slot>
        <Slot>OnExit</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnUserDefined</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>EffectType</Name>
      <Keyword>effect_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>EFFECT_TYPE_CONCEALMENT&lt;Effect Type Concealment&gt;|EFFECT_TYPE_RESURRECTION&lt;Effect Type Resurrection&gt;|EFFECT_TYPE_DAZED&lt;Effect Type Dazed&gt;|EFFECT_TYPE_CONFUSED&lt;Effect Type Confused&gt;|EFFECT_TYPE_DAMAGE_IMMUNITY_INCREASE&lt;Effect Type Damage Immunity Increase&gt;|EFFECT_TYPE_AC_DECREASE&lt;Effect Type Ac Decrease&gt;|EFFECT_TYPE_DAMAGE_INCREASE&lt;Effect Type Damage Increase&gt;|EFFECT_TYPE_CUTSCENE_PARALYZE&lt;Effect Type Cutscene Paralyze&gt;|EFFECT_TYPE_ULTRAVISION&lt;Effect Type Ultravision&gt;|EFFECT_TYPE_CHARMED&lt;Effect Type Charmed&gt;|EFFECT_TYPE_SANCTUARY&lt;Effect Type Sanctuary&gt;|EFFECT_TYPE_DAMAGE_DECREASE&lt;Effect Type Damage Decrease&gt;|EFFECT_TYPE_TURNED&lt;Effect Type Turned&gt;|EFFECT_TYPE_TRUESEEING&lt;Effect Type Trueseeing&gt;|EFFECT_TYPE_SPELLLEVELABSORPTION&lt;Effect Type Spelllevelabsorption&gt;|EFFECT_TYPE_DOMINATED&lt;Effect Type Dominated&gt;|EFFECT_TYPE_SPELL_RESISTANCE_DECREASE&lt;Effect Type Spell Resistance Decrease&gt;|EFFECT_TYPE_MOVEMENT_SPEED_DECREASE&lt;Effect Type Movement Speed Decrease&gt;|EFFECT_TYPE_BLINDNESS&lt;Effect Type Blindness&gt;|EFFECT_TYPE_SKILL_DECREASE&lt;Effect Type Skill Decrease&gt;|EFFECT_TYPE_DISPELMAGICBEST&lt;Effect Type Dispelmagicbest&gt;|EFFECT_TYPE_SWARM&lt;Effect Type Swarm&gt;|EFFECT_TYPE_ELEMENTALSHIELD&lt;Effect Type Elementalshield&gt;|EFFECT_TYPE_DISPELMAGICALL&lt;Effect Type Dispelmagicall&gt;|EFFECT_TYPE_SLOW&lt;Effect Type Slow&gt;|EFFECT_TYPE_SEEINVISIBLE&lt;Effect Type Seeinvisible&gt;|EFFECT_TYPE_ARCANE_SPELL_FAILURE&lt;Effect Type Arcane Spell Failure&gt;|EFFECT_TYPE_PETRIFY&lt;Effect Type Petrify&gt;|EFFECT_TYPE_ABILITY_INCREASE&lt;Effect Type Ability Increase&gt;|EFFECT_TYPE_ENTANGLE&lt;Effect Type Entangle&gt;|EFFECT_TYPE_DAMAGE_IMMUNITY_DECREASE&lt;Effect Type Damage Immunity Decrease&gt;|EFFECT_TYPE_INVULNERABLE&lt;Effect Type Invulnerable&gt;|EFFECT_TYPE_ATTACK_DECREASE&lt;Effect Type Attack Decrease&gt;|EFFECT_TYPE_DEAF&lt;Effect Type Deaf&gt;|EFFECT_TYPE_REGENERATE&lt;Effect Type Regenerate&gt;|EFFECT_TYPE_DARKNESS&lt;Effect Type Darkness&gt;|EFFECT_TYPE_AREA_OF_EFFECT&lt;Effect Type Area Of Effect&gt;|EFFECT_TYPE_TIMESTOP&lt;Effect Type Timestop&gt;|EFFECT_TYPE_CUTSCENEGHOST&lt;Effect Type Cutsceneghost&gt;|EFFECT_TYPE_SPELL_RESISTANCE_INCREASE&lt;Effect Type Spell Resistance Increase&gt;|EFFECT_TYPE_CURSE&lt;Effect Type Curse&gt;|EFFECT_TYPE_SLEEP&lt;Effect Type Sleep&gt;|EFFECT_TYPE_SPELL_FAILURE&lt;Effect Type Spell Failure&gt;|EFFECT_TYPE_HASTE&lt;Effect Type Haste&gt;|EFFECT_TYPE_SKILL_INCREASE&lt;Effect Type Skill Increase&gt;|EFFECT_TYPE_ATTACK_INCREASE&lt;Effect Type Attack Increase&gt;|EFFECT_TYPE_STUNNED&lt;Effect Type Stunned&gt;|EFFECT_TYPE_MOVEMENT_SPEED_INCREASE&lt;Effect Type Movement Speed Increase&gt;|EFFECT_TYPE_ABILITY_DECREASE&lt;Effect Type Ability Decrease&gt;|EFFECT_TYPE_PARALYZE&lt;Effect Type Paralyze&gt;|EFFECT_TYPE_MISS_CHANCE&lt;Effect Type Miss Chance&gt;|EFFECT_TYPE_ETHEREAL&lt;Effect Type Ethereal&gt;|EFFECT_TYPE_VISUALEFFECT&lt;Effect Type Visualeffect&gt;|EFFECT_TYPE_DISEASE&lt;Effect Type Disease&gt;|EFFECT_TYPE_BEAM&lt;Effect Type Beam&gt;|EFFECT_TYPE_SAVING_THROW_DECREASE&lt;Effect Type Saving Throw Decrease&gt;|EFFECT_TYPE_DAMAGE_REDUCTION&lt;Effect Type Damage Reduction&gt;|EFFECT_TYPE_FRIGHTENED&lt;Effect Type Frightened&gt;|EFFECT_TYPE_DAMAGE_RESISTANCE&lt;Effect Type Damage Resistance&gt;|EFFECT_TYPE_CUTSCENEIMMOBILIZE&lt;Effect Type Cutsceneimmobilize&gt;|EFFECT_TYPE_SILENCE&lt;Effect Type Silence&gt;|EFFECT_TYPE_DISAPPEARAPPEAR&lt;Effect Type Disappearappear&gt;|EFFECT_TYPE_POLYMORPH&lt;Effect Type Polymorph&gt;|EFFECT_TYPE_TEMPORARY_HITPOINTS&lt;Effect Type Temporary Hit Points&gt;|EFFECT_TYPE_INVALIDEFFECT&lt;Effect Type Invalideffect&gt;|EFFECT_TYPE_POISON&lt;Effect Type Poison&gt;|EFFECT_TYPE_IMMUNITY&lt;Effect Type Immunity&gt;|EFFECT_TYPE_AC_INCREASE&lt;Effect Type Ac Increase&gt;|EFFECT_TYPE_TURN_RESISTANCE_DECREASE&lt;Effect Type Turn Resistance Decrease&gt;|EFFECT_TYPE_NEGATIVELEVEL&lt;Effect Type Negativelevel&gt;|EFFECT_TYPE_IMPROVEDINVISIBILITY&lt;Effect Type Improvedinvisibility&gt;|EFFECT_TYPE_SPELL_IMMUNITY&lt;Effect Type Spell Immunity&gt;|EFFECT_TYPE_INVISIBILITY&lt;Effect Type Invisibility&gt;|EFFECT_TYPE_SAVING_THROW_INCREASE&lt;Effect Type Saving Throw Increase&gt;|EFFECT_TYPE_TURN_RESISTANCE_INCREASE&lt;Effect Type Turn Resistance Increase&gt;|EFFECT_TYPE_ENEMY_ATTACK_BONUS&lt;Effect Type Enemy Attack Bonus&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Number</Name>
      <Keyword>float</Keyword>
      <CodeSymbol>float</CodeSymbol>
      <GUI>JSPINNER</GUI>
    </Type>
    <Type>
      <Name>LockModify</Name>
      <Keyword>lock_modify</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Unlock&gt;|TRUE&lt;Lock&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>BodyPart</Name>
      <Keyword>body_part</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>CREATURE_PART_RIGHT_FOREARM&lt;Right Forearm&gt;|CREATURE_PART_LEFT_HAND&lt;Left Hand&gt;|CREATURE_PART_RIGHT_BICEP&lt;Right Bicep&gt;|CREATURE_PART_LEFT_FOREARM&lt;Left Forearm&gt;|CREATURE_PART_NECK&lt;Neck&gt;|CREATURE_PART_LEFT_BICEP&lt;Left Bicep&gt;|CREATURE_PART_RIGHT_FOOT&lt;Right Foot&gt;|CREATURE_PART_RIGHT_SHIN&lt;Right Shin&gt;|CREATURE_PART_BELT&lt;Belt&gt;|CREATURE_PART_PELVIS&lt;Pelvis&gt;|CREATURE_PART_RIGHT_SHOULDER&lt;Right Shoulder&gt;|CREATURE_PART_TORSO&lt;Torso&gt;|CREATURE_PART_RIGHT_HAND&lt;Right Hand&gt;|CREATURE_PART_RIGHT_THIGH&lt;Right Thigh&gt;|CREATURE_PART_LEFT_SHIN&lt;Left Shin&gt;|CREATURE_PART_LEFT_SHOULDER&lt;Left Shoulder&gt;|CREATURE_PART_LEFT_THIGH&lt;Left Thigh&gt;|CREATURE_PART_HEAD&lt;Head&gt;|CREATURE_PART_LEFT_FOOT&lt;Left Foot&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>ObjectType</Name>
      <Keyword>object_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>OBJECT_TYPE_AREA_OF_EFFECT&lt;Area Of Effect&gt;|OBJECT_TYPE_INVALID&lt;Invalid&gt;|OBJECT_TYPE_CREATURE&lt;Creature&gt;|OBJECT_TYPE_STORE&lt;Store&gt;|OBJECT_TYPE_PLACEABLE&lt;Placeable&gt;|OBJECT_TYPE_TRIGGER&lt;Trigger&gt;|OBJECT_TYPE_ITEM&lt;Item&gt;|OBJECT_TYPE_WAYPOINT&lt;Waypoint&gt;|OBJECT_TYPE_ENCOUNTER&lt;Encounter&gt;|OBJECT_TYPE_ALL&lt;Object&gt;|OBJECT_TYPE_DOOR&lt;Door&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>InventorySlot</Name>
      <Keyword>inventory_slot</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>INVENTORY_SLOT_RIGHTHAND&lt;Right Hand&gt;|INVENTORY_SLOT_CHEST&lt;Chest&gt;|INVENTORY_SLOT_NECK&lt;Neck&gt;|INVENTORY_SLOT_BOLTS&lt;Bolts&gt;|INVENTORY_SLOT_CWEAPON_B&lt;Creature Special Attack&gt;|INVENTORY_SLOT_BOOTS&lt;Boots&gt;|INVENTORY_SLOT_LEFTRING&lt;Left Ring&gt;|INVENTORY_SLOT_CARMOUR&lt;Creature Armour&gt;|INVENTORY_SLOT_HEAD&lt;Head&gt;|INVENTORY_SLOT_ARMS&lt;Arms&gt;|INVENTORY_SLOT_CWEAPON_L&lt;Creature Left Attack&gt;|INVENTORY_SLOT_CWEAPON_R&lt;Creature Right Attack&gt;|INVENTORY_SLOT_ARROWS&lt;Arrows&gt;|INVENTORY_SLOT_BULLETS&lt;Bullets&gt;|INVENTORY_SLOT_RIGHTRING&lt;Right Ring&gt;|INVENTORY_SLOT_BELT&lt;Belt&gt;|INVENTORY_SLOT_LEFTHAND&lt;Left Hand&gt;|INVENTORY_SLOT_CLOAK&lt;Cloak&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>ActionMode</Name>
      <Keyword>action_mode</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ACTION_MODE_POWER_ATTACK&lt;Power Attack&gt;|ACTION_MODE_STEALTH&lt;Stealth&gt;|ACTION_MODE_DETECT&lt;Detect&gt;|ACTION_MODE_IMPROVED_EXPERTISE&lt;Improved Expertise&gt;|ACTION_MODE_FLURRY_OF_BLOWS&lt;Flurry Of Blows&gt;|ACTION_MODE_DEFENSIVE_CAST&lt;Defensive Cast&gt;|ACTION_MODE_EXPERTISE&lt;Expertise&gt;|ACTION_MODE_IMPROVED_POWER_ATTACK&lt;Improved Power Attack&gt;|ACTION_MODE_RAPID_SHOT&lt;Rapid Shot&gt;|ACTION_MODE_COUNTERSPELL&lt;Counterspell&gt;|ACTION_MODE_DIRTY_FIGHTING&lt;Dirty Fighting&gt;|ACTION_MODE_PARRY&lt;Parry&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>NumberOperator</Name>
      <Keyword>number_operator</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>3&lt;Greater Than or Equal To&gt;|2&lt;Equal To&gt;|1&lt;Less Than&gt;|0&lt;Greater Than&gt;|4&lt;Less Than or Equal To&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>VisualEffectBeam</Name>
      <Keyword>visual_effect_beam</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_BEAM_LIGHTNING&lt;Beam Lightning&gt;|VFX_BEAM_SILENT_LIGHTNING&lt;Beam Silent Lightning&gt;|VFX_BEAM_SILENT_FIRE&lt;Beam Silent Fire&gt;|VFX_BEAM_EVIL&lt;Beam Evil&gt;|VFX_BEAM_SILENT_COLD&lt;Beam Silent Cold&gt;|VFX_BEAM_FIRE&lt;Beam Fire&gt;|VFX_BEAM_COLD&lt;Beam Cold&gt;|VFX_BEAM_MIND&lt;Beam Mind&gt;|VFX_BEAM_ODD&lt;Beam Odd&gt;|VFX_BEAM_HOLY&lt;Beam Holy&gt;|VFX_BEAM_SILENT_MIND&lt;Beam Silent Mind&gt;|VFX_BEAM_SILENT_EVIL&lt;Beam Silent Evil&gt;|VFX_BEAM_FIRE_LASH&lt;Beam Fire Lash&gt;|VFX_BEAM_SILENT_ODD&lt;Beam Silent Odd&gt;|VFX_BEAM_SILENT_HOLY&lt;Beam Silent Holy&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Event</Name>
      <Keyword>event</Keyword>
      <CodeSymbol>event</CodeSymbol>
    </Type>
    <Type>
      <Name>CombatMode</Name>
      <Keyword>combat_mode</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>COMBAT_MODE_POWER_ATTACK&lt;Power Attack&gt;|COMBAT_MODE_FLURRY_OF_BLOWS&lt;Flurry Of Blows&gt;|COMBAT_MODE_IMPROVED_EXPERTISE&lt;Improved Expertise&gt;|COMBAT_MODE_DEFENSIVE_STANCE&lt;Defensive Stance&gt;|COMBAT_MODE_PARRY&lt;Parry&gt;|COMBAT_MODE_DIRTY_FIGHTING&lt;Dirty Fighting&gt;|COMBAT_MODE_DEFENSIVE_CASTING&lt;Defensive Casting&gt;|COMBAT_MODE_INVALID&lt;Invalid&gt;|COMBAT_MODE_EXPERTISE&lt;Expertise&gt;|COMBAT_MODE_RAPID_SHOT&lt;Rapid Shot&gt;|COMBAT_MODE_IMPROVED_POWER_ATTACK&lt;Improved Power Attack&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Gender</Name>
      <Keyword>gender</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>GENDER_BOTH&lt;Gender Both&gt;|GENDER_NONE&lt;Gender None&gt;|GENDER_OTHER&lt;Gender Other&gt;|GENDER_MALE&lt;Gender Male&gt;|GENDER_FEMALE&lt;Gender Female&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Weather</Name>
      <Keyword>weather</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>WEATHER_RAIN&lt;Rain&gt;|WEATHER_USE_AREA_SETTINGS&lt;Use Area Settings&gt;|WEATHER_SNOW&lt;Snow&gt;|WEATHER_CLEAR&lt;Clear&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>VisualEffectImpact</Name>
      <Keyword>visual_effect_impact</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_IMP_FLAME_M&lt;Imp Flame M&gt;|VFX_IMP_PULSE_NEGATIVE&lt;Imp Pulse Negative&gt;|VFX_IMP_AURA_FEAR&lt;Imp Aura Fear&gt;|VFX_IMP_RESTORATION&lt;Imp Restoration&gt;|VFX_IMP_FLAME_S&lt;Imp Flame S&gt;|VFX_IMP_LIGHTNING_M&lt;Imp Lightning M&gt;|VFX_IMP_ELEMENTAL_PROTECTION&lt;Imp Elemental Protection&gt;|VFX_IMP_POISON_S&lt;Imp Poison S&gt;|VFX_IMP_DESTRUCTION&lt;Imp Destruction&gt;|VFX_IMP_SPELL_MANTLE_USE&lt;Imp Spell Mantle Use&gt;|VFX_IMP_HEAD_ELECTRICITY&lt;Imp Head Electricity&gt;|VFX_IMP_SPIKE_TRAP&lt;Imp Spike Trap&gt;|VFX_IMP_LIGHTNING_S&lt;Imp Lightning S&gt;|VFX_IMP_SILENCE&lt;Imp Silence&gt;|VFX_IMP_HEAD_MIND&lt;Imp Head Mind&gt;|VFX_IMP_HEAD_HOLY&lt;Imp Head Holy&gt;|VFX_IMP_NEGATIVE_ENERGY&lt;Imp Negative Energy&gt;|VFX_IMP_PULSE_COLD&lt;Imp Pulse Cold&gt;|VFX_IMP_DISPEL&lt;Imp Dispel&gt;|VFX_IMP_MIRV_FLAME&lt;Imp Mirv Flame&gt;|VFX_IMP_HEALING_G&lt;Imp Healing G&gt;|VFX_IMP_BREACH&lt;Imp Breach&gt;|VFX_IMP_RAISE_DEAD&lt;Imp Raise Dead&gt;|VFX_IMP_HEAD_EVIL&lt;Imp Head Evil&gt;|VFX_IMP_DEATH&lt;Imp Death&gt;|VFX_IMP_FROST_S&lt;Imp Frost S&gt;|VFX_IMP_HEALING_L&lt;Imp Healing L&gt;|VFX_IMP_GOOD_HELP&lt;Imp Good Help&gt;|VFX_IMP_HEALING_M&lt;Imp Healing M&gt;|VFX_IMP_DEATH_L&lt;Imp Death L&gt;|VFX_IMP_DOMINATE_S&lt;Imp Dominate S&gt;|VFX_IMP_FROST_L&lt;Imp Frost L&gt;|VFX_IMP_DISPEL_DISJUNCTION&lt;Imp Dispel Disjunction&gt;|VFX_IMP_DOOM&lt;Imp Doom&gt;|VFX_IMP_AURA_HOLY&lt;Imp Aura Holy&gt;|VFX_IMP_FORTITUDE_SAVING_THROW_USE&lt;Imp Fortitude Saving Throw Use&gt;|VFX_IMP_DEATH_WARD&lt;Imp Death Ward&gt;|VFX_IMP_UNSUMMON&lt;Imp Unsummon&gt;|VFX_IMP_HEAD_ODD&lt;Imp Head Odd&gt;|VFX_IMP_SUPER_HEROISM&lt;Imp Super Heroism&gt;|VFX_IMP_IMPROVE_ABILITY_SCORE&lt;Imp Improve Ability Score&gt;|VFX_IMP_GLOBE_USE&lt;Imp Globe Use&gt;|VFX_IMP_HEAD_COLD&lt;Imp Head Cold&gt;|VFX_IMP_MAGBLUE&lt;Imp Magblue&gt;|VFX_IMP_HEALING_S&lt;Imp Healing S&gt;|VFX_IMP_CHARM&lt;Imp Charm&gt;|VFX_IMP_DIVINE_STRIKE_FIRE&lt;Imp Divine Strike Fire&gt;|VFX_IMP_RESTORATION_GREATER&lt;Imp Restoration Greater&gt;|VFX_IMP_HASTE&lt;Imp Haste&gt;|VFX_IMP_STUN&lt;Imp Stun&gt;|VFX_IMP_HEALING_X&lt;Imp Healing X&gt;|VFX_IMP_DISEASE_S&lt;Imp Disease S&gt;|VFX_IMP_HEAD_FIRE&lt;Imp Head Fire&gt;|VFX_IMP_CONFUSION_S&lt;Imp Confusion S&gt;|VFX_IMP_PULSE_HOLY&lt;Imp Pulse Holy&gt;|VFX_IMP_DAZED_S&lt;Imp Dazed S&gt;|VFX_IMP_HEAD_ACID&lt;Imp Head Acid&gt;|VFX_IMP_KNOCK&lt;Imp Knock&gt;|VFX_IMP_HEAD_SONIC&lt;Imp Head Sonic&gt;|VFX_IMP_PULSE_WIND&lt;Imp Pulse Wind&gt;|VFX_IMP_HEAD_NATURE&lt;Imp Head Nature&gt;|VFX_IMP_REDUCE_ABILITY_SCORE&lt;Imp Reduce Ability Score&gt;|VFX_IMP_MAGICAL_VISION&lt;Imp Magical Vision&gt;|VFX_IMP_REMOVE_CONDITION&lt;Imp Remove Condition&gt;|VFX_IMP_SLOW&lt;Imp Slow&gt;|VFX_IMP_MIRV&lt;Imp Mirv&gt;|VFX_IMP_HEAD_HEAL&lt;Imp Head Heal&gt;|VFX_IMP_GREASE&lt;Imp Grease&gt;|VFX_IMP_ACID_L&lt;Imp Acid L&gt;|VFX_IMP_WILL_SAVING_THROW_USE&lt;Imp Will Saving Throw Use&gt;|VFX_IMP_POLYMORPH&lt;Imp Polymorph&gt;|VFX_IMP_SLEEP&lt;Imp Sleep&gt;|VFX_IMP_PULSE_WATER&lt;Imp Pulse Water&gt;|VFX_IMP_REFLEX_SAVE_THROW_USE&lt;Imp Reflex Save Throw Use&gt;|VFX_IMP_SUNSTRIKE&lt;Imp Sunstrike&gt;|VFX_IMP_AURA_UNEARTHLY&lt;Imp Aura Unearthly&gt;|VFX_IMP_ACID_S&lt;Imp Acid S&gt;|VFX_IMP_MAGIC_PROTECTION&lt;Imp Magic Protection&gt;|VFX_IMP_FEAR_S&lt;Imp Fear S&gt;|VFX_IMP_PULSE_NATURE&lt;Imp Pulse Nature&gt;|VFX_IMP_PULSE_FIRE&lt;Imp Pulse Fire&gt;|VFX_IMP_EVIL_HELP&lt;Imp Evil Help&gt;|VFX_IMP_BLIND_DEAF_M&lt;Imp Blind Deaf M&gt;|VFX_IMP_POISON_L&lt;Imp Poison L&gt;|VFX_IMP_RESTORATION_LESSER&lt;Imp Restoration Lesser&gt;|VFX_IMP_AURA_NEGATIVE_ENERGY&lt;Imp Aura Negative Energy&gt;|VFX_IMP_AC_BONUS&lt;Imp Ac Bonus&gt;|VFX_IMP_SONIC&lt;Imp Sonic&gt;|VFX_IMP_HOLY_AID&lt;Imp Holy Aid&gt;|VFX_IMP_MAGIC_RESISTANCE_USE&lt;Imp Magic Resistance Use&gt;|VFX_IMP_HARM&lt;Imp Harm&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>PlaceableAnimation</Name>
      <Keyword>placeable_animation</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ANIMATION_PLACEABLE_CLOSE&lt;Animation Placeable Close&gt;|ANIMATION_PLACEABLE_OPEN&lt;Animation Placeable Open&gt;|ANIMATION_PLACEABLE_DEACTIVATE&lt;Animation Placeable Deactivate&gt;|ANIMATION_PLACEABLE_ACTIVATE&lt;Animation Placeable Activate&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Spell</Name>
      <Keyword>spell</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SPELL_RAY_OF_FROST&lt;Ray Of Frost&gt;|SPELL_RAISE_DEAD&lt;Raise Dead&gt;|SPELL_CURE_MODERATE_WOUNDS&lt;Cure Moderate Wounds&gt;|SPELL_CREATE_GREATER_UNDEAD&lt;Create Greater Undead&gt;|SPELL_SHADES_STONESKIN&lt;Shades Stoneskin&gt;|SPELL_DISPEL_MAGIC&lt;Dispel Magic&gt;|SPELL_SOUND_BURST&lt;Sound Burst&gt;|SPELL_FEAR&lt;Fear&gt;|SPELL_UNHOLY_AURA&lt;Unholy Aura&gt;|SPELL_GREATER_BULLS_STRENGTH&lt;Greater Bulls Strength&gt;|SPELL_PRISMATIC_SPRAY&lt;Prismatic Spray&gt;|SPELL_GREATER_FOXS_CUNNING&lt;Greater Foxs Cunning&gt;|SPELL_MAGIC_CIRCLE_AGAINST_LAW&lt;Magic Circle Against Law&gt;|SPELL_EAGLE_SPLEDOR&lt;Eagle Spledor&gt;|SPELL_SHAPECHANGE&lt;Shapechange&gt;|SPELL_PHANTASMAL_KILLER&lt;Phantasmal Killer&gt;|SPELL_CURE_SERIOUS_WOUNDS&lt;Cure Serious Wounds&gt;|SPELL_ENTANGLE&lt;Entangle&gt;|SPELL_NEGATIVE_ENERGY_RAY&lt;Negative Energy Ray&gt;|SPELL_CONTROL_UNDEAD&lt;Control Undead&gt;|SPELL_AWAKEN&lt;Awaken&gt;|SPELL_LEGEND_LORE&lt;Legend Lore&gt;|SPELL_SUMMON_CREATURE_VII&lt;Summon Creature Vii&gt;|SPELL_MASS_BLINDNESS_AND_DEAFNESS&lt;Mass Blindness And Deafness&gt;|SPELL_ANIMATE_DEAD&lt;Animate Dead&gt;|SPELL_FLAME_STRIKE&lt;Flame Strike&gt;|SPELL_HORRID_WILTING&lt;Horrid Wilting&gt;|SPELL_HOLY_AURA&lt;Holy Aura&gt;|SPELL_REGENERATE&lt;Regenerate&gt;|SPELL_BLESS_WEAPON&lt;Bless Weapon&gt;|SPELL_BANE&lt;Bane&gt;|SPELL_GREATER_CATS_GRACE&lt;Greater Cats Grace&gt;|SPELL_DOMINATE_ANIMAL&lt;Dominate Animal&gt;|SPELL_SHADES_FIREBALL&lt;Shades Fireball&gt;|SPELL_GATE&lt;Gate&gt;|SPELL_INCENDIARY_CLOUD&lt;Incendiary Cloud&gt;|SPELL_HARM&lt;Harm&gt;|SPELL_SEE_INVISIBILITY&lt;See Invisibility&gt;|SPELL_GREATER_ENDURANCE&lt;Greater Endurance&gt;|SPELL_SHADOW_CONJURATION_MAGE_ARMOR&lt;Shadow Conjuration Mage Armor&gt;|SPELL_GREATER_SHADOW_CONJURATION_MINOR_GLOBE&lt;Greater Shadow Conjuration Minor Globe&gt;|SPELL_REMOVE_FEAR&lt;Remove Fear&gt;|SPELL_HOLD_MONSTER&lt;Hold Monster&gt;|SPELL_MAGE_ARMOR&lt;Mage Armor&gt;|SPELL_BURNING_HANDS&lt;Burning Hands&gt;|SPELL_CLOUDKILL&lt;Cloudkill&gt;|SPELL_CLOAK_OF_CHAOS&lt;Cloak Of Chaos&gt;|SPELL_SHADOW_SHIELD&lt;Shadow Shield&gt;|SPELL_SHADOW_CONJURATION_INIVSIBILITY&lt;Shadow Conjuration Inivsibility&gt;|SPELL_HEAL&lt;Heal&gt;|SPELL_LESSER_SPELL_MANTLE&lt;Lesser Mantle&gt;|SPELL_INVISIBILITY_SPHERE&lt;Invisibility Sphere&gt;|SPELL_CHAIN_LIGHTNING&lt;Chain Lightning&gt;|SPELL_BLINDNESS_AND_DEAFNESS&lt;Blindness And Deafness&gt;|SPELL_HOLD_PERSON&lt;Hold Person&gt;|SPELL_METEOR_SWARM&lt;Meteor Swarm&gt;|SPELL_VIRTUE&lt;Virtue&gt;|SPELL_SHADOW_CONJURATION_DARKNESS&lt;Shadow Conjuration Darkness&gt;|SPELL_POISON&lt;Poison&gt;|SPELL_HASTE&lt;Haste&gt;|SPELL_SEARING_LIGHT&lt;Searing Light&gt;|SPELL_FLAME_ARROW&lt;Flame Arrow&gt;|SPELL_WAIL_OF_THE_BANSHEE&lt;Wail Of The Banshee&gt;|SPELL_REMOVE_DISEASE&lt;Remove Disease&gt;|SPELL_MINOR_GLOBE_OF_INVULNERABILITY&lt;Minor Globe Of Invulnerability&gt;|SPELL_PROTECTION_FROM_LAW&lt;Protection From Law&gt;|SPELL_SHADES_SUMMON_SHADOW&lt;Shades Summon Shadow&gt;|SPELL_RESIST_ELEMENTS&lt;Resist Elements&gt;|SPELL_GREATER_SPELL_BREACH&lt;Greater Breach&gt;|SPELL_GREATER_OWLS_WISDOM&lt;Greater Owls Wisdom&gt;|SPELL_MAGIC_WEAPON&lt;Magic Weapon&gt;|SPELL_RESISTANCE&lt;Resistance&gt;|SPELL_SCARE&lt;Scare&gt;|SPELL_FIREBALL&lt;Fireball&gt;|SPELL_CURE_CRITICAL_WOUNDS&lt;Cure Critical Wounds&gt;|SPELL_ELEMENTAL_SHIELD&lt;Elemental Shield&gt;|SPELL_DEATH_WARD&lt;Death Ward&gt;|SPELL_DISMISSAL&lt;Dismissal&gt;|SPELL_GREATER_SHADOW_CONJURATION_SUMMON_SHADOW&lt;Greater Shadow Conjuration Summon Shadow&gt;|SPELL_FIRE_STORM&lt;Fire Storm&gt;|SPELL_BESTOW_CURSE&lt;Bestow Curse&gt;|SPELL_CHARM_MONSTER&lt;Charm Monster&gt;|SPELL_DIVINE_POWER&lt;Divine Power&gt;|SPELL_FINGER_OF_DEATH&lt;Finger Of Death&gt;|SPELL_TIME_STOP&lt;Time Stop&gt;|SPELL_EVARDS_BLACK_TENTACLES&lt;Evards Black Tentacles&gt;|SPELL_SLOW&lt;Slow&gt;|SPELL_LIGHT&lt;Light&gt;|SPELL_PLANAR_BINDING&lt;Planar Binding&gt;|SPELL_GHOUL_TOUCH&lt;Ghoul Touch&gt;|SPELL_SPHERE_OF_CHAOS&lt;Sphere Of Chaos&gt;|SPELL_SLAY_LIVING&lt;Slay Living&gt;|SPELL_LESSER_SPELL_BREACH&lt;Lesser Breach&gt;|SPELL_CURE_LIGHT_WOUNDS&lt;Cure Light Wounds&gt;|SPELL_COLOR_SPRAY&lt;Color Spray&gt;|SPELL_SANCTUARY&lt;Sanctuary&gt;|SPELL_INVISIBILITY&lt;Invisibility&gt;|SPELL_GREATER_STONESKIN&lt;Greater Stoneskin&gt;|SPELL_BLADE_BARRIER&lt;Blade Barrier&gt;|SPELL_SHADES_CONE_OF_COLD&lt;Shades Cone Of Cold&gt;|SPELL_AID&lt;Aid&gt;|SPELL_PROTECTION_FROM_EVIL&lt;Protection From Evil&gt;|SPELL_LESSER_DISPEL&lt;Lesser Dispel&gt;|SPELL_VAMPIRIC_TOUCH&lt;Vampiric Touch&gt;|SPELL_PRAYER&lt;Prayer&gt;|SPELL_RESURRECTION&lt;Resurrection&gt;|SPELL_GREASE&lt;Grease&gt;|SPELL_GREATER_PLANAR_BINDING&lt;Greater Planar Binding&gt;|SPELL_FOXS_CUNNING&lt;Foxs Cunning&gt;|SPELL_CATS_GRACE&lt;Cats Grace&gt;|SPELL_MIND_FOG&lt;Mind Fog&gt;|SPELL_SHIELD_OF_LAW&lt;Shield Of Law&gt;|SPELL_NEUTRALIZE_POISON&lt;Neutralize Poison&gt;|SPELL_REMOVE_CURSE&lt;Remove Curse&gt;|SPELL_ACID_FOG&lt;Acid Fog&gt;|SPELL_CONE_OF_COLD&lt;Cone Of Cold&gt;|SPELL_PROTECTION_FROM_GOOD&lt;Protection From Good&gt;|SPELL_DOOM&lt;Doom&gt;|SPELL_SPELL_RESISTANCE&lt;Resistance&gt;|SPELL_SLEEP&lt;Sleep&gt;|SPELL_WEIRD&lt;Weird&gt;|SPELL_RAY_OF_ENFEEBLEMENT&lt;Ray Of Enfeeblement&gt;|SPELL_DAZE&lt;Daze&gt;|SPELL_KNOCK&lt;Knock&gt;|SPELL_MORDENKAINENS_DISJUNCTION&lt;Mordenkainens Disjunction&gt;|SPELL_FLAME_LASH&lt;Flame Lash&gt;|SPELL_CONTAGION&lt;Contagion&gt;|SPELL_FREEDOM_OF_MOVEMENT&lt;Freedom Of Movement&gt;|SPELL_CIRCLE_OF_DOOM&lt;Circle Of Doom&gt;|SPELL_DESTRUCTION&lt;Destruction&gt;|SPELL_POLYMORPH_SELF&lt;Polymorph Self&gt;|SPELL_CHARM_PERSON_OR_ANIMAL&lt;Charm Person Or Animal&gt;|SPELL_MAGIC_VESTMENT&lt;Magic Vestment&gt;|SPELL_WEB&lt;Web&gt;|SPELL_SPELL_MANTLE&lt;Mantle&gt;|SPELL_MAGIC_CIRCLE_AGAINST_GOOD&lt;Magic Circle Against Good&gt;|SPELL_ETHEREAL_VISAGE&lt;Ethereal Visage&gt;|SPELL_STONESKIN&lt;Stoneskin&gt;|SPELL_REMOVE_PARALYSIS&lt;Remove Paralysis&gt;|SPELL_TENSERS_TRANSFORMATION&lt;Tensers Transformation&gt;|SPELL_GREATER_MAGIC_WEAPON&lt;Greater Magic Weapon&gt;|SPELL_TRUE_SEEING&lt;True Seeing&gt;|SPELL_WAR_CRY&lt;War Cry&gt;|SPELL_IMPROVED_INVISIBILITY&lt;Improved Invisibility&gt;|SPELL_MAGIC_CIRCLE_AGAINST_CHAOS&lt;Magic Circle Against Chaos&gt;|SPELL_NEGATIVE_ENERGY_BURST&lt;Negative Energy Burst&gt;|SPELL_CONFUSION&lt;Confusion&gt;|SPELL_HAMMER_OF_THE_GODS&lt;Hammer Of The Gods&gt;|SPELL_OWLS_WISDOM&lt;Owls Wisdom&gt;|SPELL_CLARITY&lt;Clarity&gt;|SPELL_GREATER_SHADOW_CONJURATION_WEB&lt;Greater Shadow Conjuration Web&gt;|SPELL_POWER_WORD_STUN&lt;Power Word Stun&gt;|SPELL_SILENCE&lt;Silence&gt;|SPELL_PREMONITION&lt;Premonition&gt;|SPELL_SUMMON_CREATURE_V&lt;Summon Creature V&gt;|SPELL_ICE_STORM&lt;Ice Storm&gt;|SPELL_MIND_BLANK&lt;Mind Blank&gt;|SPELL_RESTORATION&lt;Restoration&gt;|SPELL_BARKSKIN&lt;Barkskin&gt;|SPELL_GREATER_SHADOW_CONJURATION_MIRROR_IMAGE&lt;Greater Shadow Conjuration Mirror Image&gt;|SPELL_SUMMON_CREATURE_I&lt;Summon Creature I&gt;|SPELL_MASS_CHARM&lt;Mass Charm&gt;|SPELL_SUMMON_CREATURE_III&lt;Summon Creature Iii&gt;|SPELL_FEEBLEMIND&lt;Feeblemind&gt;|SPELL_DARKNESS&lt;Darkness&gt;|SPELL_CHARM_PERSON&lt;Charm Person&gt;|SPELL_PROTECTION__FROM_CHAOS&lt;Protection  From Chaos&gt;|SPELL_NEGATIVE_ENERGY_PROTECTION&lt;Negative Energy Protection&gt;|SPELL_WORD_OF_FAITH&lt;Word Of Faith&gt;|SPELL_ENERVATION&lt;Enervation&gt;|SPELL_IDENTIFY&lt;Identify&gt;|SPELL_SUNBEAM&lt;Sunbeam&gt;|SPELL_GREATER_SPELL_MANTLE&lt;Greater Mantle&gt;|SPELL_GREATER_EAGLE_SPLENDOR&lt;Greater Eagle Splendor&gt;|SPELL_GHOSTLY_VISAGE&lt;Ghostly Visage&gt;|SPELL_HOLY_SWORD&lt;Holy Sword&gt;|SPELL_SHADES_WALL_OF_FIRE&lt;Shades Wall Of Fire&gt;|SPELL_DOMINATE_PERSON&lt;Dominate Person&gt;|SPELL_LIGHTNING_BOLT&lt;Lightning Bolt&gt;|SPELL_REMOVE_BLINDNESS_AND_DEAFNESS&lt;Remove Blindness And Deafness&gt;|SPELL_WALL_OF_FIRE&lt;Wall Of Fire&gt;|SPELL_PROTECTION_FROM_ELEMENTS&lt;Protection From Elements&gt;|SPELL_ELEMENTAL_SWARM&lt;Elemental Swarm&gt;|SPELL_SUMMON_CREATURE_IV&lt;Summon Creature Iv&gt;|SPELL_FIND_TRAPS&lt;Find Traps&gt;|SPELL_LESSER_RESTORATION&lt;Lesser Restoration&gt;|SPELL_GREATER_RESTORATION&lt;Greater Restoration&gt;|SPELL_PROTECTION_FROM_SPELLS&lt;Protection From Spells&gt;|SPELL_INVISIBILITY_PURGE&lt;Invisibility Purge&gt;|SPELL_SUMMON_CREATURE_IX&lt;Summon Creature Ix&gt;|SPELL_SUMMON_CREATURE_VI&lt;Summon Creature Vi&gt;|SPELL_CIRCLE_OF_DEATH&lt;Circle Of Death&gt;|SPELL_GREATER_DISPELLING&lt;Greater Dispelling&gt;|SPELL_ENERGY_BUFFER&lt;Energy Buffer&gt;|SPELL_LESSER_MIND_BLANK&lt;Lesser Mind Blank&gt;|SPELL_SUMMON_CREATURE_VIII&lt;Summon Creature Viii&gt;|SPELL_SHADOW_CONJURATION_MAGIC_MISSILE&lt;Shadow Conjuration Magic Missile&gt;|SPELL_MELFS_ACID_ARROW&lt;Melfs Acid Arrow&gt;|SPELL_LESSER_PLANAR_BINDING&lt;Lesser Planar Binding&gt;|SPELL_ENDURANCE&lt;Endurance&gt;|SPELL_MORDENKAINENS_SWORD&lt;Mordenkainens Sword&gt;|SPELL_ENDURE_ELEMENTS&lt;Endure Elements&gt;|SPELL_GREATER_SHADOW_CONJURATION_ACID_ARROW&lt;Greater Shadow Conjuration Acid Arrow&gt;|SPELL_CLAIRAUDIENCE_AND_CLAIRVOYANCE&lt;Clairaudience And Clairvoyance&gt;|SPELL_CREEPING_DOOM&lt;Creeping Doom&gt;|SPELL_MAGIC_CIRCLE_AGAINST_EVIL&lt;Magic Circle Against Evil&gt;|SPELL_CURE_MINOR_WOUNDS&lt;Cure Minor Wounds&gt;|SPELL_STORM_OF_VENGEANCE&lt;Storm Of Vengeance&gt;|SPELL_CREATE_UNDEAD&lt;Create Undead&gt;|SPELL_NATURES_BALANCE&lt;Natures Balance&gt;|SPELL_HOLD_ANIMAL&lt;Hold Animal&gt;|SPELL_DARKVISION&lt;Darkvision&gt;|SPELL_STINKING_CLOUD&lt;Stinking Cloud&gt;|SPELL_SHADOW_CONJURATION_SUMMON_SHADOW&lt;Shadow Conjuration Summon Shadow&gt;|SPELL_DELAYED_BLAST_FIREBALL&lt;Delayed Blast Fireball&gt;|SPELL_HEALING_CIRCLE&lt;Healing Circle&gt;|SPELL_POWER_WORD_KILL&lt;Power Word Kill&gt;|SPELL_IMPLOSION&lt;Implosion&gt;|SPELL_SUMMON_CREATURE_II&lt;Summon Creature Ii&gt;|SPELL_MAGIC_MISSILE&lt;Magic Missile&gt;|SPELL_CALL_LIGHTNING&lt;Call Lightning&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>SpellVisualEffect</Name>
      <Keyword>spell_visual_effect</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_DUR_LIGHT_PURPLE_20&lt;Dur Light Purple 20&gt;|VFX_DUR_GHOSTLY_PULSE&lt;Dur Ghostly Pulse&gt;|VFX_DUR_LIGHT_YELLOW_15&lt;Dur Light Yellow 15&gt;|VFX_DUR_CESSATE_NEGATIVE&lt;Dur Cessate Negative&gt;|VFX_DUR_LIGHT_YELLOW_5&lt;Dur Light Yellow 5&gt;|VFX_DUR_LIGHT_RED_5&lt;Dur Light Red 5&gt;|VFX_DUR_CALTROPS&lt;Dur Caltrops&gt;|VFX_DUR_AURA_DISEASE&lt;Dur Aura Disease&gt;|VFX_DUR_LIGHT_PURPLE_5&lt;Dur Light Purple 5&gt;|VFX_DUR_AURA_POISON&lt;Dur Aura Poison&gt;|VFX_DUR_LIGHT_BLUE_5&lt;Dur Light Blue 5&gt;|VFX_DUR_DARKVISION&lt;Dur Darkvision&gt;|VFX_DUR_FLAG_YELLOW&lt;Dur Flag Yellow&gt;|VFX_DUR_LIGHT_BLUE_20&lt;Dur Light Blue 20&gt;|VFX_DUR_LIGHT_YELLOW_10&lt;Dur Light Yellow 10&gt;|VFX_DUR_MIND_AFFECTING_POSITIVE&lt;Dur Mind Affecting Positive&gt;|VFX_DUR_FLAG_PURPLE&lt;Dur Flag Purple&gt;|VFX_DUR_MIND_AFFECTING_NEGATIVE&lt;Dur Mind Affecting Negative&gt;|VFX_DUR_GLOBE_MINOR&lt;Dur Globe Minor&gt;|VFX_DUR_LIGHT_ORANGE_20&lt;Dur Light Orange 20&gt;|VFX_DUR_ULTRAVISION&lt;Dur Ultravision&gt;|VFX_DUR_AURA_FIRE&lt;Dur Aura Fire&gt;|VFX_DUR_PROTECTION_EVIL_MAJOR&lt;Dur Protection Evil Major&gt;|VFX_DUR_ETHEREAL_VISAGE&lt;Dur Ethereal Visage&gt;|VFX_DUR_LIGHT_PURPLE_10&lt;Dur Light Purple 10&gt;|VFX_DUR_LIGHT_PURPLE_15&lt;Dur Light Purple 15&gt;|VFX_DUR_MIRV_ACID&lt;Dur Mirv Acid&gt;|VFX_DUR_GHOSTLY_VISAGE&lt;Dur Ghostly Visage&gt;|VFX_DUR_PROT_SHADOW_ARMOR&lt;Dur Prot Shadow Armor&gt;|VFX_DUR_AURA_DRAGON_FEAR&lt;Dur Aura Dragon Fear&gt;|VFX_DUR_LIGHT_ORANGE_15&lt;Dur Light Orange 15&gt;|VFX_DUR_PROT_BARKSKIN&lt;Dur Prot Barkskin&gt;|VFX_DUR_LIGHT_RED_20&lt;Dur Light Red 20&gt;|VFX_DUR_AURA_SILENCE&lt;Dur Aura Silence&gt;|VFX_DUR_BLIND&lt;Dur Blind&gt;|VFX_DUR_LIGHT_YELLOW_20&lt;Dur Light Yellow 20&gt;|VFX_DUR_CUTSCENE_INVISIBILITY&lt;Dur Cutscene Invisibility&gt;|VFX_DUR_LIGHT_ORANGE_10&lt;Dur Light Orange 10&gt;|VFX_DUR_FLAG_RED&lt;Dur Flag Red&gt;|VFX_DUR_FREEDOM_OF_MOVEMENT&lt;Dur Freedom Of Movement&gt;|VFX_DUR_SANCTUARY&lt;Dur Sanctuary&gt;|VFX_DUR_WEB&lt;Dur Web&gt;|VFX_DUR_BIGBYS_CLENCHED_FIST&lt;Dur Bigbys Clenched Fist&gt;|VFX_DUR_PROTECTION_EVIL_MINOR&lt;Dur Protection Evil Minor&gt;|VFX_DUR_MAGICAL_SIGHT&lt;Dur Magical Sight&gt;|VFX_DUR_LIGHT_ORANGE_5&lt;Dur Light Orange 5&gt;|VFX_DUR_LIGHT_WHITE_20&lt;Dur Light White 20&gt;|VFX_DUR_LIGHT_RED_15&lt;Dur Light Red 15&gt;|VFX_DUR_MIND_AFFECTING_DISABLED&lt;Dur Mind Affecting Disabled&gt;|VFX_DUR_FLAG_BLUE&lt;Dur Flag Blue&gt;|VFX_DUR_LOWLIGHTVISION&lt;Dur Lowlightvision&gt;|VFX_DUR_LIGHT_RED_10&lt;Dur Light Red 10&gt;|VFX_DUR_MAGIC_RESISTANCE&lt;Dur Magic Resistance&gt;|VFX_DUR_LIGHT&lt;Dur Light&gt;|VFX_DUR_LIGHT_GREY_20&lt;Dur Light Grey 20&gt;|VFX_DUR_DARKNESS&lt;Dur Darkness&gt;|VFX_DUR_SPELLTURNING&lt;Dur Spellturning&gt;|VFX_DUR_AURA_COLD&lt;Dur Aura Cold&gt;|VFX_DUR_PARALYZE_HOLD&lt;Dur Paralyze Hold&gt;|VFX_DUR_ENTANGLE&lt;Dur Entangle&gt;|VFX_DUR_LIGHT_WHITE_15&lt;Dur Light White 15&gt;|VFX_DUR_PROT_PREMONITION&lt;Dur Prot Premonition&gt;|VFX_DUR_FREEZE_ANIMATION&lt;Dur Freeze Animation&gt;|VFX_DUR_LIGHT_WHITE_5&lt;Dur Light White 5&gt;|VFX_DUR_PROT_GREATER_STONESKIN&lt;Dur Prot Greater Stoneskin&gt;|VFX_DUR_PARALYZED&lt;Dur Paralyzed&gt;|VFX_DUR_INVISIBILITY&lt;Dur Invisibility&gt;|VFX_DUR_AURA_ODD&lt;Dur Aura Odd&gt;|VFX_DUR_BARD_SONG&lt;Dur Bard Song&gt;|VFX_DUR_BLACKOUT&lt;Dur Blackout&gt;|VFX_DUR_PETRIFY&lt;Dur Petrify&gt;|VFX_DUR_PROTECTION_GOOD_MINOR&lt;Dur Protection Good Minor&gt;|VFX_DUR_MIND_AFFECTING_FEAR&lt;Dur Mind Affecting Fear&gt;|VFX_DUR_LIGHT_WHITE_10&lt;Dur Light White 10&gt;|VFX_DUR_MIND_AFFECTING_DOMINATED&lt;Dur Mind Affecting Dominated&gt;|VFX_DUR_BIGBYS_GRASPING_HAND&lt;Dur Bigbys Grasping Hand&gt;|VFX_DUR_BLUR&lt;Dur Blur&gt;|VFX_DUR_WEB_MASS&lt;Dur Web Mass&gt;|VFX_DUR_LIGHT_BLUE_10&lt;Dur Light Blue 10&gt;|VFX_DUR_CESSATE_POSITIVE&lt;Dur Cessate Positive&gt;|VFX_DUR_LIGHT_GREY_5&lt;Dur Light Grey 5&gt;|VFX_DUR_BIGBYS_CRUSHING_HAND&lt;Dur Bigbys Crushing Hand&gt;|VFX_DUR_LIGHT_GREY_15&lt;Dur Light Grey 15&gt;|VFX_DUR_ANTI_LIGHT_10&lt;Dur Anti Light 10&gt;|VFX_DUR_CESSATE_NEUTRAL&lt;Dur Cessate Neutral&gt;|VFX_DUR_ELEMENTAL_SHIELD&lt;Dur Elemental Shield&gt;|VFX_DUR_LIGHT_BLUE_15&lt;Dur Light Blue 15&gt;|VFX_DUR_GLOBE_INVULNERABILITY&lt;Dur Globe Invulnerability&gt;|VFX_DUR_PROT_STONESKIN&lt;Dur Prot Stoneskin&gt;|VFX_DUR_LIGHT_GREY_10&lt;Dur Light Grey 10&gt;|VFX_DUR_BIGBYS_INTERPOSING_HAND&lt;Dur Bigbys Interposing Hand&gt;|VFX_DUR_PROTECTION_GOOD_MAJOR&lt;Dur Protection Good Major&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>DoorAction</Name>
      <Keyword>door_action</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>DOOR_ACTION_BASH&lt;Bash&gt;|DOOR_ACTION_KNOCK&lt;Knock&gt;|DOOR_ACTION_OPEN&lt;Open&gt;|DOOR_ACTION_IGNORE&lt;Ignore&gt;|DOOR_ACTION_UNLOCK&lt;Unlock&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>SpellAbility</Name>
      <Keyword>spell_ability</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SPELLABILITY_AS_INVISIBILITY&lt;Spellability As Invisibility&gt;|SPELLABILITY_AURA_OF_COURAGE&lt;Spellability Aura Of Courage&gt;|SPELLABILITY_AURA_MENACE&lt;Spellability Aura Menace&gt;|SPELLABILITY_TURN_UNDEAD&lt;Spellability Turn Undead&gt;|SPELLABILITY_AS_DARKNESS&lt;Spellability As Darkness&gt;|SPELLABILITY_AS_IMPROVED_INVISIBLITY&lt;Spellability As Improved Invisiblity&gt;|SPELLABILITY_AA_HAIL_OF_ARROWS&lt;Spellability Aa Hail Of Arrows&gt;|SPELLABILITY_ACTIVATE_ITEM&lt;Spellability Activate Item&gt;|SPELLABILITY_AA_SEEKER_ARROW_2&lt;Spellability Aa Seeker Arrow 2&gt;|SPELLABILITY_AA_SEEKER_ARROW_1&lt;Spellability Aa Seeker Arrow 1&gt;|SPELLABILITY_AURA_FIRE&lt;Spellability Aura Fire&gt;|SPELLABILITY_AA_ARROW_OF_DEATH&lt;Spellability Aa Arrow Of Death&gt;|SPELLABILITY_AURA_ELECTRICITY&lt;Spellability Aura Electricity&gt;|SPELLABILITY_AS_GHOSTLY_VISAGE&lt;Spellability As Ghostly Visage&gt;|SPELLABILITY_AURA_FEAR&lt;Spellability Aura Fear&gt;|SPELLABILITY_AURA_COLD&lt;Spellability Aura Cold&gt;|SPELLABILITY_AURA_BLINDING&lt;Spellability Aura Blinding&gt;|SPELLABILITY_AA_IMBUE_ARROW&lt;Spellability Aa Imbue Arrow&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Integer</Name>
      <Keyword>int</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <GUI>JSPINNER</GUI>
    </Type>
    <Type>
      <Name>Skybox</Name>
      <Keyword>skybox</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SKYBOX_DESERT_CLEAR&lt;Desert Clear&gt;|SKYBOX_ICY&lt;Icy&gt;|SKYBOX_WINTER_CLEAR&lt;Winter Clear&gt;|SKYBOX_GRASS_CLEAR&lt;Grass Clear&gt;|SKYBOX_NONE&lt;None&gt;|SKYBOX_GRASS_STORM&lt;Grass Storm&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Placeable</Name>
      <Keyword>placeable</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnClick</Slot>
        <Slot>OnClosed</Slot>
        <Slot>OnDamaged</Slot>
        <Slot>OnDeath</Slot>
        <Slot>OnDisarm</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnLock</Slot>
        <Slot>OnMeleeAttacked</Slot>
        <Slot>OnOpen</Slot>
        <Slot>OnSpellCastAt</Slot>
        <Slot>OnTrapTriggered</Slot>
        <Slot>OnUnlock</Slot>
        <Slot>OnUserDefined</Slot>
        <Slot>OnInvDisturbed</Slot>
        <Slot>OnUsed</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>OpenClose</Name>
      <Keyword>open_close</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Close&gt;|TRUE&lt;Open&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>RacialType</Name>
      <Keyword>racial_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>RACIAL_TYPE_OUTSIDER&lt;Racial Type Outsider&gt;|RACIAL_TYPE_MAGICAL_BEAST&lt;Racial Type Magical Beast&gt;|RACIAL_TYPE_GIANT&lt;Racial Type Giant&gt;|RACIAL_TYPE_ALL&lt;Racial Type All&gt;|RACIAL_TYPE_ABERRATION&lt;Racial Type Aberration&gt;|RACIAL_TYPE_VERMIN&lt;Racial Type Vermin&gt;|RACIAL_TYPE_HALFORC&lt;Racial Type Halforc&gt;|RACIAL_TYPE_UNDEAD&lt;Racial Type Undead&gt;|RACIAL_TYPE_GNOME&lt;Racial Type Gnome&gt;|RACIAL_TYPE_DRAGON&lt;Racial Type Dragon&gt;|RACIAL_TYPE_FEY&lt;Racial Type Fey&gt;|RACIAL_TYPE_ANIMAL&lt;Racial Type Animal&gt;|RACIAL_TYPE_ELF&lt;Racial Type Elf&gt;|RACIAL_TYPE_CONSTRUCT&lt;Racial Type Construct&gt;|RACIAL_TYPE_HUMAN&lt;Racial Type Human&gt;|RACIAL_TYPE_SHAPECHANGER&lt;Racial Type Shapechanger&gt;|RACIAL_TYPE_HALFELF&lt;Racial Type Halfelf&gt;|RACIAL_TYPE_HUMANOID_GOBLINOID&lt;Racial Type Humanoid Goblinoid&gt;|RACIAL_TYPE_HALFLING&lt;Racial Type Halfling&gt;|RACIAL_TYPE_HUMANOID_ORC&lt;Racial Type Humanoid Orc&gt;|RACIAL_TYPE_ELEMENTAL&lt;Racial Type Elemental&gt;|RACIAL_TYPE_HUMANOID_REPTILIAN&lt;Racial Type Humanoid Reptilian&gt;|RACIAL_TYPE_DWARF&lt;Racial Type Dwarf&gt;|RACIAL_TYPE_OOZE&lt;Racial Type Ooze&gt;|RACIAL_TYPE_BEAST&lt;Racial Type Beast&gt;|RACIAL_TYPE_HUMANOID_MONSTROUS&lt;Racial Type Humanoid Monstrous&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Skill</Name>
      <Keyword>skill</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SKILL_SPELLCRAFT&lt;Spellcraft&gt;|SKILL_LISTEN&lt;Listen&gt;|SKILL_MOVE_SILENTLY&lt;Move Silently&gt;|SKILL_DISABLE_TRAP&lt;Disable Trap&gt;|SKILL_HEAL&lt;Heal&gt;|SKILL_ALL_SKILLS&lt;All Skills&gt;|SKILL_PERFORM&lt;Perform&gt;|SKILL_SEARCH&lt;Search&gt;|SKILL_SET_TRAP&lt;Set Trap&gt;|SKILL_ANIMAL_EMPATHY&lt;Animal Empathy&gt;|SKILL_PARRY&lt;Parry&gt;|SKILL_USE_MAGIC_DEVICE&lt;Use Magic Device&gt;|SKILL_CONCENTRATION&lt;Concentration&gt;|SKILL_SPOT&lt;Spot&gt;|SKILL_PERSUADE&lt;Persuade&gt;|SKILL_PICK_POCKET&lt;Pick Pocket&gt;|SKILL_OPEN_LOCK&lt;Open Lock&gt;|SKILL_LORE&lt;Lore&gt;|SKILL_TAUNT&lt;Taunt&gt;|SKILL_DISCIPLINE&lt;Discipline&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Sound</Name>
      <Keyword>sound</Keyword>
      <CodeSymbol>object</CodeSymbol>
    </Type>
    <Type>
      <Name>Story Point</Name>
      <Keyword>storyPoint</Keyword>
      <CodeSymbol>string</CodeSymbol>
      <Format>
        <Literal>&quot;</Literal>
        <Fragment data="unique32charname"/>
        <Literal>&quot;</Literal>
      </Format>
    </Type>
    <Type>
      <Name>ModelType</Name>
      <Keyword>model_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>CREATURE_MODEL_TYPE_SKIN&lt;Skin&gt;|CREATURE_MODEL_TYPE_UNDEAD&lt;Undead&gt;|CREATURE_MODEL_TYPE_TATTOO&lt;Tattoo&gt;|CREATURE_MODEL_TYPE_NONE&lt;None&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>RestStatus</Name>
      <Keyword>rest_status</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>REST_EVENTTYPE_REST_CANCELLED&lt;Rest Eventtype Rest Cancelled&gt;|REST_EVENTTYPE_REST_STARTED&lt;Rest Eventtype Rest Started&gt;|REST_EVENTTYPE_REST_INVALID&lt;Rest Eventtype Rest Invalid&gt;|REST_EVENTTYPE_REST_FINISHED&lt;Rest Eventtype Rest Finished&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>RestType</Name>
      <Keyword>rest_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>REST_EVENTTYPE_REST_CANCELLED&lt;Cancelled&gt;|REST_EVENTTYPE_REST_STARTED&lt;Started&gt;|REST_EVENTTYPE_REST_INVALID&lt;Invalid&gt;|REST_EVENTTYPE_REST_FINISHED&lt;Finished&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Alignment</Name>
      <Keyword>alignment</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ALIGNMENT_EVIL&lt;Alignment Evil&gt;|ALIGNMENT_CHAOTIC&lt;Alignment Chaotic&gt;|ALIGNMENT_LAWFUL&lt;Alignment Lawful&gt;|ALIGNMENT_ALL&lt;Alignment All&gt;|ALIGNMENT_NEUTRAL&lt;Alignment Neutral&gt;|ALIGNMENT_GOOD&lt;Alignment Good&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>VisualEffectCombat</Name>
      <Keyword>visual_effect_combat</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_COM_HIT_FIRE&lt;Com Hit Fire&gt;|VFX_COM_HIT_FROST&lt;Com Hit Frost&gt;|VFX_COM_HIT_DIVINE&lt;Com Hit Divine&gt;|VFX_COM_BLOOD_REG_GREEN&lt;Com Blood Reg Green&gt;|VFX_COM_CHUNK_RED_MEDIUM&lt;Com Chunk Red Medium&gt;|VFX_COM_BLOOD_SPARK_LARGE&lt;Com Blood Spark Large&gt;|VFX_COM_BLOOD_CRT_YELLOW&lt;Com Blood Crt Yellow&gt;|VFX_COM_CHUNK_GREEN_SMALL&lt;Com Chunk Green Small&gt;|VFX_COM_BLOOD_SPARK_MEDIUM&lt;Com Blood Spark Medium&gt;|VFX_COM_CHUNK_RED_LARGE&lt;Com Chunk Red Large&gt;|VFX_COM_BLOOD_LRG_WIMP&lt;Com Blood Lrg Wimp&gt;|VFX_COM_BLOOD_REG_WIMP&lt;Com Blood Reg Wimp&gt;|VFX_COM_HIT_NEGATIVE&lt;Com Hit Negative&gt;|VFX_COM_CHUNK_YELLOW_SMALL&lt;Com Chunk Yellow Small&gt;|VFX_COM_BLOOD_CRT_WIMP&lt;Com Blood Crt Wimp&gt;|VFX_COM_HIT_ELECTRICAL&lt;Com Hit Electrical&gt;|VFX_COM_HIT_ACID&lt;Com Hit Acid&gt;|VFX_COM_BLOOD_REG_YELLOW&lt;Com Blood Reg Yellow&gt;|VFX_COM_SPARKS_PARRY&lt;Com Sparks Parry&gt;|VFX_COM_BLOOD_LRG_GREEN&lt;Com Blood Lrg Green&gt;|VFX_COM_BLOOD_LRG_YELLOW&lt;Com Blood Lrg Yellow&gt;|VFX_COM_CHUNK_BONE_MEDIUM&lt;Com Chunk Bone Medium&gt;|VFX_COM_BLOOD_CRT_RED&lt;Com Blood Crt Red&gt;|VFX_COM_BLOOD_REG_RED&lt;Com Blood Reg Red&gt;|VFX_COM_BLOOD_SPARK_SMALL&lt;Com Blood Spark Small&gt;|VFX_COM_BLOOD_LRG_RED&lt;Com Blood Lrg Red&gt;|VFX_COM_HIT_SONIC&lt;Com Hit Sonic&gt;|VFX_COM_BLOOD_CRT_GREEN&lt;Com Blood Crt Green&gt;|VFX_COM_CHUNK_RED_SMALL&lt;Com Chunk Red Small&gt;|VFX_COM_CHUNK_GREEN_MEDIUM&lt;Com Chunk Green Medium&gt;|VFX_COM_CHUNK_YELLOW_MEDIUM&lt;Com Chunk Yellow Medium&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Allow</Name>
      <Keyword>allow</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Do not allow&gt;|TRUE&lt;Allow&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>CreateObjectType</Name>
      <Keyword>create_object_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>OBJECT_TYPE_CREATURE&lt;Creature&gt;|OBJECT_TYPE_STORE&lt;Store&gt;|OBJECT_TYPE_PLACEABLE&lt;Placeable&gt;|OBJECT_TYPE_ITEM&lt;Item&gt;|OBJECT_TYPE_WAYPOINT&lt;Waypoint&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>DisturbanceType</Name>
      <Keyword>disturbance_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>INVENTORY_DISTURB_TYPE_ADDED&lt;Added&gt;|INVENTORY_DISTURB_TYPE_STOLEN&lt;Stolen&gt;|INVENTORY_DISTURB_TYPE_REMOVED&lt;Removed&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Waypoint</Name>
      <Keyword>waypoint</Keyword>
      <CodeSymbol>object</CodeSymbol>
    </Type>
    <Type>
      <Name>Dialogue Line</Name>
      <Keyword>dialogue_line</Keyword>
      <CodeSymbol>string</CodeSymbol>
      <Format>
        <Literal>&quot;</Literal>
        <Fragment data="value"/>
        <Literal>&quot;</Literal>
      </Format>
      <Slots>
        <Slot>Script</Slot>
        <Slot>Active</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Object</Name>
      <Keyword>object</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <LegalValues>creature|placeable|door|item|trigger|waypoint|store</LegalValues>
    </Type>
    <Type>
      <Name>Journal</Name>
      <Keyword>journal</Keyword>
      <CodeSymbol>object</CodeSymbol>
    </Type>
    <Type>
      <Name>AssociateType</Name>
      <Keyword>associate_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ASSOCIATE_TYPE_DOMINATED&lt;Associate Type Dominated&gt;|ASSOCIATE_TYPE_SUMMONED&lt;Associate Type Summoned&gt;|ASSOCIATE_TYPE_FAMILIAR&lt;Associate Type Familiar&gt;|ASSOCIATE_TYPE_HENCHMAN&lt;Associate Type Henchman&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Area</Name>
      <Keyword>area</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnEnter</Slot>
        <Slot>OnExit</Slot>
        <Slot>OnHeartbeat</Slot>
        <Slot>OnUserDefined</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>VisualEffectFiredEffect</Name>
      <Keyword>visual_effect_effect</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VFX_FNF_MASS_MIND_AFFECTING&lt;Fnf Mass Mind Affecting&gt;|VFX_FNF_LOS_EVIL_30&lt;Fnf Los Evil 30&gt;|VFX_FNF_STRIKE_HOLY&lt;Fnf Strike Holy&gt;|VFX_FNF_METEOR_SWARM&lt;Fnf Meteor Swarm&gt;|VFX_FNF_LOS_NORMAL_10&lt;Fnf Los Normal 10&gt;|VFX_FNF_TIME_STOP&lt;Fnf Time Stop&gt;|VFX_FNF_PWSTUN&lt;Fnf Pwstun&gt;|VFX_FNF_LOS_HOLY_10&lt;Fnf Los Holy 10&gt;|VFX_FNF_SUMMON_UNDEAD&lt;Fnf Summon Undead&gt;|VFX_FNF_SOUND_BURST&lt;Fnf Sound Burst&gt;|VFX_FNF_MASS_HEAL&lt;Fnf Mass Heal&gt;|VFX_FNF_DISPEL_DISJUNCTION&lt;Fnf Dispel Disjunction&gt;|VFX_FNF_SCREEN_SHAKE&lt;Fnf Screen Shake&gt;|VFX_FNF_GAS_EXPLOSION_GREASE&lt;Fnf Gas Explosion Grease&gt;|VFX_FNF_SUMMON_MONSTER_1&lt;Fnf Summon Monster 1&gt;|VFX_FNF_SUMMON_MONSTER_2&lt;Fnf Summon Monster 2&gt;|VFX_FNF_DISPEL_GREATER&lt;Fnf Dispel Greater&gt;|VFX_FNF_SUMMON_MONSTER_3&lt;Fnf Summon Monster 3&gt;|VFX_FNF_FIRESTORM&lt;Fnf Firestorm&gt;|VFX_FNF_HOWL_ODD&lt;Fnf Howl Odd&gt;|VFX_FNF_SUNBEAM&lt;Fnf Sunbeam&gt;|VFX_FNF_SUMMON_GATE&lt;Fnf Summon Gate&gt;|VFX_FNF_LOS_NORMAL_20&lt;Fnf Los Normal 20&gt;|VFX_FNF_WORD&lt;Fnf Word&gt;|VFX_FNF_GAS_EXPLOSION_MIND&lt;Fnf Gas Explosion Mind&gt;|VFX_FNF_LOS_HOLY_20&lt;Fnf Los Holy 20&gt;|VFX_FNF_IMPLOSION&lt;Fnf Implosion&gt;|VFX_FNF_SCREEN_BUMP&lt;Fnf Screen Bump&gt;|VFX_FNF_SMOKE_PUFF&lt;Fnf Smoke Puff&gt;|VFX_FNF_GAS_EXPLOSION_ACID&lt;Fnf Gas Explosion Acid&gt;|VFX_FNF_DISPEL&lt;Fnf Dispel&gt;|VFX_FNF_SUMMON_CELESTIAL&lt;Fnf Summon Celestial&gt;|VFX_FNF_GAS_EXPLOSION_FIRE&lt;Fnf Gas Explosion Fire&gt;|VFX_FNF_HOWL_MIND&lt;Fnf Howl Mind&gt;|VFX_FNF_FIREBALL&lt;Fnf Fireball&gt;|VFX_FNF_GAS_EXPLOSION_NATURE&lt;Fnf Gas Explosion Nature&gt;|VFX_FNF_WAIL_O_BANSHEES&lt;Fnf Wail O Banshees&gt;|VFX_FNF_HORRID_WILTING&lt;Fnf Horrid Wilting&gt;|VFX_FNF_LOS_HOLY_30&lt;Fnf Los Holy 30&gt;|VFX_FNF_STORM&lt;Fnf Storm&gt;|VFX_FNF_LOS_EVIL_20&lt;Fnf Los Evil 20&gt;|VFX_FNF_NATURES_BALANCE&lt;Fnf Natures Balance&gt;|VFX_FNF_WEIRD&lt;Fnf Weird&gt;|VFX_FNF_LOS_NORMAL_30&lt;Fnf Los Normal 30&gt;|VFX_FNF_HOWL_WAR_CRY&lt;Fnf Howl War Cry&gt;|VFX_FNF_BLINDDEAF&lt;Fnf Blinddeaf&gt;|VFX_FNF_GAS_EXPLOSION_EVIL&lt;Fnf Gas Explosion Evil&gt;|VFX_FNF_PWKILL&lt;Fnf Pwkill&gt;|VFX_FNF_HOWL_WAR_CRY_FEMALE&lt;Fnf Howl War Cry Female&gt;|VFX_FNF_ICESTORM&lt;Fnf Icestorm&gt;|VFX_FNF_LOS_EVIL_10&lt;Fnf Los Evil 10&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>AreaOfEffect</Name>
      <Keyword>area_of_effect</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>AOE_PER_DELAY_BLAST_FIREBALL&lt;Aoe Per Delay Blast Fireball&gt;|AOE_PER_FOGFIRE&lt;Aoe Per Fogfire&gt;|AOE_PER_DARKNESS&lt;Aoe Per Darkness&gt;|AOE_PER_WALLWIND&lt;Aoe Per Wallwind&gt;|AOE_PER_WALLFIRE&lt;Aoe Per Wallfire&gt;|AOE_PER_ENTANGLE&lt;Aoe Per Entangle&gt;|AOE_PER_STORM&lt;Aoe Per Storm&gt;|AOE_PER_STONEHOLD&lt;Aoe Per Stonehold&gt;|AOE_PER_WALLBLADE&lt;Aoe Per Wallblade&gt;|AOE_PER_GREASE&lt;Aoe Per Grease&gt;|AOE_PER_VINE_MINE_CAMOUFLAGE&lt;Aoe Per Vine Mine Camouflage&gt;|AOE_PER_FOGACID&lt;Aoe Per Fogacid&gt;|AOE_PER_FOGSTINK&lt;Aoe Per Fogstink&gt;|AOE_PER_CREEPING_DOOM&lt;Aoe Per Creeping Doom&gt;|AOE_PER_INVIS_SPHERE&lt;Aoe Per Invis Sphere&gt;|AOE_PER_FOGGHOUL&lt;Aoe Per Fogghoul&gt;|AOE_PER_FOGMIND&lt;Aoe Per Fogmind&gt;|AOE_PER_FOG_OF_BEWILDERMENT&lt;Aoe Per Fog Of Bewilderment&gt;|AOE_PER_WEB&lt;Aoe Per Web&gt;|AOE_PER_FOGKILL&lt;Aoe Per Fogkill&gt;|AOE_PER_GLYPH_OF_WARDING&lt;Aoe Per Glyph Of Warding&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>FadeSpeed</Name>
      <Keyword>fade_speed</Keyword>
      <CodeSymbol>float</CodeSymbol>
      <Enum>FADE_SPEED_MEDIUM&lt;Medium&gt;|FADE_SPEED_SLOW&lt;Slow&gt;|FADE_SPEED_SLOWEST&lt;Slowest&gt;|FADE_SPEED_FAST&lt;Fast&gt;|FADE_SPEED_FASTEST&lt;Fastest&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Immortal</Name>
      <Keyword>immortal</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Mortal&gt;|TRUE&lt;Immortal&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Question</Name>
      <Keyword>question</Keyword>
      <CodeSymbol>int</CodeSymbol>
    </Type>
    <Type>
      <Name>Ability</Name>
      <Keyword>ability</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ABILITY_STRENGTH&lt;Ability Strength&gt;|ABILITY_INTELLIGENCE&lt;Ability Intelligence&gt;|ABILITY_CHARISMA&lt;Ability Charisma&gt;|ABILITY_CONSTITUTION&lt;Ability Constitution&gt;|ABILITY_DEXTERITY&lt;Ability Dexterity&gt;|ABILITY_WISDOM&lt;Ability Wisdom&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>TimedCreatureAnimations</Name>
      <Keyword>timed_creature_animation</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>ANIMATION_FIREFORGET_GREETING&lt;Animation Fireforget Greeting&gt;|ANIMATION_LOOPING_GET_MID&lt;Animation Looping Get Mid&gt;|ANIMATION_LOOPING_TALK_LAUGHING&lt;Animation Looping Talk Laughing&gt;|ANIMATION_FIREFORGET_HEAD_TURN_LEFT&lt;Animation Fireforget Head Turn Left&gt;|ANIMATION_LOOPING_PAUSE_TIRED&lt;Animation Looping Pause Tired&gt;|ANIMATION_FIREFORGET_HEAD_TURN_RIGHT&lt;Animation Fireforget Head Turn Right&gt;|ANIMATION_LOOPING_GET_LOW&lt;Animation Looping Get Low&gt;|ANIMATION_FIREFORGET_DODGE_DUCK&lt;Animation Fireforget Dodge Duck&gt;|ANIMATION_FIREFORGET_DRINK&lt;Animation Fireforget Drink&gt;|ANIMATION_LOOPING_TALK_PLEADING&lt;Animation Looping Talk Pleading&gt;|ANIMATION_LOOPING_MEDITATE&lt;Animation Looping Meditate&gt;|ANIMATION_FIREFORGET_DODGE_SIDE&lt;Animation Fireforget Dodge Side&gt;|ANIMATION_FIREFORGET_PAUSE_SCRATCH_HEAD&lt;Animation Fireforget Pause Scratch Head&gt;|ANIMATION_LOOPING_PAUSE&lt;Animation Looping Pause&gt;|ANIMATION_LOOPING_LOOK_FAR&lt;Animation Looping Look Far&gt;|ANIMATION_LOOPING_SIT_CROSS&lt;Animation Looping Sit Cross&gt;|ANIMATION_FIREFORGET_READ&lt;Animation Fireforget Read&gt;|ANIMATION_LOOPING_SIT_CHAIR&lt;Animation Looping Sit Chair&gt;|ANIMATION_LOOPING_LISTEN&lt;Animation Looping Listen&gt;|ANIMATION_FIREFORGET_BOW&lt;Animation Fireforget Bow&gt;|ANIMATION_FIREFORGET_STEAL&lt;Animation Fireforget Steal&gt;|ANIMATION_LOOPING_SPASM&lt;Animation Looping Spasm&gt;|ANIMATION_FIREFORGET_SALUTE&lt;Animation Fireforget Salute&gt;|ANIMATION_LOOPING_PAUSE2&lt;Animation Looping Pause2&gt;|ANIMATION_FIREFORGET_TAUNT&lt;Animation Fireforget Taunt&gt;|ANIMATION_LOOPING_TALK_FORCEFUL&lt;Animation Looping Talk Forceful&gt;|ANIMATION_LOOPING_DEAD_BACK&lt;Animation Looping Dead Back&gt;|ANIMATION_FIREFORGET_PAUSE_BORED&lt;Animation Fireforget Pause Bored&gt;|ANIMATION_FIREFORGET_VICTORY1&lt;Animation Fireforget Victory1&gt;|ANIMATION_FIREFORGET_VICTORY2&lt;Animation Fireforget Victory2&gt;|ANIMATION_LOOPING_DEAD_FRONT&lt;Animation Looping Dead Front&gt;|ANIMATION_FIREFORGET_VICTORY3&lt;Animation Fireforget Victory3&gt;|ANIMATION_LOOPING_WORSHIP&lt;Animation Looping Worship&gt;|ANIMATION_LOOPING_CONJURE1&lt;Animation Looping Conjure1&gt;|ANIMATION_LOOPING_TALK_NORMAL&lt;Animation Looping Talk Normal&gt;|ANIMATION_LOOPING_CONJURE2&lt;Animation Looping Conjure2&gt;|ANIMATION_LOOPING_PAUSE_DRUNK&lt;Animation Looping Pause Drunk&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>OnOrOff</Name>
      <Keyword>onoroff</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Off&gt;|TRUE&lt;On&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Trigger</Name>
      <Keyword>trigger</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>OnClick</Slot>
        <Slot>OnDisarm</Slot>
        <Slot>OnTrapTriggered</Slot>
        <Slot>ScriptHeartbeat</Slot>
        <Slot>ScriptOnEnter</Slot>
        <Slot>ScriptOnExit</Slot>
        <Slot>ScriptUserDefine</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Story</Name>
      <Keyword>module</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>Mod_OnHeartbeat</Slot>
        <Slot>Mod_OnModLoad</Slot>
        <Slot>Mod_OnClientEntr</Slot>
        <Slot>Mod_OnPlrChat</Slot>
        <Slot>Mod_OnClientLeav</Slot>
        <Slot>Mod_OnUsrDefined</Slot>
        <Slot>Mod_OnUnAqreItem</Slot>
        <Slot>Mod_OnPlrDeath</Slot>
        <Slot>Mod_OnPlrDying</Slot>
        <Slot>Mod_OnPlrLvlUp</Slot>
        <Slot>Mod_OnSpawnBtnDn</Slot>
        <Slot>Mod_OnPlrRest</Slot>
        <Slot>Mod_OnCutsnAbort</Slot>
        <Slot>Mod_OnActvtItem</Slot>
        <Slot>Mod_OnAcquirItem</Slot>
        <Slot>Mod_OnPlrEqItm</Slot>
        <Slot>Mod_OnPlrUnEqItm</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>WalkSpeed</Name>
      <Keyword>walk_speed</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Walk&gt;|TRUE&lt;Run&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Creature</Name>
      <Keyword>creature</Keyword>
      <CodeSymbol>object</CodeSymbol>
      <Slots>
        <Slot>ScriptAttacked</Slot>
        <Slot>ScriptDamaged</Slot>
        <Slot>ScriptDeath</Slot>
        <Slot>ScriptDialogue</Slot>
        <Slot>ScriptDisturbed</Slot>
        <Slot>ScriptEndRound</Slot>
        <Slot>ScriptHeartbeat</Slot>
        <Slot>ScriptOnBlocked</Slot>
        <Slot>ScriptOnNotice</Slot>
        <Slot>ScriptRested</Slot>
        <Slot>ScriptSpawn</Slot>
        <Slot>ScriptSpellAt</Slot>
        <Slot>ScriptUserDefine</Slot>
      </Slots>
    </Type>
    <Type>
      <Name>Speak</Name>
      <Keyword>speak</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TALKVOLUME_WHISPER&lt;Talkvolume Whisper&gt;|TALKVOLUME_SHOUT&lt;Talkvolume Shout&gt;|TALKVOLUME_TALK&lt;Talkvolume Talk&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>PlaceableAction</Name>
      <Keyword>placeable_action</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>PLACEABLE_ACTION_KNOCK&lt;Knock&gt;|PLACEABLE_ACTION_BASH&lt;Bash&gt;|PLACEABLE_ACTION_UNLOCK&lt;Unlock&gt;|PLACEABLE_ACTION_USE&lt;Use&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>AttackType</Name>
      <Keyword>attack_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>SPECIAL_ATTACK_DISARM&lt;Disarm&gt;|SPECIAL_ATTACK_INVALID&lt;Invalid&gt;|SPECIAL_ATTACK_SAP&lt;Sap&gt;|SPECIAL_ATTACK_CALLED_SHOT_ARM&lt;Called Shot Arm&gt;|SPECIAL_ATTACK_IMPROVED_KNOCKDOWN&lt;Improved Knockdown&gt;|SPECIAL_ATTACK_RAPID_SHOT&lt;Rapid Shot&gt;|SPECIAL_ATTACK_STUNNING_FIST&lt;Stunning Fist&gt;|SPECIAL_ATTACK_CALLED_SHOT_LEG&lt;Called Shot Leg&gt;|SPECIAL_ATTACK_IMPROVED_DISARM&lt;Improved Disarm&gt;|SPECIAL_ATTACK_KNOCKDOWN&lt;Knockdown&gt;|SPECIAL_ATTACK_FLURRY_OF_BLOWS&lt;Flurry Of Blows&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Void</Name>
      <Keyword>void</Keyword>
      <CodeSymbol>void</CodeSymbol>
    </Type>
    <Type>
      <Name>MusicTrack</Name>
      <Keyword>music_track</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TRACK_CASTLE&lt;Generic Castle Interior&gt;|TRACK_HOTU_BATTLE_MED&lt;XP2 - Battle, Medium&gt;|TRACK_HOTU_QUEEN&lt;XP2 - Queen of the Shattered Mirror&gt;|TRACK_CITYDOCKNIGHT&lt;City Docks Night&gt;|TRACK_BATTLE_CITYBOSS&lt;City Boss Combat&gt;|TRACK_RURALNIGHT&lt;Rural Night&gt;|TRACK_BATTLE_DRAGON&lt;Dragon Combat&gt;|TRACK_FORESTNIGHT&lt;Forest Night&gt;|TRACK_STORE&lt;Generic Store&gt;|TRACK_HOTU_BATTLE_BOSS2&lt;XP2 - Battle, Final&gt;|TRACK_HOTU_BATTLE_BOSS1&lt;XP2 - Battle, Matron&gt;|TRACK_HOTU_BATTLE_SMALL&lt;XP2 - Battle, Small&gt;|TRACK_RICHHOUSE&lt;Generic Wealthy House&gt;|TRACK_SEWER&lt;Sewer&gt;|TRACK_THEME_NWN&lt;NWN City Theme&gt;|TRACK_DESERT_NIGHT&lt;Desert Night&gt;|TRACK_DUNGEON1&lt;Generic Dungeon&gt;|TRACK_HOTU_FIREPLANE&lt;XP2 - Beholder Caves&gt;|TRACK_MINES2&lt;Mines 2&gt;|TRACK_MINES1&lt;Mines 1&gt;|TRACK_FORESTDAY2&lt;Forest Day 2&gt;|TRACK_FORESTDAY1&lt;Forest Day 1&gt;|TRACK_HOTU_WATERDEEP&lt;XP2 - Waterdeep&gt;|TRACK_RURALDAY2&lt;Rural Day 2&gt;|TRACK_HOTU_THEME&lt;XP2 - Theme&gt;|TRACK_EVILDUNGEON1&lt;Evil Dungeon 1&gt;|TRACK_CITYSLUMDAY&lt;City Slum Day&gt;|TRACK_RURALDAY1&lt;Rural Day 1&gt;|TRACK_CRYPT2&lt;Crypt 2&gt;|TRACK_CRYPT1&lt;Crypt 1&gt;|TRACK_CITYWEALTHY&lt;City Wealthy&gt;|TRACK_HOTU_DRACOLICH&lt;XP2 - Dracolich&gt;|TRACK_CITYSLUMNIGHT&lt;City Slum Night&gt;|TRACK_BATTLE_DUNGEON3&lt;Dungeon Combat 3&gt;|TRACK_BATTLE_FORESTBOSS&lt;Forest Boss Combat&gt;|TRACK_BATTLE_DUNGEON2&lt;Dungeon Combat 2&gt;|TRACK_BATTLE_ENDBOSS&lt;Final Boss Combat&gt;|TRACK_BATTLE_DUNGEON1&lt;Dungeon Combat 1&gt;|TRACK_HOTU_HELLFROZEOVER&lt;XP2 - Chapter 3&gt;|TRACK_DESERT_DAY&lt;Desert Day&gt;|TRACK_THEME_ARIBETH2&lt;Aribeth Theme 2&gt;|TRACK_THEME_ARIBETH1&lt;Aribeth Theme 1&gt;|TRACK_BATTLE_ARIBETH&lt;Combat Aribeth&gt;|TRACK_BATTLE_DESERT&lt;Desert Combat&gt;|TRACK_EVILDUNGEON2&lt;Evil Dungeon 2&gt;|TRACK_HOTU_UNDERMOUNTAIN&lt;XP2 - Undermountain&gt;|TRACK_TEMPLEGOOD2&lt;Good Temple 2&gt;|TRACK_WINTER_DAY&lt;Winter Day&gt;|TRACK_CITYNIGHT&lt;City Night&gt;|TRACK_BATTLE_WINTER&lt;Winter Combat&gt;|TRACK_HOTU_REBELCAMP&lt;XP2 - Rebel Camp&gt;|TRACK_THEME_MAUGRIM&lt;Theme Maugrim&gt;|TRACK_THEME_CHAPTER1&lt;NWN Chapter 1&gt;|TRACK_THEME_CHAPTER2&lt;NWN Chapter 2&gt;|TRACK_BATTLE_CITY1&lt;City Combat 1&gt;|TRACK_BATTLE_LIZARDBOSS&lt;Lizardfolk Boss Combat&gt;|TRACK_HOTU_BATTLE_HELL&lt;XP2 - Battle, Chapter 3&gt;|TRACK_TEMPLEEVIL&lt;Evil Temple&gt;|TRACK_BATTLE_CITY3&lt;City Combat 3&gt;|TRACK_BATTLE_CITY2&lt;City Combat 2&gt;|TRACK_BATTLE_RURAL1&lt;Rural Combat&gt;|TRACK_CITYDOCKDAY&lt;City Docks Day&gt;|TRACK_TAVERN4&lt;Tavern 4&gt;|TRACK_HOTU_BATTLE_LARGE&lt;XP2 - Battle, Large&gt;|TRACK_BATTLE_FOREST1&lt;Forest Combat 1&gt;|TRACK_CITYMARKET&lt;City Marketplace&gt;|TRACK_BATTLE_FOREST2&lt;Forest Combat 2&gt;|TRACK_THEME_GEND&lt;Theme Aarin Gend&gt;|TRACK_THEME_CHAPTER4&lt;NWN Chapter 4&gt;|TRACK_THEME_CHAPTER3&lt;NWN Chapter 3&gt;|TRACK_TAVERN2&lt;Tavern 2&gt;|TRACK_TAVERN3&lt;Tavern 3&gt;|TRACK_THEME_MORAG&lt;Theme Morag&gt;|TRACK_TEMPLEGOOD&lt;Good Temple&gt;|TRACK_TAVERN1&lt;Tavern 1&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>MetaMagic</Name>
      <Keyword>meta_magic</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>METAMAGIC_QUICKEN&lt;Quicken&gt;|METAMAGIC_EXTEND&lt;Extend&gt;|METAMAGIC_EMPOWER&lt;Empower&gt;|METAMAGIC_NONE&lt;None&gt;|METAMAGIC_SILENT&lt;Silent&gt;|METAMAGIC_MAXIMIZE&lt;Maximize&gt;|METAMAGIC_ANY&lt;Any&gt;|METAMAGIC_STILL&lt;Still&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>TalkVolume</Name>
      <Keyword>talk_volume</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>TALKVOLUME_SILENT_SHOUT&lt;Silent Shout&gt;|TALKVOLUME_WHISPER&lt;Whisper&gt;|TALKVOLUME_SHOUT&lt;Shout&gt;|TALKVOLUME_TALK&lt;Talk&gt;|TALKVOLUME_SILENT_TALK&lt;Silent Talk&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>CameraTransition</Name>
      <Keyword>camera_transition</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>CAMERA_TRANSITION_TYPE_VERY_FAST&lt;Very Fast&gt;|CAMERA_TRANSITION_TYPE_VERY_SLOW&lt;Very Slow&gt;|CAMERA_TRANSITION_TYPE_SNAP&lt;Snap&gt;|CAMERA_TRANSITION_TYPE_FAST&lt;Fast&gt;|CAMERA_TRANSITION_TYPE_MEDIUM&lt;Medium&gt;|CAMERA_TRANSITION_TYPE_SLOW&lt;Slow&gt;|CAMERA_TRANSITION_TYPE_CRAWL&lt;Crawl&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>VoiceChat</Name>
      <Keyword>voice_chat</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>VOICE_CHAT_LOOKHERE&lt;Look Here&gt;|VOICE_CHAT_POISONED&lt;Poisoned&gt;|VOICE_CHAT_HIDE&lt;Hide&gt;|VOICE_CHAT_ENCUMBERED&lt;Encumbered&gt;|VOICE_CHAT_BATTLECRY3&lt;Battlecry 3&gt;|VOICE_CHAT_FLEE&lt;Flee&gt;|VOICE_CHAT_BATTLECRY2&lt;Battlecry 2&gt;|VOICE_CHAT_BATTLECRY1&lt;Battlecry 1&gt;|VOICE_CHAT_GOODBYE&lt;Goodbye&gt;|VOICE_CHAT_SELECTED&lt;Selected&gt;|VOICE_CHAT_HELLO&lt;Hello&gt;|VOICE_CHAT_HOLD&lt;Hold&gt;|VOICE_CHAT_MOVEOVER&lt;Move Over&gt;|VOICE_CHAT_BADIDEA&lt;Bad Idea&gt;|VOICE_CHAT_LAUGH&lt;Laugh&gt;|VOICE_CHAT_WEAPONSUCKS&lt;Weapon Sucks&gt;|VOICE_CHAT_TASKCOMPLETE&lt;Task Complete&gt;|VOICE_CHAT_GROUP&lt;Group&gt;|VOICE_CHAT_ENEMIES&lt;Enemies&gt;|VOICE_CHAT_HEALME&lt;Heal Me&gt;|VOICE_CHAT_CHEER&lt;Cheer&gt;|VOICE_CHAT_GUARDME&lt;Guard Me&gt;|VOICE_CHAT_REST&lt;Rest&gt;|VOICE_CHAT_PICKLOCK&lt;Pick Lock&gt;|VOICE_CHAT_PAIN1&lt;Pain 1&gt;|VOICE_CHAT_ATTACK&lt;Attack&gt;|VOICE_CHAT_CANTDO&lt;Cannot Do&gt;|VOICE_CHAT_PAIN3&lt;Pain 3&gt;|VOICE_CHAT_PAIN2&lt;Pain 2&gt;|VOICE_CHAT_TALKTOME&lt;Talk To Me&gt;|VOICE_CHAT_CANDO&lt;Can Do&gt;|VOICE_CHAT_NEARDEATH&lt;Near Death&gt;|VOICE_CHAT_THANKS&lt;Thanks&gt;|VOICE_CHAT_GATTACK1&lt;Attack 1&gt;|VOICE_CHAT_SEARCH&lt;Search&gt;|VOICE_CHAT_YES&lt;Yes&gt;|VOICE_CHAT_GATTACK2&lt;Attack 2&gt;|VOICE_CHAT_GATTACK3&lt;Attack 3&gt;|VOICE_CHAT_CUSS&lt;Cuss&gt;|VOICE_CHAT_SPELLFAILED&lt;Spell Failed&gt;|VOICE_CHAT_HELP&lt;Help&gt;|VOICE_CHAT_TAUNT&lt;Taunt&gt;|VOICE_CHAT_THREATEN&lt;Threaten&gt;|VOICE_CHAT_FOLLOWME&lt;Follow Me&gt;|VOICE_CHAT_DEATH&lt;Death&gt;|VOICE_CHAT_STOP&lt;Stop&gt;|VOICE_CHAT_BORED&lt;Bored&gt;|VOICE_CHAT_NO&lt;No&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Effect</Name>
      <Keyword>effect</Keyword>
      <CodeSymbol>effect</CodeSymbol>
    </Type>
    <Type>
      <Name>Item</Name>
      <Keyword>item</Keyword>
      <CodeSymbol>object</CodeSymbol>
    </Type>
    <Type>
      <Name>Text</Name>
      <Keyword>string</Keyword>
      <CodeSymbol>string</CodeSymbol>
      <Format>
        <Literal>&quot;</Literal>
        <Fragment data="value"/>
        <Literal>&quot;</Literal>
      </Format>
      <LegalValues>[.\n]*</LegalValues>
      <GUI>JTEXTFIELD</GUI>
    </Type>
    <Type>
      <Name>ClassType</Name>
      <Keyword>class_type</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>CLASS_TYPE_ARCANE_ARCHER&lt;Class Type Arcane Archer&gt;|CLASS_TYPE_ASSASSIN&lt;Class Type Assassin&gt;|CLASS_TYPE_BARD&lt;Class Type Bard&gt;|CLASS_TYPE_BLACKGUARD&lt;Class Type Blackguard&gt;|CLASS_TYPE_DRUID&lt;Class Type Druid&gt;|CLASS_TYPE_MONK&lt;Class Type Monk&gt;|CLASS_TYPE_BARBARIAN&lt;Class Type Barbarian&gt;|CLASS_TYPE_BEAST&lt;Class Type Beast&gt;|CLASS_TYPE_RANGER&lt;Class Type Ranger&gt;|CLASS_TYPE_ROGUE&lt;Class Type Rogue&gt;|CLASS_TYPE_UNDEAD&lt;Class Type Undead&gt;|CLASS_TYPE_WIZARD&lt;Class Type Wizard&gt;|CLASS_TYPE_PALADIN&lt;Class Type Paladin&gt;|CLASS_TYPE_INVALID&lt;Class Type Invalid&gt;|CLASS_TYPE_SORCERER&lt;Class Type Sorcerer&gt;|CLASS_TYPE_MAGICAL_BEAST&lt;Class Type Magical Beast&gt;|CLASS_TYPE_CLERIC&lt;Class Type Cleric&gt;|CLASS_TYPE_HARPER&lt;Class Type Harper&gt;|CLASS_TYPE_GIANT&lt;Class Type Giant&gt;|CLASS_TYPE_FIGHTER&lt;Class Type Fighter&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Enable</Name>
      <Keyword>enable_disable</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Disable&gt;|TRUE&lt;Enable&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>Feat</Name>
      <Keyword>feat</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FEAT_WEAPON_FOCUS_BATTLE_AXE&lt;Feat Weapon Focus Battle Axe&gt;|FEAT_SKILL_AFFINITY_SEARCH&lt;Feat Skill Affinity Search&gt;|FEAT_STRENGTH_DOMAIN_POWER&lt;Feat Strength Domain Power&gt;|FEAT_SKILL_AFFINITY_LISTEN&lt;Feat Skill Affinity Listen&gt;|FEAT_LIGHTNING_REFLEXES&lt;Feat Lightning Reflexes&gt;|FEAT_IMPROVED_CRITICAL_SCIMITAR&lt;Feat Improved Critical Scimitar&gt;|FEAT_IMPROVED_CRITICAL_KAMA&lt;Feat Improved Critical Kama&gt;|FEAT_WEAPON_SPECIALIZATION_DART&lt;Feat Weapon Specialization Dart&gt;|FEAT_SNEAK_ATTACK&lt;Feat Sneak Attack&gt;|FEAT_DIVINE_HEALTH&lt;Feat Divine Health&gt;|FEAT_SKILL_FOCUS_MOVE_SILENTLY&lt;Feat Skill Focus Move Silently&gt;|FEAT_PERFECT_SELF&lt;Feat Perfect Self&gt;|FEAT_LUCKY&lt;Feat Lucky&gt;|FEAT_IMPROVED_CRITICAL_HEAVY_FLAIL&lt;Feat Improved Critical Heavy Flail&gt;|FEAT_STONECUNNING&lt;Feat Stonecunning&gt;|FEAT_PROTECTION_DOMAIN_POWER&lt;Feat Protection Domain Power&gt;|FEAT_IMPROVED_CRITICAL_KATANA&lt;Feat Improved Critical Katana&gt;|FEAT_PARTIAL_SKILL_AFFINITY_LISTEN&lt;Feat Partial Skill Affinity Listen&gt;|FEAT_UNCANNY_DODGE_1&lt;Feat Uncanny Dodge 1&gt;|FEAT_FAVORED_ENEMY_DRAGON&lt;Feat Favored Enemy Dragon&gt;|FEAT_IMPROVED_CRITICAL_BATTLE_AXE&lt;Feat Improved Critical Battle Axe&gt;|FEAT_QUICK_TO_MASTER&lt;Feat Quick To Master&gt;|FEAT_STILL_MIND&lt;Feat Still Mind&gt;|FEAT_UNCANNY_DODGE_6&lt;Feat Uncanny Dodge 6&gt;|FEAT_FAVORED_ENEMY_DWARF&lt;Feat Favored Enemy Dwarf&gt;|FEAT_UNCANNY_DODGE_4&lt;Feat Uncanny Dodge 4&gt;|FEAT_WEAPON_FOCUS_BASTARD_SWORD&lt;Feat Weapon Focus Bastard Sword&gt;|FEAT_UNCANNY_DODGE_5&lt;Feat Uncanny Dodge 5&gt;|FEAT_UNCANNY_DODGE_2&lt;Feat Uncanny Dodge 2&gt;|FEAT_UNCANNY_DODGE_3&lt;Feat Uncanny Dodge 3&gt;|FEAT_FAVORED_ENEMY_HALFELF&lt;Feat Favored Enemy Halfelf&gt;|FEAT_IMPROVED_CRITICAL_MORNING_STAR&lt;Feat Improved Critical Morning Star&gt;|FEAT_PLANT_DOMAIN_POWER&lt;Feat Plant Domain Power&gt;|FEAT_MOBILITY&lt;Feat Mobility&gt;|FEAT_DAMAGE_REDUCTION&lt;Feat Damage Reduction&gt;|FEAT_DIAMOND_BODY&lt;Feat Diamond Body&gt;|FEAT_WEAPON_SPECIALIZATION_UNARMED_STRIKE&lt;Feat Weapon Specialization Unarmed Strike&gt;|FEAT_WEAPON_SPECIALIZATION_SPEAR&lt;Feat Weapon Specialization Spear&gt;|FEAT_SKILL_AFFINITY_MOVE_SILENTLY&lt;Feat Skill Affinity Move Silently&gt;|FEAT_STILL_SPELL&lt;Feat Still Spell&gt;|FEAT_WEAPON_SPECIALIZATION_SCYTHE&lt;Feat Weapon Specialization Scythe&gt;|FEAT_VENOM_IMMUNITY&lt;Feat Venom Immunity&gt;|FEAT_WEAPON_SPECIALIZATION_DOUBLE_AXE&lt;Feat Weapon Specialization Double Axe&gt;|FEAT_WEAPON_FOCUS_UNARMED_STRIKE&lt;Feat Weapon Focus Unarmed Strike&gt;|FEAT_COMBAT_CASTING&lt;Feat Combat Casting&gt;|FEAT_WEAPON_FOCUS_GREAT_SWORD&lt;Feat Weapon Focus Great Sword&gt;|FEAT_SKILL_FOCUS_SPELLCRAFT&lt;Feat Skill Focus Spellcraft&gt;|FEAT_SMITE_EVIL&lt;Feat Smite Evil&gt;|FEAT_WEAPON_FOCUS_SICKLE&lt;Feat Weapon Focus Sickle&gt;|FEAT_MONK_ENDURANCE&lt;Feat Monk Endurance&gt;|FEAT_WEAPON_FOCUS_KUKRI&lt;Feat Weapon Focus Kukri&gt;|FEAT_WEAPON_FOCUS_SCYTHE&lt;Feat Weapon Focus Scythe&gt;|FEAT_BATTLE_TRAINING_VERSUS_ORCS&lt;Feat Battle Training Versus Orcs&gt;|FEAT_FAVORED_ENEMY_BEAST&lt;Feat Favored Enemy Beast&gt;|FEAT_IMPROVED_CRITICAL_DART&lt;Feat Improved Critical Dart&gt;|FEAT_WEAPON_FOCUS_MORNING_STAR&lt;Feat Weapon Focus Morning Star&gt;|FEAT_FLURRY_OF_BLOWS&lt;Feat Flurry Of Blows&gt;|FEAT_RAPID_SHOT&lt;Feat Rapid Shot&gt;|FEAT_WEAPON_PROFICIENCY_WIZARD&lt;Feat Weapon Proficiency Wizard&gt;|FEAT_WEAPON_FOCUS_LONGBOW&lt;Feat Weapon Focus Longbow&gt;|FEAT_WEAPON_FOCUS_HEAVY_CROSSBOW&lt;Feat Weapon Focus Heavy Crossbow&gt;|FEAT_WEAPON_FOCUS_THROWING_AXE&lt;Feat Weapon Focus Throwing Axe&gt;|FEAT_RESIST_NATURES_LURE&lt;Feat Resist Natures Lure&gt;|FEAT_DEATH_DOMAIN_POWER&lt;Feat Death Domain Power&gt;|FEAT_SKILL_FOCUS_HIDE&lt;Feat Skill Focus Hide&gt;|FEAT_WEAPON_SPECIALIZATION_LONGBOW&lt;Feat Weapon Specialization Longbow&gt;|FEAT_ANIMAL_COMPANION&lt;Feat Animal Companion&gt;|FEAT_WHOLENESS_OF_BODY&lt;Feat Wholeness Of Body&gt;|FEAT_KEEN_SENSE&lt;Feat Keen Sense&gt;|FEAT_FAVORED_ENEMY_ANIMAL&lt;Feat Favored Enemy Animal&gt;|FEAT_SPELL_FOCUS_ABJURATION&lt;Feat Spell Focus Abjuration&gt;|FEAT_FAVORED_ENEMY_FEY&lt;Feat Favored Enemy Fey&gt;|FEAT_IMPROVED_CRITICAL_GREAT_SWORD&lt;Feat Improved Critical Great Sword&gt;|FEAT_IMPROVED_CRITICAL_GREAT_AXE&lt;Feat Improved Critical Great Axe&gt;|FEAT_IMPROVED_CRITICAL_DOUBLE_AXE&lt;Feat Improved Critical Double Axe&gt;|FEAT_SKILL_FOCUS_ANIMAL_EMPATHY&lt;Feat Skill Focus Animal Empathy&gt;|FEAT_IMPROVED_CRITICAL_HEAVY_CROSSBOW&lt;Feat Improved Critical Heavy Crossbow&gt;|FEAT_DEFLECT_ARROWS&lt;Feat Deflect Arrows&gt;|FEAT_IMPROVED_CRITICAL_WAR_HAMMER&lt;Feat Improved Critical War Hammer&gt;|FEAT_BATTLE_TRAINING_VERSUS_GIANTS&lt;Feat Battle Training Versus Giants&gt;|FEAT_IMPROVED_EVASION&lt;Feat Improved Evasion&gt;|FEAT_HARDINESS_VERSUS_POISONS&lt;Feat Hardiness Versus Poisons&gt;|FEAT_IMPROVED_POWER_ATTACK&lt;Feat Improved Power Attack&gt;|FEAT_WEAPON_SPECIALIZATION_SHURIKEN&lt;Feat Weapon Specialization Shuriken&gt;|FEAT_FAVORED_ENEMY_GOBLINOID&lt;Feat Favored Enemy Goblinoid&gt;|FEAT_QUICKEN_SPELL&lt;Feat Quicken Spell&gt;|FEAT_ANIMAL_DOMAIN_POWER&lt;Feat Animal Domain Power&gt;|FEAT_WEAPON_FOCUS_DART&lt;Feat Weapon Focus Dart&gt;|FEAT_WEAPON_FOCUS_HALBERD&lt;Feat Weapon Focus Halberd&gt;|FEAT_FAVORED_ENEMY_HALFLING&lt;Feat Favored Enemy Halfling&gt;|FEAT_GREAT_FORTITUDE&lt;Feat Great Fortitude&gt;|FEAT_WEAPON_SPECIALIZATION_SHORT_SWORD&lt;Feat Weapon Specialization Short Sword&gt;|FEAT_SPELL_FOCUS_EVOCATION&lt;Feat Spell Focus Evocation&gt;|FEAT_BARBARIAN_RAGE&lt;Feat Barbarian Rage&gt;|FEAT_WEAPON_FOCUS_RAPIER&lt;Feat Weapon Focus Rapier&gt;|FEAT_SKILL_FOCUS_HEAL&lt;Feat Skill Focus Heal&gt;|FEAT_SUN_DOMAIN_POWER&lt;Feat Sun Domain Power&gt;|FEAT_WEAPON_FOCUS_SPEAR&lt;Feat Weapon Focus Spear&gt;|FEAT_WEAPON_SPECIALIZATION_THROWING_AXE&lt;Feat Weapon Specialization Throwing Axe&gt;|FEAT_WEAPON_FOCUS_GREAT_AXE&lt;Feat Weapon Focus Great Axe&gt;|FEAT_CLEAVE&lt;Feat Cleave&gt;|FEAT_WEAPON_FINESSE&lt;Feat Weapon Finesse&gt;|FEAT_WEAPON_SPECIALIZATION_RAPIER&lt;Feat Weapon Specialization Rapier&gt;|FEAT_WEAPON_FOCUS_KATANA&lt;Feat Weapon Focus Katana&gt;|FEAT_GOOD_AIM&lt;Feat Good Aim&gt;|FEAT_SLIPPERY_MIND&lt;Feat Slippery Mind&gt;|FEAT_PURITY_OF_BODY&lt;Feat Purity Of Body&gt;|FEAT_FAVORED_ENEMY_ORC&lt;Feat Favored Enemy Orc&gt;|FEAT_WEAPON_SPECIALIZATION_BASTARD_SWORD&lt;Feat Weapon Specialization Bastard Sword&gt;|FEAT_FAVORED_ENEMY_SHAPECHANGER&lt;Feat Favored Enemy Shapechanger&gt;|FEAT_WEAPON_SPECIALIZATION_SLING&lt;Feat Weapon Specialization Sling&gt;|FEAT_WEAPON_FOCUS_HEAVY_FLAIL&lt;Feat Weapon Focus Heavy Flail&gt;|FEAT_IMPROVED_CRITICAL_BASTARD_SWORD&lt;Feat Improved Critical Bastard Sword&gt;|FEAT_SKILL_FOCUS_LISTEN&lt;Feat Skill Focus Listen&gt;|FEAT_SKILL_FOCUS_CONCENTRATION&lt;Feat Skill Focus Concentration&gt;|FEAT_FAVORED_ENEMY_ELF&lt;Feat Favored Enemy Elf&gt;|FEAT_KI_STRIKE&lt;Feat Ki Strike&gt;|FEAT_WEAPON_SPECIALIZATION_DAGGER&lt;Feat Weapon Specialization Dagger&gt;|FEAT_REMOVE_DISEASE&lt;Feat Remove Disease&gt;|FEAT_SHIELD_PROFICIENCY&lt;Feat Shield Proficiency&gt;|FEAT_IMMUNITY_TO_SLEEP&lt;Feat Immunity To Sleep&gt;|FEAT_EMPOWER_SPELL&lt;Feat Empower Spell&gt;|FEAT_LOWLIGHTVISION&lt;Feat Lowlightvision&gt;|FEAT_WEAPON_FOCUS_DAGGER&lt;Feat Weapon Focus Dagger&gt;|FEAT_TRAVEL_DOMAIN_POWER&lt;Feat Travel Domain Power&gt;|FEAT_FAVORED_ENEMY_ABERRATION&lt;Feat Favored Enemy Aberration&gt;|FEAT_MONK_AC_BONUS&lt;Feat Monk Ac Bonus&gt;|FEAT_HEALING_DOMAIN_POWER&lt;Feat Healing Domain Power&gt;|FEAT_SPELL_FOCUS_ILLUSION&lt;Feat Spell Focus Illusion&gt;|FEAT_IMPROVED_CRITICAL_SHURIKEN&lt;Feat Improved Critical Shuriken&gt;|FEAT_TWO_WEAPON_FIGHTING&lt;Feat Two Weapon Fighting&gt;|FEAT_IMPROVED_CRITICAL_TWO_BLADED_SWORD&lt;Feat Improved Critical Two Bladed Sword&gt;|FEAT_WEAPON_SPECIALIZATION_CLUB&lt;Feat Weapon Specialization Club&gt;|FEAT_WEAPON_FOCUS_TWO_BLADED_SWORD&lt;Feat Weapon Focus Two Bladed Sword&gt;|FEAT_BATTLE_TRAINING_VERSUS_GOBLINS&lt;Feat Battle Training Versus Goblins&gt;|FEAT_QUIVERING_PALM&lt;Feat Quivering Palm&gt;|FEAT_WEAPON_SPECIALIZATION_HEAVY_CROSSBOW&lt;Feat Weapon Specialization Heavy Crossbow&gt;|FEAT_WEAPON_FOCUS_STAFF&lt;Feat Weapon Focus Staff&gt;|FEAT_BARDIC_KNOWLEDGE&lt;Feat Bardic Knowledge&gt;|FEAT_WEAPON_FOCUS_SCIMITAR&lt;Feat Weapon Focus Scimitar&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_MACE&lt;Feat Improved Critical Light Mace&gt;|FEAT_FAVORED_ENEMY_UNDEAD&lt;Feat Favored Enemy Undead&gt;|FEAT_WEAPON_FOCUS_SHURIKEN&lt;Feat Weapon Focus Shuriken&gt;|FEAT_SPELL_FOCUS_DIVINATION&lt;Feat Spell Focus Divination&gt;|FEAT_WEAPON_SPECIALIZATION_MORNING_STAR&lt;Feat Weapon Specialization Morning Star&gt;|FEAT_HARDINESS_VERSUS_ENCHANTMENTS&lt;Feat Hardiness Versus Enchantments&gt;|FEAT_WEAPON_FOCUS_LIGHT_FLAIL&lt;Feat Weapon Focus Light Flail&gt;|FEAT_EXTRA_TURNING&lt;Feat Extra Turning&gt;|FEAT_SKILL_FOCUS_PERFORM&lt;Feat Skill Focus Perform&gt;|FEAT_WEAPON_SPECIALIZATION_SICKLE&lt;Feat Weapon Specialization Sickle&gt;|FEAT_WEAPON_SPECIALIZATION_KAMA&lt;Feat Weapon Specialization Kama&gt;|FEAT_WEAPON_SPECIALIZATION_KUKRI&lt;Feat Weapon Specialization Kukri&gt;|FEAT_DESTRUCTION_DOMAIN_POWER&lt;Feat Destruction Domain Power&gt;|FEAT_WEAPON_SPECIALIZATION_SHORTBOW&lt;Feat Weapon Specialization Shortbow&gt;|FEAT_AURA_OF_COURAGE&lt;Feat Aura Of Courage&gt;|FEAT_NATURE_SENSE&lt;Feat Nature Sense&gt;|FEAT_WEAPON_SPECIALIZATION_KATANA&lt;Feat Weapon Specialization Katana&gt;|FEAT_SKILL_FOCUS_SPOT&lt;Feat Skill Focus Spot&gt;|FEAT_WEAPON_SPECIALIZATION_LONG_SWORD&lt;Feat Weapon Specialization Long Sword&gt;|FEAT_FAVORED_ENEMY_VERMIN&lt;Feat Favored Enemy Vermin&gt;|FEAT_EARTH_DOMAIN_POWER&lt;Feat Earth Domain Power&gt;|FEAT_IMPROVED_CRITICAL_STAFF&lt;Feat Improved Critical Staff&gt;|FEAT_MAXIMIZE_SPELL&lt;Feat Maximize Spell&gt;|FEAT_BARD_SONGS&lt;Feat Bard Songs&gt;|FEAT_WEAPON_PROFICIENCY_MONK&lt;Feat Weapon Proficiency Monk&gt;|FEAT_ARMOR_PROFICIENCY_MEDIUM&lt;Feat Armor Proficiency Medium&gt;|FEAT_IMPROVED_CRITICAL_DAGGER&lt;Feat Improved Critical Dagger&gt;|FEAT_LAY_ON_HANDS&lt;Feat Lay On Hands&gt;|FEAT_IMPROVED_DISARM&lt;Feat Improved Disarm&gt;|FEAT_WEAPON_FOCUS_DOUBLE_AXE&lt;Feat Weapon Focus Double Axe&gt;|FEAT_IMPROVED_CRITICAL_SHORTBOW&lt;Feat Improved Critical Shortbow&gt;|FEAT_SKILL_FOCUS_DISABLE_TRAP&lt;Feat Skill Focus Disable Trap&gt;|FEAT_WAR_DOMAIN_POWER&lt;Feat War Domain Power&gt;|FEAT_WEAPON_SPECIALIZATION_TWO_BLADED_SWORD&lt;Feat Weapon Specialization Two Bladed Sword&gt;|FEAT_WEAPON_FOCUS_CLUB&lt;Feat Weapon Focus Club&gt;|FEAT_SUMMON_FAMILIAR&lt;Feat Summon Familiar&gt;|FEAT_SILENCE_SPELL&lt;Feat Silence Spell&gt;|FEAT_SKILL_FOCUS_PERSUADE&lt;Feat Skill Focus Persuade&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_FLAIL&lt;Feat Weapon Specialization Light Flail&gt;|FEAT_WEAPON_FOCUS_LIGHT_MACE&lt;Feat Weapon Focus Light Mace&gt;|FEAT_TRACKLESS_STEP&lt;Feat Trackless Step&gt;|FEAT_EXTEND_SPELL&lt;Feat Extend Spell&gt;|FEAT_SPELL_FOCUS_NECROMANCY&lt;Feat Spell Focus Necromancy&gt;|FEAT_IMPROVED_UNARMED_STRIKE&lt;Feat Improved Unarmed Strike&gt;|FEAT_SKILL_FOCUS_DISCIPLINE&lt;Feat Skill Focus Discipline&gt;|FEAT_IMPROVED_CRITICAL_CREATURE&lt;Feat Improved Critical Creature&gt;|FEAT_WOODLAND_STRIDE&lt;Feat Woodland Stride&gt;|FEAT_SPELL_PENETRATION&lt;Feat Spell Penetration&gt;|FEAT_WEAPON_PROFICIENCY_CREATURE&lt;Feat Weapon Proficiency Creature&gt;|FEAT_TOUGHNESS&lt;Feat Toughness&gt;|FEAT_PARTIAL_SKILL_AFFINITY_SEARCH&lt;Feat Partial Skill Affinity Search&gt;|FEAT_CRIPPLING_STRIKE&lt;Feat Crippling Strike&gt;|FEAT_IMPROVED_CRITICAL_SCYTHE&lt;Feat Improved Critical Scythe&gt;|FEAT_WEAPON_PROFICIENCY_EXOTIC&lt;Feat Weapon Proficiency Exotic&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_CROSSBOW&lt;Feat Weapon Specialization Light Crossbow&gt;|FEAT_STUNNING_FIST&lt;Feat Stunning Fist&gt;|FEAT_FAVORED_ENEMY_OUTSIDER&lt;Feat Favored Enemy Outsider&gt;|FEAT_WEAPON_FOCUS_LIGHT_CROSSBOW&lt;Feat Weapon Focus Light Crossbow&gt;|FEAT_EMPTY_BODY&lt;Feat Empty Body&gt;|FEAT_IMPROVED_CRITICAL_THROWING_AXE&lt;Feat Improved Critical Throwing Axe&gt;|FEAT_FAVORED_ENEMY_ELEMENTAL&lt;Feat Favored Enemy Elemental&gt;|FEAT_LUCK_DOMAIN_POWER&lt;Feat Luck Domain Power&gt;|FEAT_WEAPON_PROFICIENCY_MARTIAL&lt;Feat Weapon Proficiency Martial&gt;|FEAT_WEAPON_SPECIALIZATION_HEAVY_FLAIL&lt;Feat Weapon Specialization Heavy Flail&gt;|FEAT_IMPROVED_KNOCKDOWN&lt;Feat Improved Knockdown&gt;|FEAT_IMPROVED_CRITICAL_DIRE_MACE&lt;Feat Improved Critical Dire Mace&gt;|FEAT_FAVORED_ENEMY_GNOME&lt;Feat Favored Enemy Gnome&gt;|FEAT_FIRE_DOMAIN_POWER&lt;Feat Fire Domain Power&gt;|FEAT_IMPROVED_CRITICAL_CLUB&lt;Feat Improved Critical Club&gt;|FEAT_UNCANNY_REFLEX&lt;Feat Uncanny Reflex&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_FLAIL&lt;Feat Improved Critical Light Flail&gt;|FEAT_SKILL_MASTERY&lt;Feat Skill Mastery&gt;|FEAT_DARKVISION&lt;Feat Darkvision&gt;|FEAT_WEAPON_SPECIALIZATION_WAR_HAMMER&lt;Feat Weapon Specialization War Hammer&gt;|FEAT_ELEMENTAL_SHAPE&lt;Feat Elemental Shape&gt;|FEAT_SKILL_FOCUS_TAUNT&lt;Feat Skill Focus Taunt&gt;|FEAT_IMPROVED_CRITICAL_HAND_AXE&lt;Feat Improved Critical Hand Axe&gt;|FEAT_IMPROVED_CRITICAL_SICKLE&lt;Feat Improved Critical Sickle&gt;|FEAT_FEARLESS&lt;Feat Fearless&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_HAMMER&lt;Feat Weapon Specialization Light Hammer&gt;|FEAT_SKILL_FOCUS_SET_TRAP&lt;Feat Skill Focus Set Trap&gt;|FEAT_WEAPON_PROFICIENCY_DRUID&lt;Feat Weapon Proficiency Druid&gt;|FEAT_EVASION&lt;Feat Evasion&gt;|FEAT_IMPROVED_CRITICAL_LONG_SWORD&lt;Feat Improved Critical Long Sword&gt;|FEAT_WEAPON_SPECIALIZATION_HAND_AXE&lt;Feat Weapon Specialization Hand Axe&gt;|FEAT_FAVORED_ENEMY_MAGICAL_BEAST&lt;Feat Favored Enemy Magical Beast&gt;|FEAT_HARDINESS_VERSUS_SPELLS&lt;Feat Hardiness Versus Spells&gt;|FEAT_WEAPON_FOCUS_WAR_HAMMER&lt;Feat Weapon Focus War Hammer&gt;|FEAT_IMPROVED_CRITICAL_SLING&lt;Feat Improved Critical Sling&gt;|FEAT_SKILL_FOCUS_PICK_POCKET&lt;Feat Skill Focus Pick Pocket&gt;|FEAT_SKILL_FOCUS_USE_MAGIC_DEVICE&lt;Feat Skill Focus Use Magic Device&gt;|FEAT_WEAPON_FOCUS_DIRE_MACE&lt;Feat Weapon Focus Dire Mace&gt;|FEAT_ALERTNESS&lt;Feat Alertness&gt;|FEAT_SAP&lt;Feat Sap&gt;|FEAT_SPELL_FOCUS_TRANSMUTATION&lt;Feat Spell Focus Transmutation&gt;|FEAT_CALLED_SHOT&lt;Feat Called Shot&gt;|FEAT_POINT_BLANK_SHOT&lt;Feat Point Blank Shot&gt;|FEAT_WEAPON_PROFICIENCY_SIMPLE&lt;Feat Weapon Proficiency Simple&gt;|FEAT_SKILL_AFFINITY_LORE&lt;Feat Skill Affinity Lore&gt;|FEAT_POWER_ATTACK&lt;Feat Power Attack&gt;|FEAT_WEAPON_FOCUS_HAND_AXE&lt;Feat Weapon Focus Hand Axe&gt;|FEAT_WEAPON_SPECIALIZATION_SCIMITAR&lt;Feat Weapon Specialization Scimitar&gt;|FEAT_WILD_SHAPE&lt;Feat Wild Shape&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_CROSSBOW&lt;Feat Improved Critical Light Crossbow&gt;|FEAT_HARDINESS_VERSUS_ILLUSIONS&lt;Feat Hardiness Versus Illusions&gt;|FEAT_GOOD_DOMAIN_POWER&lt;Feat Good Domain Power&gt;|FEAT_SPELL_FOCUS_ENCHANTMENT&lt;Feat Spell Focus Enchantment&gt;|FEAT_BARBARIAN_ENDURANCE&lt;Feat Barbarian Endurance&gt;|FEAT_SKILL_FOCUS_SEARCH&lt;Feat Skill Focus Search&gt;|FEAT_DISARM&lt;Feat Disarm&gt;|FEAT_WEAPON_FOCUS_CREATURE&lt;Feat Weapon Focus Creature&gt;|FEAT_WEAPON_SPECIALIZATION_GREAT_SWORD&lt;Feat Weapon Specialization Great Sword&gt;|FEAT_OPPORTUNIST&lt;Feat Opportunist&gt;|FEAT_IMPROVED_CRITICAL_SHORT_SWORD&lt;Feat Improved Critical Short Sword&gt;|FEAT_FAVORED_ENEMY_HUMAN&lt;Feat Favored Enemy Human&gt;|FEAT_WEAPON_SPECIALIZATION_BATTLE_AXE&lt;Feat Weapon Specialization Battle Axe&gt;|FEAT_DIVINE_GRACE&lt;Feat Divine Grace&gt;|FEAT_KNOWLEDGE_DOMAIN_POWER&lt;Feat Knowledge Domain Power&gt;|FEAT_FAVORED_ENEMY_CONSTRUCT&lt;Feat Favored Enemy Construct&gt;|FEAT_AIR_DOMAIN_POWER&lt;Feat Air Domain Power&gt;|FEAT_IMPROVED_CRITICAL_SPEAR&lt;Feat Improved Critical Spear&gt;|FEAT_BATTLE_TRAINING_VERSUS_REPTILIANS&lt;Feat Battle Training Versus Reptilians&gt;|FEAT_IMPROVED_CRITICAL_LONGBOW&lt;Feat Improved Critical Longbow&gt;|FEAT_WEAPON_FOCUS_LONG_SWORD&lt;Feat Weapon Focus Long Sword&gt;|FEAT_IMPROVED_PARRY&lt;Feat Improved Parry&gt;|FEAT_WEAPON_FOCUS_LIGHT_HAMMER&lt;Feat Weapon Focus Light Hammer&gt;|FEAT_TRICKERY_DOMAIN_POWER&lt;Feat Trickery Domain Power&gt;|FEAT_WEAPON_FOCUS_SLING&lt;Feat Weapon Focus Sling&gt;|FEAT_SKILL_FOCUS_LORE&lt;Feat Skill Focus Lore&gt;|FEAT_SKILL_AFFINITY_CONCENTRATION&lt;Feat Skill Affinity Concentration&gt;|FEAT_SKILL_AFFINITY_SPOT&lt;Feat Skill Affinity Spot&gt;|FEAT_PARTIAL_SKILL_AFFINITY_SPOT&lt;Feat Partial Skill Affinity Spot&gt;|FEAT_WEAPON_SPECIALIZATION_CREATURE&lt;Feat Weapon Specialization Creature&gt;|FEAT_WEAPON_SPECIALIZATION_LIGHT_MACE&lt;Feat Weapon Specialization Light Mace&gt;|FEAT_WATER_DOMAIN_POWER&lt;Feat Water Domain Power&gt;|FEAT_FAVORED_ENEMY_HALFORC&lt;Feat Favored Enemy Halforc&gt;|FEAT_IMPROVED_CRITICAL_KUKRI&lt;Feat Improved Critical Kukri&gt;|FEAT_WEAPON_SPECIALIZATION_HALBERD&lt;Feat Weapon Specialization Halberd&gt;|FEAT_AMBIDEXTERITY&lt;Feat Ambidexterity&gt;|FEAT_FAVORED_ENEMY_MONSTROUS&lt;Feat Favored Enemy Monstrous&gt;|FEAT_WEAPON_SPECIALIZATION_STAFF&lt;Feat Weapon Specialization Staff&gt;|FEAT_WEAPON_SPECIALIZATION_GREAT_AXE&lt;Feat Weapon Specialization Great Axe&gt;|FEAT_ARMOR_PROFICIENCY_HEAVY&lt;Feat Armor Proficiency Heavy&gt;|FEAT_DEFENSIVE_ROLL&lt;Feat Defensive Roll&gt;|FEAT_IRON_WILL&lt;Feat Iron Will&gt;|FEAT_IMPROVED_CRITICAL_RAPIER&lt;Feat Improved Critical Rapier&gt;|FEAT_WEAPON_FOCUS_KAMA&lt;Feat Weapon Focus Kama&gt;|FEAT_IMPROVED_CRITICAL_UNARMED_STRIKE&lt;Feat Improved Critical Unarmed Strike&gt;|FEAT_IMPROVED_CRITICAL_LIGHT_HAMMER&lt;Feat Improved Critical Light Hammer&gt;|FEAT_EVIL_DOMAIN_POWER&lt;Feat Evil Domain Power&gt;|FEAT_ARMOR_PROFICIENCY_LIGHT&lt;Feat Armor Proficiency Light&gt;|FEAT_TURN_UNDEAD&lt;Feat Turn Undead&gt;|FEAT_DODGE&lt;Feat Dodge&gt;|FEAT_WEAPON_PROFICIENCY_ROGUE&lt;Feat Weapon Proficiency Rogue&gt;|FEAT_IMPROVED_CRITICAL_HALBERD&lt;Feat Improved Critical Halberd&gt;|FEAT_WEAPON_SPECIALIZATION_DIRE_MACE&lt;Feat Weapon Specialization Dire Mace&gt;|FEAT_MAGIC_DOMAIN_POWER&lt;Feat Magic Domain Power&gt;|FEAT_FAVORED_ENEMY_GIANT&lt;Feat Favored Enemy Giant&gt;|FEAT_SPELL_FOCUS_CONJURATION&lt;Feat Spell Focus Conjuration&gt;|FEAT_IMPROVED_TWO_WEAPON_FIGHTING&lt;Feat Improved Two Weapon Fighting&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
    <Type>
      <Name>LockClose</Name>
      <Keyword>lock_close</Keyword>
      <CodeSymbol>int</CodeSymbol>
      <Enum>FALSE&lt;Unlock and Open&gt;|TRUE&lt;Lock and Close&gt;</Enum>
      <GUI>JCOMBOBOX</GUI>
    </Type>
  </Types>
  <Slots defaultFormat="file">
    <Slot>
      <Name>OnDisturbed</Name>
      <Keyword>OnInvDisturbed</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Disturber</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Disturber</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Disturber</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>0</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastDisturbed();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Disturbance Type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>disturbance_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Disturbance Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Disturbance Type</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>1</Id>
                  <Types>
                    <Type>disturbance_type</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetInventoryDisturbType();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Disturbed Item</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Disturbed Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Disturbed Item</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>2</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetInventoryDisturbItem();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnEnter</Name>
      <Keyword>OnEnter</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Entering Creature</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Entering Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Entering Object</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>3</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetEnteringObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUnlock</Name>
      <Keyword>OnUnlock</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Unlocker</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Unlocker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Unlocker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>4</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastUnlocked();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnAreaTransitionClick</Name>
      <Keyword>OnAreaTransitionClick</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Clicking Object</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Clicker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Clicker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>5</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetClickingObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Transition Target</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>door</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Transition Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Transition Target</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>6</Id>
                  <Types>
                    <Type>door</Type>
                    <Type>trigger</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>object</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>door</Type>
                        <Type>trigger</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>door</Type>
                          <Type>trigger</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetTransitionTarget(</Literal>
                      <Scope data="argument" ref="object">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnBlocked</Name>
      <Keyword>ScriptOnBlocked</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Blocking Door</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>door</Type>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>The Blocking Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>The Blocking Door</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>7</Id>
                  <Types>
                    <Type>door</Type>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetBlockingDoor();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>The Subject</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Get Object Self</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Get Object Self</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>8</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                    <Type>door</Type>
                    <Type>trigger</Type>
                    <Type>store</Type>
                    <Type>item</Type>
                    <Type>module</Type>
                    <Type>area</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return OBJECT_SELF;</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerDying</Name>
      <Keyword>Mod_OnPlrDying</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Dying Player</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Dying Player</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Dying Player</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>9</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPlayerDying();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>ScriptSpellAt</Name>
      <Keyword>ScriptSpellAt</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Spell</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>spell</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Spell Cast</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Spell Cast</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>10</Id>
                  <Types>
                    <Type>spell</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastSpell();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Spell Caster</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Spell Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Spell Caster</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>11</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                    <Type>door</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastSpellCaster();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Spell Is Harmful</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Spell Harmful</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Spell Harmful</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>12</Id>
                  <Types>
                    <Type>question</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastSpellHarmful();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnModuleLoad</Name>
      <Keyword>Mod_OnModLoad</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot>
      <Name>OnClick</Name>
      <Keyword>OnClick</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Clicking Creature</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Clicker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Clicker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>13</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetClickingObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerUnEquipItem</Name>
      <Keyword>Mod_OnPlrUnEqItm</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Unequipped Item</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Unequipped Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Unequipped Item</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>14</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetPCItemLastUnequipped();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Unequipper</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Unequipper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Unequipper</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>15</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetPCItemLastUnequippedBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Possessor</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Possessor</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Possessor</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>16</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>item</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>item</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>item</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetItemPossessor(</Literal>
                      <Scope data="argument" ref="item">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnClientEnter</Name>
      <Keyword>Mod_OnClientEntr</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Entering Client</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Entering Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Entering Object</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>17</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetEnteringObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnHeartbeat</Name>
      <Keyword>OnHeartbeat</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>the Subject</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>module</Type>
            <Type>area</Type>
            <Type>creature</Type>
            <Type>encounter</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt"/>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnTrapTriggered</Name>
      <Keyword>OnTrapTriggered</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Triggering Creature</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Triggering Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Triggering Creature</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>18</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetEnteringObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>the Subject</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>trigger</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt"/>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnAcquireItem</Name>
      <Keyword>Mod_OnAcquirItem</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Acquired Item</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Acquired Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Acquired Item</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>19</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetModuleItemAcquired();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Object Item was Acquired From</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>module</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Object Item was Acquired From</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Object Item was Acquired From</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>20</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                    <Type>module</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetModuleItemAcquiredFrom();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Acquirer</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Acquirer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Acquirer</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>21</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetModuleItemAcquiredBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Stack Size</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Stack Size</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Stack Size</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>22</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetModuleItemAcquiredStackSize());</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDeath</Name>
      <Keyword>OnDeath</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Killer</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Killer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Killer</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>23</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastKiller();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDamaged</Name>
      <Keyword>OnDamaged</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Damager</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>door</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Damager</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Damager</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>24</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>door</Type>
                    <Type>placeable</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastDamager();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Damage Amount</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Damage Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Damage Amount</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>25</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetTotalDamageDealt());</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Current Hit Points</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Current Hit Points</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Current Hit Points</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>26</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetCurrentHitPoints(OBJECT_SELF));</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Maximum Hit Points</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Max Hit Points for Object &lt;object&gt;</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Max Hit Points for Object &lt;object&gt;</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>27</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Object</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                        <Type>placeable</Type>
                        <Type>door</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                          <Type>placeable</Type>
                          <Type>door</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetMaxHitPoints(</Literal>
                      <Scope data="argument" ref="Object">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>));</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnConversation</Name>
      <Keyword>ScriptDialogue</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Speaker</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Speaker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Speaker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>28</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastSpeaker();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnHeartbeat</Name>
      <Keyword>Mod_OnHeartbeat</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>the Subject</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>module</Type>
            <Type>area</Type>
            <Type>creature</Type>
            <Type>encounter</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt"/>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnExit</Name>
      <Keyword>OnExit</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Exiting Creature</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Exiting Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Exiting Object</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>29</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetExitingObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnSpawn</Name>
      <Keyword>ScriptSpawn</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot format="conversation_conditional">
      <Name>Active</Name>
      <Keyword>Active</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot>
      <Name>OnClientLeave</Name>
      <Keyword>Mod_OnClientLeav</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Exiting Client</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Exiting Client</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Exiting Client</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>30</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetExitingObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDisarm</Name>
      <Keyword>OnDisarm</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Disarmer</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Disarmer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Disarmer</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>32</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastDisarmed();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnFailToOpen</Name>
      <Keyword>OnFailToOpen</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Clicker</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Clicker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Clicker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>31</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetClickingObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnEnter</Name>
      <Keyword>OnEntered</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Entering Creature</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Entering Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Entering Object</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>33</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetEnteringObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnCutsceneAbort</Name>
      <Keyword>Mod_OnCutsnAbort</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Cutscene Aborter</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Cutscene Aborter</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Cutscene Aborter</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>34</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPCToCancelCutscene();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnSpellCastAt</Name>
      <Keyword>OnSpellCastAt</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Spell</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>spell</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Spell Cast</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Spell Cast</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>35</Id>
                  <Types>
                    <Type>spell</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastSpell();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Spell Caster</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Spell Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Spell Caster</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>36</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                    <Type>door</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastSpellCaster();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Spell Is Harmful</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Spell Harmful</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Spell Harmful</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>37</Id>
                  <Types>
                    <Type>question</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastSpellHarmful();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>EndConverAbort</Name>
      <Keyword>EndConverAbort</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot>
      <Name>OnPerception</Name>
      <Keyword>ScriptOnNotice</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Perceived</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Perceived</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Perceived</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>38</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPerceived();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Last Perceived Heard</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Was Last Perceived Heard</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Was Last Perceived Heard</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>39</Id>
                  <Types>
                    <Type>question</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPerceptionHeard();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Last Perceived Inaudible</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Was Last Perceived Inaudible</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Was Last Perceived Inaudible</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>40</Id>
                  <Types>
                    <Type>question</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPerceptionInaudible();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Last Perceived Seen</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Was Last Perceived Seen</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Was Last Perceived Seen</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>41</Id>
                  <Types>
                    <Type>question</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPerceptionSeen();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Last Perceived Vanished</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>question</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Has Last Perceived Vanished</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Has Last Perceived Vanished</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>42</Id>
                  <Types>
                    <Type>question</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPerceptionVanished();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>the Subject</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt"/>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnOpenStore</Name>
      <Keyword>OnOpenStore</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Opener</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Opener</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Opener</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>43</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastOpenedBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerRespawn</Name>
      <Keyword>Mod_OnSpawnBtnDn</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Respawning Player</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Respawning Player</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Respawning Player</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>44</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastRespawnButtonPresser();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerEquipItem</Name>
      <Keyword>Mod_OnPlrEqItm</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Item Equipped</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Equipped Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Equipped Item</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>45</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetPCItemLastEquipped();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Equipper</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Equipper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Equipper</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>46</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetPCItemLastEquippedBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUserDefined</Name>
      <Keyword>OnUserDefined</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Event Number</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Event Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Event Number</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>47</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetUserDefinedEventNumber());</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>EndConversation</Name>
      <Keyword>EndConversation</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot>
      <Name>OnPlayerLevelUp</Name>
      <Keyword>Mod_OnPlrLvlUp</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Levelling PC</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Levelling PC</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Levelling PC</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>48</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetPCLevellingUp();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerRest</Name>
      <Keyword>Mod_OnPlrRest</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last PC Rested</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last PC Rested</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last PC Rested</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>49</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPCRested();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Rest Type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>rest_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Rest Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Rest Type</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>50</Id>
                  <Types>
                    <Type>rest_type</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastRestEventType();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnActivateItem</Name>
      <Keyword>Mod_OnActvtItem</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Activated Item</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Activated Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Activated Item</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>51</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetItemActivated();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Activated Item Target</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Target</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>52</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetItemActivatedTarget();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Activated Item Target Location</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>location</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Target Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Target Location</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>53</Id>
                  <Types>
                    <Type>location</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetItemActivatedTargetLocation();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Activator</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Activator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Activator</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>54</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetItemActivator();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDisturbed</Name>
      <Keyword>ScriptDisturbed</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Disturber</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Disturber</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Disturber</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>55</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastDisturbed();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Disturbance Type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>disturbance_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Disturbance Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Disturbance Type</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>56</Id>
                  <Types>
                    <Type>disturbance_type</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetInventoryDisturbType();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Disturbed Item</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Disturbed Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Disturbed Item</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>57</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetInventoryDisturbItem();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnCombatRoundEnd</Name>
      <Keyword>ScriptEndRound</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot>
      <Name>OnLock</Name>
      <Keyword>OnLock</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Locker</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Locker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Locker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>58</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastLocked();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Lock DC</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Lock DC</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Lock DC</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>59</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetLockLockDC());</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnStoreClosed</Name>
      <Keyword>OnStoreClosed</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Closed By</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Closer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Closer</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>60</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastClosedBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>Script</Name>
      <Keyword>Script</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot>
      <Name>OnUsed</Name>
      <Keyword>OnUsed</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last User</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last User</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>61</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastUsedBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDamaged</Name>
      <Keyword>ScriptDamaged</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Damager</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>door</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Damager</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Damager</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>62</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>door</Type>
                    <Type>placeable</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastDamager();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Damage Amount</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Damage Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Damage Amount</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>63</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetTotalDamageDealt());</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Damage Amount of Type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Damage Amount of Type &lt;Damage Type&gt;</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Damage Amount of Type &lt;Damage Type&gt;</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>64</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Damage Type</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>damage_type</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>damage_type</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetDamageDealtByType(</Literal>
                      <Scope data="argument" ref="Damage Type">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnExhausted</Name>
      <Keyword>OnExhausted</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
    <Slot>
      <Name>OnEnter</Name>
      <Keyword>ScriptOnEnter</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Entering Creature</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Entering Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Entering Creature</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>65</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetEnteringObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUnAqcuireItem</Name>
      <Keyword>Mod_OnUnAqreItem</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Item Lost</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Item Lost</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Item Lost</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>72</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetModuleItemLost();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Item Loser</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Item Loser</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Item Loser</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>73</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetModuleItemLostBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnClose</Name>
      <Keyword>OnClosed</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Closer</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Closer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Closer</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>66</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastClosedBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPhysicalAttacked</Name>
      <Keyword>ScriptAttacked</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Attacker</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Attacker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Attacker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>67</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastAttacker();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>The Damager</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Damager</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Damager</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>68</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastDamager();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Weapon Used</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Weapon Used</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Weapon Used</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>69</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Attacker</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastWeaponUsed(</Literal>
                      <Scope data="argument" ref="Attacker">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Attack Mode</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>combat_mode</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Attack Mode</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Attack Mode</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>70</Id>
                  <Types>
                    <Type>combat_mode</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Attacker</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastAttackMode(</Literal>
                      <Scope data="argument" ref="Attacker">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Attack Type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>attack_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Attack Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Attack Type</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>71</Id>
                  <Types>
                    <Type>attack_type</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Attacker</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastAttackType(</Literal>
                      <Scope data="argument" ref="Attacker">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerDeath</Name>
      <Keyword>Mod_OnPlrDeath</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Dead Player</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Dead Player</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Dead Player</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>74</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastPlayerDied();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Last Hostile Actor</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Hostile Actor</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Hostile Actor</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>75</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Victim</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastHostileActor(</Literal>
                      <Scope data="argument" ref="Victim">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnHeartbeat</Name>
      <Keyword>ScriptHeartbeat</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>the Subject</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>module</Type>
            <Type>area</Type>
            <Type>creature</Type>
            <Type>encounter</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt reference="/APIDictionary/Slots/Slot[5]/Implicits/KnowIt[2]/Binding/ScriptIt"/>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPlayerChat</Name>
      <Keyword>Mod_OnPlrChat</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Player Character</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Player Character</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Player Character</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>573</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetPCChatSpeaker();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Chat Message</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>string</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Chat Message</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Chat Message</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>574</Id>
                  <Types>
                    <Type>string</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetPCChatMessage();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnPhysicalAttacked</Name>
      <Keyword>OnMeleeAttacked</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Attacker</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Attacker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Attacker</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>76</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Attackee</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                        <Type>door</Type>
                        <Type>placeable</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                          <Type>door</Type>
                          <Type>placeable</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastAttacker(</Literal>
                      <Scope data="argument" ref="Attackee">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>The Damager</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Damager</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Damager</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>77</Id>
                  <Types>
                    <Type>creature</Type>
                    <Type>placeable</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastDamager();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Weapon Used</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>item</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Weapon Used</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Weapon Used</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>78</Id>
                  <Types>
                    <Type>item</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Attacker</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastWeaponUsed(</Literal>
                      <Scope data="argument" ref="Attacker">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Attack Mode</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>combat_mode</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Attack Mode</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Attack Mode</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>79</Id>
                  <Types>
                    <Type>combat_mode</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Attacker</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastAttackMode(</Literal>
                      <Scope data="argument" ref="Attacker">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
        <KnowIt>
          <Name>Attack Type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>attack_type</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Attack Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Attack Type</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>80</Id>
                  <Types>
                    <Type>attack_type</Type>
                  </Types>
                  <Parameters>
                    <KnowIt>
                      <Name>Attacker</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>creature</Type>
                      </Types>
                      <Binding flavour="runTime">
                        <Types>
                          <Type>creature</Type>
                        </Types>
                      </Binding>
                    </KnowIt>
                  </Parameters>
                  <Code>
                    <Line>
                      <Literal>return GetLastAttackType(</Literal>
                      <Scope data="argument" ref="Attacker">
                        <Fragment data="name"/>
                      </Scope>
                      <Literal>);</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnDeath</Name>
      <Keyword>ScriptDeath</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>The Killer</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>trigger</Type>
            <Type>door</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Killer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Killer</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>81</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastKiller();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnExit</Name>
      <Keyword>ScriptOnExit</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Exiting Creature</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Exiting Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Exiting Object</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>83</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetExitingObject();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUserDefined</Name>
      <Keyword>Mod_OnUsrDefined</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Event Number</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Event Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Event Number</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>82</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetUserDefinedEventNumber());</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnUserDefined</Name>
      <Keyword>ScriptUserDefine</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Event Number</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>float</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Event Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Event Number</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>84</Id>
                  <Types>
                    <Type>float</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return IntToFloat(GetUserDefinedEventNumber());</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnOpen</Name>
      <Keyword>OnOpen</Keyword>
      <Parameters/>
      <Implicits>
        <KnowIt>
          <Name>Last Opener</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
          <Binding flavour="function">
            <ScriptIt>
              <Name>Last Opener</Name>
              <Visible>true</Visible>
              <Labels/>
              <Children/>
              <CodeBlocks>
                <CodeBlockSource>
                  <Name>Last Opener</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Id>85</Id>
                  <Types>
                    <Type>creature</Type>
                  </Types>
                  <Code>
                    <Line>
                      <Literal>return GetLastOpenedBy();</Literal>
                    </Line>
                  </Code>
                </CodeBlockSource>
              </CodeBlocks>
            </ScriptIt>
          </Binding>
        </KnowIt>
      </Implicits>
    </Slot>
    <Slot>
      <Name>OnRested</Name>
      <Keyword>ScriptRested</Keyword>
      <Parameters/>
      <Implicits/>
    </Slot>
  </Slots>
  <Causes>
    <ScriptIt>
      <Name>When &lt;subject&gt; is attacked with &lt;weapon used&gt; by &lt;the attacker&gt; in &lt;attack mode&gt; with &lt;attack type&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is attacked with &lt;weapon used&gt; by &lt;the attacker&gt; in &lt;attack mode&gt; with &lt;attack type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptAttacked</Slot>
          <Id>86</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is damaged by &lt;the damager&gt; for &lt;damage amount&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is damaged by &lt;the damager&gt; for &lt;damage amount&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptDamaged</Slot>
          <Id>87</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is killed by &lt;the killer&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is killed by &lt;the killer&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptDeath</Slot>
          <Id>88</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; converses with &lt;the speaker&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; converses with &lt;the speaker&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptDialogue</Slot>
          <Id>89</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s &lt;disturbed item&gt; is disturbed by &lt;last disturber&gt; with &lt;disturbance type&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s &lt;disturbed item&gt; is disturbed by &lt;last disturber&gt; with &lt;disturbance type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptDisturbed</Slot>
          <Id>90</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s combat round ends</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s combat round ends</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptEndRound</Slot>
          <Id>91</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s heart beats</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s heart beats</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptHeartbeat</Slot>
          <Id>92</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is blocked by &lt;the blocking door&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is blocked by &lt;the blocking door&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptOnBlocked</Slot>
          <Id>93</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; perceives &lt;last perceived&gt; that is &lt;last perceived heard&gt;, &lt;last perceived inaudible&gt;, &lt;last perceived seen&gt;, or &lt;last perceived vanished&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; perceives &lt;last perceived&gt; that is &lt;last perceived heard&gt;, &lt;last perceived inaudible&gt;, &lt;last perceived seen&gt;, or &lt;last perceived vanished&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptOnNotice</Slot>
          <Id>94</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;Subject&gt; becomes rested</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;Subject&gt; becomes rested</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptRested</Slot>
          <Id>96</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is spawned</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is spawned</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptSpawn</Slot>
          <Id>97</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; becomes the target of &lt;spell&gt; cast by &lt;spell caster&gt; and if &lt;spell is harmful&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; becomes the target of &lt;spell&gt; cast by &lt;spell caster&gt; and if &lt;spell is harmful&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptSpellAt</Slot>
          <Id>98</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s user-defined event &lt;Event Number&gt; occurs</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s user-defined event &lt;Event Number&gt; occurs</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptUserDefine</Slot>
          <Id>99</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is closed by &lt;last closer&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is closed by &lt;last closer&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnClosed</Slot>
          <Id>100</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is damaged by &lt;the damager&gt; for &lt;damage amount&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is damaged by &lt;the damager&gt; for &lt;damage amount&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnDamaged</Slot>
          <Id>101</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is killed by &lt;the killer&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is killed by &lt;the killer&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnDeath</Slot>
          <Id>102</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is disarmed by &lt;disarmer&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is disarmed by &lt;disarmer&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnDisarm</Slot>
          <Id>103</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;Subject&gt;&apos;s heart beats</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;Subject&gt;&apos;s heart beats</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnHeartbeat</Slot>
          <Id>104</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>encounter</Type>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is locked with &lt;lock DC&gt; by &lt;locker&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is locked with &lt;lock DC&gt; by &lt;locker&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnLock</Slot>
          <Id>105</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is melee attacked with &lt;weapon used&gt; by &lt;the attacker&gt; in &lt;attack mode&gt; with &lt;attack type&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is melee attacked with &lt;weapon used&gt; by &lt;the attacker&gt; in &lt;attack mode&gt; with &lt;attack type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnMeleeAttacked</Slot>
          <Id>106</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is opened by &lt;last opener&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is opened by &lt;last opener&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnOpen</Slot>
          <Id>107</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;Subject&gt; becomes the target of &lt;spell&gt; cast by &lt;spell caster&gt; and if &lt;spell is harmful&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;Subject&gt; becomes the target of &lt;spell&gt; cast by &lt;spell caster&gt; and if &lt;spell is harmful&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnSpellCastAt</Slot>
          <Id>108</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;Subject&gt;&apos;s trap is triggered by &lt;triggering creature&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;Subject&gt;&apos;s trap is triggered by &lt;triggering creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnTrapTriggered</Slot>
          <Id>109</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is unlocked by &lt;unlocker&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is unlocked by &lt;unlocker&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnUnlock</Slot>
          <Id>110</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s user-defined event &lt;Event Number&gt; occurs</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s user-defined event &lt;Event Number&gt; occurs</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnUserDefined</Slot>
          <Id>111</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>encounter</Type>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s &lt;disturbed item&gt; is disturbed by &lt;last disturber&gt; with &lt;disturbance type&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s &lt;disturbed item&gt; is disturbed by &lt;last disturber&gt; with &lt;disturbance type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnInvDisturbed</Slot>
          <Id>112</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is used by &lt;last user&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is used by &lt;last user&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnUsed</Slot>
          <Id>113</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is clicked by &lt;clicking creature&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is clicked by &lt;clicking creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnClick</Slot>
          <Id>114</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; fails to open for &lt;last clicker&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; fails to open for &lt;last clicker&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnFailToOpen</Slot>
          <Id>115</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is entered by &lt;entering creature&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is entered by &lt;entering creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptOnEnter</Slot>
          <Id>116</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is exited by &lt;exiting creature&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is exited by &lt;exiting creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>ScriptOnExit</Slot>
          <Id>117</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is entered by &lt;entering creature&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is entered by &lt;entering creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnEntered</Slot>
          <Id>118</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>encounter</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is exited by &lt;exiting creature&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is exited by &lt;exiting creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnExit</Slot>
          <Id>119</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>encounter</Type>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is exhausted</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is exhausted</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnExhausted</Slot>
          <Id>120</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>encounter</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is ended</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is ended</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>EndConversation</Slot>
          <Id>121</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>dialogue</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is aborted</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is aborted</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>EndConverAbort</Slot>
          <Id>122</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>dialogue</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s heart beats</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s heart beats</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnHeartbeat</Slot>
          <Id>123</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; loads</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; loads</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnModLoad</Slot>
          <Id>124</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is entered by &lt;entering client&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is entered by &lt;entering client&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnClientEntr</Slot>
          <Id>125</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is exited by &lt;exiting client&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is exited by &lt;exiting client&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnClientLeav</Slot>
          <Id>126</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt;&apos;s user-defined event &lt;Event Number&gt; occurs</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt;&apos;s user-defined event &lt;Event Number&gt; occurs</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnUsrDefined</Slot>
          <Id>127</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;Player Character&gt; speaks &lt;Chat Message&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;Player Character&gt; speaks &lt;Chat Message&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnPlrChat</Slot>
          <Id>572</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;item loser&gt; loses &lt;item lost&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;item loser&gt; loses &lt;item lost&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnUnAqreItem</Slot>
          <Id>128</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;dead player&gt; is killed by &lt;last hostile actor&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;dead player&gt; is killed by &lt;last hostile actor&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnPlrDeath</Slot>
          <Id>129</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;dying player&gt;&apos;s health reaches zero</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;dying player&gt;&apos;s health reaches zero</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnPlrDying</Slot>
          <Id>130</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;levelling PC&gt; levels up</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;levelling PC&gt; levels up</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnPlrLvlUp</Slot>
          <Id>131</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;respawning player&gt; presses the respawn button</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;respawning player&gt; presses the respawn button</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnSpawnBtnDn</Slot>
          <Id>132</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;last PC rested&gt; rests &lt;rest type&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;last PC rested&gt; rests &lt;rest type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnPlrRest</Slot>
          <Id>133</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;cutscene aborter&gt; aborts a cutscene</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;cutscene aborter&gt; aborts a cutscene</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnCutsnAbort</Slot>
          <Id>134</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;activator&gt; activates &lt;activated item&gt; on &lt;activated item target&gt; at &lt;activated item target location&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;activator&gt; activates &lt;activated item&gt; on &lt;activated item target&gt; at &lt;activated item target location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnActvtItem</Slot>
          <Id>135</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;acquirer&gt; acquires &lt;acquired item&gt; with &lt;stack size&gt; from &lt;object item was acquired from&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;acquirer&gt; acquires &lt;acquired item&gt; with &lt;stack size&gt; from &lt;object item was acquired from&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnAcquirItem</Slot>
          <Id>136</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;equipper&gt; equips &lt;last item equipped&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;equipper&gt; equips &lt;last item equipped&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnPlrEqItm</Slot>
          <Id>137</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;unequipper&gt; unequips &lt;unequipped item&gt; from &lt;possessor&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;unequipper&gt; unequips &lt;unequipped item&gt; from &lt;possessor&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnPlrUnEqItm</Slot>
          <Id>138</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is entered by &lt;Entering Creature&gt;</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is entered by &lt;Entering Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>OnEnter</Slot>
          <Id>139</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; is reached</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; is reached</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Script</Slot>
          <Id>140</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>dialogue_line</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <FormatRef data="NONE" ref="children"/>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>In &lt;subject&gt;, when &lt;story point&gt; is enabled</Name>
      <Visible>true</Visible>
      <Labels/>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>In &lt;subject&gt;, when &lt;story point&gt; is enabled</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnUsrDefined</Slot>
          <Id>141</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>story point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if(GetUserDefinedEventNumber() != SE2_STORY_ENABLED_EVENT) {</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal>if(SCEZ_Struct_ArrayRemoveElement(GetModule(), STORY_POINTS_ENABLED_LIST, </Literal>
              <Scope data="argument" ref="story point">
                <Fragment data="name"/>
              </Scope>
              <Literal>)!= &quot;&quot;) {</Literal>
            </Line>
            <Indent>
              <FormatRef data="NONE" ref="children"/>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>When &lt;subject&gt; starts</Name>
      <Visible>false</Visible>
      <Labels>
        <Label>automatic</Label>
      </Labels>
      <Children>
        <StoryItemSequence>
          <Name>Story:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
        <StoryItemSequence>
          <Name>Always:</Name>
          <Visible>true</Visible>
          <Labels/>
          <Children/>
        </StoryItemSequence>
      </Children>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>When &lt;subject&gt; starts</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>subject</Subject>
          <Slot>Mod_OnClientEntr</Slot>
          <Id>434</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>subject</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>string name;</Literal>
            </Line>
            <Series data="storyPoints" unique="true">
              <Line>
                <Literal>name=</Literal>
                <Fragment data="formattedValue"/>
                <Literal>;</Literal>
              </Line>
              <Line>
                <Literal>SE2_Story_RegisterStoryPoint(GetFirstPC(), name, </Literal>
                <Fragment data="fanIn"/>
                <Literal>);</Literal>
              </Line>
              <Series data="parentNodes" unique="true">
                <Line>
                  <Literal>SE2_Story_RegisterStoryPointParent(</Literal>
                  <Literal>name, </Literal>
                  <Fragment data="formattedValue"/>
                  <Literal>, GetFirstPC());</Literal>
                </Line>
              </Series>
              <Series data="childrenNodes" unique="true">
                <Line>
                  <Literal>SE2_Story_RegisterStoryPointChild(</Literal>
                  <Literal>name, </Literal>
                  <Fragment data="formattedValue"/>
                  <Literal>, GetFirstPC());</Literal>
                </Line>
              </Series>
            </Series>
            <Line>
              <Literal>//enable the starting story point</Literal>
            </Line>
            <Line>
              <Literal>SE2_Story_SetState(GetFirstPC(), </Literal>
              <Scope data="start">
                <Fragment data="formattedValue"/>
              </Scope>
              <Literal>, STORY_POINT_STATE_ENABLED);</Literal>
            </Line>
            <Line>
              <FormatRef data="NONE" ref="children"/>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
  </Causes>
  <Effects>
    <ScriptIt>
      <Name>Subject &lt;Modify&gt;s &lt;Door&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject &lt;Modify&gt;s &lt;Door&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>144</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Modify</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door_action</Type>
              </Types>
              <Binding flavour="constant">
                <Type>door_action</Type>
                <Value>DOOR_ACTION_BASH</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>DoDoorAction(</Literal>
              <Scope data="argument" ref="Door">
                <Fragment data="name"/>
              </Scope>
              <Literal>,</Literal>
              <Scope data="argument" ref="Modify">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show &lt;Text&gt; above the PC</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show &lt;Text&gt; above the PC</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>145</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>FloatingTextStringOnCreature(</Literal>
              <Scope data="argument" ref="Text">
                <Fragment data="name"/>
              </Scope>
              <Literal>, GetFirstPC(), FALSE);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subject speaks &lt;Text&gt; at &lt;Volume&gt; volume</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject speaks &lt;Text&gt; at &lt;Volume&gt; volume</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>147</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Volume</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>talk_volume</Type>
              </Types>
              <Binding flavour="constant">
                <Type>talk_volume</Type>
                <Value>TALKVOLUME_TALK</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SpeakString(</Literal>
              <Scope data="argument" ref="Text">
                <Fragment data="name"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Volume">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subject attacks &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject attacks &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>148</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ActionAttack(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; faces &lt;Creature To Face&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; faces &lt;Creature To Face&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>149</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Creature To Face</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>vector vFacing = GetPosition(</Literal>
              <Scope data="argument" ref="Creature To Face">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name"/>
              </Scope>
              <Literal>, SetFacingPoint(vFacing));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Animate subject to &lt;Creature Animation&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Animate subject to &lt;Creature Animation&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>153</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature Animation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>timed_creature_animation</Type>
              </Types>
              <Binding flavour="constant">
                <Type>timed_creature_animation</Type>
                <Value>ANIMATION_FIREFORGET_GREETING</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>PlayAnimation(</Literal>
              <Scope data="argument" ref="Creature Animation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Animate &lt;Creature&gt; to &lt;Animation&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Animate &lt;Creature&gt; to &lt;Animation&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>154</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Animation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>timed_creature_animation</Type>
              </Types>
              <Binding flavour="constant">
                <Type>timed_creature_animation</Type>
                <Value>ANIMATION_FIREFORGET_GREETING</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, PlayAnimation(</Literal>
              <Scope data="argument" ref="Animation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Animate subject to &lt;Animation&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Animate subject to &lt;Animation&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>155</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Animation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>timed_creature_animation</Type>
              </Types>
              <Binding flavour="constant">
                <Type>timed_creature_animation</Type>
                <Value>ANIMATION_FIREFORGET_GREETING</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
              <Binding flavour="constant">
                <Type>float</Type>
                <Value>2.5</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>PlayAnimation(</Literal>
              <Scope data="argument" ref="Animation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, 1.0, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Animate &lt;Creature&gt; to &lt;Animation&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Animate &lt;Creature&gt; to &lt;Animation&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>156</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Animation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>timed_creature_animation</Type>
              </Types>
              <Binding flavour="constant">
                <Type>timed_creature_animation</Type>
                <Value>ANIMATION_FIREFORGET_GREETING</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
              <Binding flavour="constant">
                <Type>float</Type>
                <Value>2.5</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, PlayAnimation(</Literal>
              <Scope data="argument" ref="Animation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, 1.0, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Animate subject to &lt;Placeable Animation&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Animate subject to &lt;Placeable Animation&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>157</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Placeable Animation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable_animation</Type>
              </Types>
              <Binding flavour="constant">
                <Type>placeable_animation</Type>
                <Value>ANIMATION_PLACEABLE_OPEN</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>PlayAnimation(</Literal>
              <Scope data="argument" ref="Placeable Animation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Animate &lt;Placeable&gt; to &lt;Animation&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Animate &lt;Placeable&gt; to &lt;Animation&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>158</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Placeable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Animation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable_animation</Type>
              </Types>
              <Binding flavour="constant">
                <Type>placeable_animation</Type>
                <Value>ANIMATION_PLACEABLE_OPEN</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Placeable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, PlayAnimation(</Literal>
              <Scope data="argument" ref="Animation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Play &lt;Sound&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Play &lt;Sound&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>161</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Sound</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>sound</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SoundObjectPlay(</Literal>
              <Scope data="argument" ref="Sound">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Area&gt;&apos;s day background music to &lt;Music Track&gt; music</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Area&gt;&apos;s day background music to &lt;Music Track&gt; music</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>162</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Music Track</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>music_track</Type>
              </Types>
              <Binding flavour="constant">
                <Type>music_track</Type>
                <Value>TRACK_DUNGEON1</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>MusicBackgroundStop(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>MusicBackgroundChangeDay(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Music Track">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Area&gt;&apos;s night background music to &lt;Music Track&gt; music</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Area&gt;&apos;s night background music to &lt;Music Track&gt; music</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>163</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Music Track</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>music_track</Type>
              </Types>
              <Binding flavour="constant">
                <Type>music_track</Type>
                <Value>TRACK_DUNGEON1</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>MusicBackgroundStop(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>MusicBackgroundChangeNight(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Music Track">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Area&gt;&apos;s battle music to &lt;Music Track&gt; music</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Area&gt;&apos;s battle music to &lt;Music Track&gt; music</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>164</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Music Track</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>music_track</Type>
              </Types>
              <Binding flavour="constant">
                <Type>music_track</Type>
                <Value>TRACK_DUNGEON1</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>MusicBattleChange(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Music Track">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Play &lt;Area&gt;&apos;s battle music</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Play &lt;Area&gt;&apos;s battle music</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>165</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>MusicBattlePlay(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Stop &lt;Area&gt;&apos;s battle music</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Stop &lt;Area&gt;&apos;s battle music</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>166</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>MusicBattleStop(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Caster&gt; casts a fake &lt;Spell&gt; at &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Caster&gt; casts a fake &lt;Spell&gt; at &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>170</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Caster">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCastFakeSpellAtObject(</Literal>
              <Scope data="argument" ref="Spell">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Caster&gt; casts a fake &lt;Spell&gt; at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Caster&gt; casts a fake &lt;Spell&gt; at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>171</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Caster">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCastFakeSpellAtLocation(</Literal>
              <Scope data="argument" ref="Spell">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Caster&gt; casts a known &lt;Spell&gt; at &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Caster&gt; casts a known &lt;Spell&gt; at &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>172</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Caster">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCastSpellAtObject(</Literal>
              <Scope data="argument" ref="Spell">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Caster&gt; casts a known &lt;Spell&gt; at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Caster&gt; casts a known &lt;Spell&gt; at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>173</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Caster">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCastSpellAtLocation(</Literal>
              <Scope data="argument" ref="Spell">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Caster&gt; force casts &lt;Spell&gt; at &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Caster&gt; force casts &lt;Spell&gt; at &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>174</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Caster">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCastSpellAtObject(</Literal>
              <Scope data="argument" ref="Spell">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, METAMAGIC_ANY, TRUE));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Caster&gt; force casts &lt;Spell&gt; at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Caster&gt; force casts &lt;Spell&gt; at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>175</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Caster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Caster">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCastSpellAtLocation(</Literal>
              <Scope data="argument" ref="Spell">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, METAMAGIC_ANY, TRUE));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Decrement &lt;Target&gt;&apos;s remaining uses per day of &lt;Feat&gt; by one</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Decrement &lt;Target&gt;&apos;s remaining uses per day of &lt;Feat&gt; by one</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>176</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Feat</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>feat</Type>
              </Types>
              <Binding flavour="constant">
                <Type>feat</Type>
                <Value>FEAT_DIVINE_HEALTH</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>DecrementRemainingFeatUses(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Feat">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subtract &lt;Levels&gt; levels from &lt;Target&gt; for &lt;Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subtract &lt;Levels&gt; levels from &lt;Target&gt; for &lt;Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>177</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Levels</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectNegativeLevel(FloatToInt(</Literal>
              <Scope data="argument" ref="Levels">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)), </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Remove &lt;Effect&gt; from &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Remove &lt;Effect&gt; from &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>178</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>effect_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>effect_type</Type>
                <Value>EFFECT_TYPE_INVISIBILITY</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>nw_i0_spells</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>RemoveSpecificEffect(</Literal>
              <Scope data="argument" ref="Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Remover&gt; removes &lt;Effect&gt; from &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Remover&gt; removes &lt;Effect&gt; from &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>179</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Remover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>effect_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>effect_type</Type>
                <Value>EFFECT_TYPE_INVISIBILITY</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>nw_i0_spells</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Remover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(RemoveSpecificEffect(</Literal>
              <Scope data="argument" ref="Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Feat User&gt; uses &lt;Feat&gt; on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Feat User&gt; uses &lt;Feat&gt; on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>180</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Feat User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Feat</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>feat</Type>
              </Types>
              <Binding flavour="constant">
                <Type>feat</Type>
                <Value>FEAT_DIVINE_HEALTH</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Feat User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionUseFeat(</Literal>
              <Scope data="argument" ref="Feat">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Skill User&gt; uses &lt;Skill&gt; on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Skill User&gt; uses &lt;Skill&gt; on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>181</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Skill User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Skill</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>skill</Type>
              </Types>
              <Binding flavour="constant">
                <Type>skill</Type>
                <Value>SKILL_TAUNT</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Skill User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionUseSkill(</Literal>
              <Scope data="argument" ref="Skill">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show &lt;Text&gt; in the chat window</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show &lt;Text&gt; in the chat window</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>183</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SendMessageToPC(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Text">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Speaker&gt; speaks &lt;Text&gt; at &lt;Volume&gt; volume</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Speaker&gt; speaks &lt;Text&gt; at &lt;Volume&gt; volume</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>184</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Speaker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Volume</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>talk_volume</Type>
              </Types>
              <Binding flavour="constant">
                <Type>talk_volume</Type>
                <Value>TALKVOLUME_TALK</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Speaker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, SpeakString(</Literal>
              <Scope data="argument" ref="Text">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Volume">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Number&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Number&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>186</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalInt(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Number">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Decrease &lt;Target&gt;&apos;s &lt;Ability&gt; by &lt;Ability Decrease&gt; for &lt;Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Decrease &lt;Target&gt;&apos;s &lt;Ability&gt; by &lt;Ability Decrease&gt; for &lt;Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>187</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Ability Decrease</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Ability</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>ability</Type>
              </Types>
              <Binding flavour="constant">
                <Type>ability</Type>
                <Value>ABILITY_INTELLIGENCE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectAbilityDecrease(FloatToInt(</Literal>
              <Scope data="argument" ref="Ability Decrease">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Ability">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Increase &lt;Target&gt;&apos;s &lt;Ability&gt; by &lt;Ability Increase&gt; for &lt;Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Increase &lt;Target&gt;&apos;s &lt;Ability&gt; by &lt;Ability Increase&gt; for &lt;Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>188</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Ability Increase</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Ability</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>ability</Type>
              </Types>
              <Binding flavour="constant">
                <Type>ability</Type>
                <Value>ABILITY_INTELLIGENCE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectAbilityIncrease(FloatToInt(</Literal>
              <Scope data="argument" ref="Ability Increase">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Ability">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Decrease &lt;Target&gt;&apos;s armor class by &lt;AC Decrease&gt; for &lt;Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Decrease &lt;Target&gt;&apos;s armor class by &lt;AC Decrease&gt; for &lt;Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>189</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>AC Decrease</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectACDecrease(FloatToInt(</Literal>
              <Scope data="argument" ref="AC Decrease">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)), </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Increase &lt;Target&gt;&apos;s armor class by &lt;AC Increase&gt; for &lt;Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Increase &lt;Target&gt;&apos;s armor class by &lt;AC Increase&gt; for &lt;Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>190</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>AC Increase</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectACIncrease(FloatToInt(</Literal>
              <Scope data="argument" ref="AC Increase">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)), </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Advancer&gt; advances the game&apos;s time to beginning of the next hour</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Advancer&gt; advances the game&apos;s time to beginning of the next hour</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>191</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Advancer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nHour = GetTimeHour();</Literal>
            </Line>
            <Line>
              <Literal>int nMinute = 0;</Literal>
            </Line>
            <Line>
              <Literal>int nSecond = 0;</Literal>
            </Line>
            <Line>
              <Literal>int nMillisecond = 0;</Literal>
            </Line>
            <Line>
              <Literal>nHour += 1;</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Advancer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetTime(nHour, nMinute, nSecond, nMillisecond)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Advance the game&apos;s time by &lt;The Hours&gt; hours</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Advance the game&apos;s time by &lt;The Hours&gt; hours</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>192</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Hours</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nHour = GetTimeHour();</Literal>
            </Line>
            <Line>
              <Literal>int nMinute = 0;</Literal>
            </Line>
            <Line>
              <Literal>int nSecond = 0;</Literal>
            </Line>
            <Line>
              <Literal>int nMillisecond = 0;</Literal>
            </Line>
            <Line>
              <Literal>nHour += FloatToInt(</Literal>
              <Scope data="argument" ref="The Hours">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>SetTime(nHour, nMinute, nSecond, nMillisecond);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Advancer&gt; advances the game&apos;s time by &lt;The Hours&gt; hours</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Advancer&gt; advances the game&apos;s time by &lt;The Hours&gt; hours</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>193</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Advancer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Hours</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nHour = GetTimeHour();</Literal>
            </Line>
            <Line>
              <Literal>int nMinute = 0;</Literal>
            </Line>
            <Line>
              <Literal>int nSecond = 0;</Literal>
            </Line>
            <Line>
              <Literal>int nMillisecond = 0;</Literal>
            </Line>
            <Line>
              <Literal>nHour += FloatToInt(</Literal>
              <Scope data="argument" ref="The Hours">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Advancer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetTime(nHour, nMinute, nSecond, nMillisecond)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Advance time by &lt;The Hours&gt; hours, &lt;The Minutes&gt; minutes, &lt;The Seconds&gt; seconds and &lt;The Milliseconds&gt; milliseconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Advance time by &lt;The Hours&gt; hours, &lt;The Minutes&gt; minutes, &lt;The Seconds&gt; seconds and &lt;The Milliseconds&gt; milliseconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>194</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Hours</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Minutes</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Seconds</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Milliseconds</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nHour = GetTimeHour();</Literal>
            </Line>
            <Line>
              <Literal>int nMinute = GetTimeMinute();</Literal>
            </Line>
            <Line>
              <Literal>int nSecond = GetTimeSecond();</Literal>
            </Line>
            <Line>
              <Literal>int nMillisecond = GetTimeMillisecond();</Literal>
            </Line>
            <Line>
              <Literal>nHour += FloatToInt(</Literal>
              <Scope data="argument" ref="The Hours">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>nMinute += FloatToInt(</Literal>
              <Scope data="argument" ref="The Minutes">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>nSecond += FloatToInt(</Literal>
              <Scope data="argument" ref="The Seconds">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>nMillisecond += FloatToInt(</Literal>
              <Scope data="argument" ref="The Milliseconds">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>SetTime(nHour, nMinute, nSecond, nMillisecond);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Advancer&gt; advances time by &lt;The Hours&gt; hours, &lt;The Minutes&gt; minutes, &lt;The Seconds&gt; seconds and &lt;The Milliseconds&gt; milliseconds </Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Advancer&gt; advances time by &lt;The Hours&gt; hours, &lt;The Minutes&gt; minutes, &lt;The Seconds&gt; seconds and &lt;The Milliseconds&gt; milliseconds </Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>195</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Advancer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Hours</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Minutes</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Seconds</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Milliseconds</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nHour = GetTimeHour();</Literal>
            </Line>
            <Line>
              <Literal>int nMinute = GetTimeMinute();</Literal>
            </Line>
            <Line>
              <Literal>int nSecond = GetTimeSecond();</Literal>
            </Line>
            <Line>
              <Literal>int nMillisecond = GetTimeMillisecond();</Literal>
            </Line>
            <Line>
              <Literal>nHour += FloatToInt(</Literal>
              <Scope data="argument" ref="The Hours">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>nMinute += FloatToInt(</Literal>
              <Scope data="argument" ref="The Minutes">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>nSecond += FloatToInt(</Literal>
              <Scope data="argument" ref="The Seconds">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>nMillisecond += FloatToInt(</Literal>
              <Scope data="argument" ref="The Milliseconds">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Advancer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetTime(nHour, nMinute, nSecond, nMillisecond)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the game&apos;s date to year &lt;Year&gt;, month &lt;Month&gt; and day &lt;Day&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the game&apos;s date to year &lt;Year&gt;, month &lt;Month&gt; and day &lt;Day&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>196</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Year</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Month</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Day</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCalendar(FloatToInt(</Literal>
              <Scope data="argument" ref="Year">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), FloatToInt(</Literal>
              <Scope data="argument" ref="Month">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), FloatToInt(</Literal>
              <Scope data="argument" ref="Day">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Real Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Real Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>198</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Real Value</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalFloat(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Real Value">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Number&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Number&gt; to the global variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>199</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalFloat(GetModule(), </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Number">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Text Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Text Value&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>200</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Text Value</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalString(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Text Value">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Text Value&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Text Value&gt; to the global variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>201</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Text Value</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalString(GetModule(), </Literal>
              <Scope data="argument" ref="Text Value">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Object&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Object&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>205</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalObject(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Object&gt; to the global variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Object&gt; to the global variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>206</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>store</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalObject(GetModule(), </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Combat Effect&gt; combat visual effect on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Combat Effect&gt; combat visual effect on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>207</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Combat Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_combat</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_combat</Type>
                <Value>VFX_COM_BLOOD_REG_RED</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Combat Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Combat Effect&gt; combat visual effect at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Combat Effect&gt; combat visual effect at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>209</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Combat Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_combat</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_combat</Type>
                <Value>VFX_COM_BLOOD_REG_RED</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Combat Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Fired Effect&gt; fired visual effect on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Fired Effect&gt; fired visual effect on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>210</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Fired Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_effect</Type>
                <Value>VFX_FNF_METEOR_SWARM</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Fired Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Fired Effect&gt; fired visual effect at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Fired Effect&gt; fired visual effect at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>212</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Fired Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_effect</Type>
                <Value>VFX_FNF_METEOR_SWARM</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Fired Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Shower&gt; shows &lt;Fired Effect&gt; fired visual effect on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Shower&gt; shows &lt;Fired Effect&gt; fired visual effect on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>213</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Shower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Fired Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_effect</Type>
                <Value>VFX_FNF_METEOR_SWARM</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location loc = GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Fired Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, loc)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Shower&gt; shows &lt;Fired Effect&gt; fired visual effect at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Shower&gt; shows &lt;Fired Effect&gt; fired visual effect at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>214</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Shower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Fired Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_effect</Type>
                <Value>VFX_FNF_METEOR_SWARM</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Fired Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Impact Effect&gt; impact visual effect on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Impact Effect&gt; impact visual effect on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>215</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Impact Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_impact</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_impact</Type>
                <Value>VFX_IMP_FLAME_M</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Impact Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Impact Effect&gt; impact visual effect on &lt;Creature&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Impact Effect&gt; impact visual effect on &lt;Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>216</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Impact Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_impact</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_impact</Type>
                <Value>VFX_IMP_FLAME_M</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Impact Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Impact Effect&gt; impact visual effect at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Impact Effect&gt; impact visual effect at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>217</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Impact Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_impact</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_impact</Type>
                <Value>VFX_IMP_FLAME_M</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Impact Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Shower&gt; shows &lt;Impact Effect&gt; impact visual effect on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Shower&gt; shows &lt;Impact Effect&gt; impact visual effect on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>218</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Shower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Impact Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_impact</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_impact</Type>
                <Value>VFX_IMP_FLAME_M</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Impact Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand( ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>))));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Shower&gt; shows &lt;Impact Effect&gt; impact visual effect at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Shower&gt; shows &lt;Impact Effect&gt; impact visual effect at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>219</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Shower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Impact Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_impact</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_impact</Type>
                <Value>VFX_IMP_FLAME_M</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Impact Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectAtLocation(DURATION_TYPE_INSTANT, veffect, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>220</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Beam Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_beam</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_beam</Type>
                <Value>VFX_BEAM_LIGHTNING</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Source</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect beam = EffectBeam(</Literal>
              <Scope data="argument" ref="Beam Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Source">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, BODY_NODE_CHEST);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, beam, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Beam Effect&gt; beam visual effect between &lt;Source&gt; and &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>222</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Beam Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>visual_effect_beam</Type>
              </Types>
              <Binding flavour="constant">
                <Type>visual_effect_beam</Type>
                <Value>VFX_BEAM_LIGHTNING</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Source</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect beam = EffectBeam(</Literal>
              <Scope data="argument" ref="Beam Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Source">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, BODY_NODE_CHEST);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, beam, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Shower&gt; shows permanent death effect on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Shower&gt; shows permanent death effect on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>224</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Shower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectDeath();</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetIsDestroyable(FALSE)));</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_INSTANT, veffect, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Shower&gt; shows permanent knock down effect on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Shower&gt; shows permanent knock down effect on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>225</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Shower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect eKnockdown = EffectKnockdown();</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, eKnockdown, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Shower&gt; shows temporary knock down effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Shower&gt; shows temporary knock down effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>226</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Shower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect eKnockdown = EffectKnockdown();</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Shower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, eKnockdown, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Spell Effect&gt; spell visual effect on &lt;Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Spell Effect&gt; spell visual effect on &lt;Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>227</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Spell Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell_visual_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell_visual_effect</Type>
                <Value>VFX_DUR_LIGHT_RED_5</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Spell Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_PERMANENT, veffect, GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Spell Effect&gt; spell visual effect at &lt;Location&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Spell Effect&gt; spell visual effect at &lt;Location&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>228</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Spell Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell_visual_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell_visual_effect</Type>
                <Value>VFX_DUR_LIGHT_RED_5</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Spell Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_PERMANENT, veffect, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Spell Effect&gt; spell visual effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Spell Effect&gt; spell visual effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>229</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Spell Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell_visual_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell_visual_effect</Type>
                <Value>VFX_DUR_LIGHT_RED_5</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Spell Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_TEMPORARY, veffect, GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Spell Effect&gt; spell visual effect at &lt;Location&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Spell Effect&gt; spell visual effect at &lt;Location&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>231</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Spell Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell_visual_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell_visual_effect</Type>
                <Value>VFX_DUR_LIGHT_RED_5</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Spell Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectAtLocation(DURATION_TYPE_TEMPORARY, veffect, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Show the &lt;Area of Effect&gt; area of effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Show the &lt;Area of Effect&gt; area of effect on &lt;Target&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>232</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area of Effect</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area_of_effect</Type>
              </Types>
              <Binding flavour="constant">
                <Type>area_of_effect</Type>
                <Value>AOE_PER_STORM</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect veffect = EffectVisualEffect(</Literal>
              <Scope data="argument" ref="Area of Effect">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, veffect, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Turn &lt;Placeable&gt;&apos;s faction against the Player Character that opened or destroyed it</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Turn &lt;Placeable&gt;&apos;s faction against the Player Character that opened or destroyed it</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>233</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Placeable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>nw_o2_coninclude</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Placeable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ShoutDisturbed());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; &lt;Placeable Action&gt;s &lt;Placeable&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; &lt;Placeable Action&gt;s &lt;Placeable&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>234</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Placeable Action</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable_action</Type>
              </Types>
              <Binding flavour="constant">
                <Type>placeable_action</Type>
                <Value>PLACEABLE_ACTION_USE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Placeable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(DoPlaceableObjectAction(</Literal>
              <Scope data="argument" ref="Placeable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Placeable Action">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Save original facing of &lt;Actor&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Save original facing of &lt;Actor&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>238</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Actor</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>i_se_aux</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>float originalFacing = GetFacing(</Literal>
              <Scope data="argument" ref="Actor">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>SetLocalFloat(</Literal>
              <Scope data="argument" ref="Actor">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, &quot;SE_AUX_ORIGINAL_FACING&quot;, originalFacing);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subject turns &lt;Degrees&gt; degrees counterclockwise from East</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject turns &lt;Degrees&gt; degrees counterclockwise from East</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>240</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Degrees</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetFacing(</Literal>
              <Scope data="argument" ref="Degrees">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Facer&gt; turns &lt;Degrees&gt; degrees counterclockwise from East</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Facer&gt; turns &lt;Degrees&gt; degrees counterclockwise from East</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>241</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Facer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Degrees</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Facer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, SetFacing(</Literal>
              <Scope data="argument" ref="Degrees">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subject faces &lt;Object To Face&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject faces &lt;Object To Face&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>242</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Facing Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object To Face</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>vector vFacing = GetPosition(</Literal>
              <Scope data="argument" ref="Object To Face">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>SetFacingPoint(vFacing);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Facing Creature&gt; faces &lt;Object To Face&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Facing Creature&gt; faces &lt;Object To Face&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>243</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Facing Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object To Face</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>vector vFacing = GetPosition(</Literal>
              <Scope data="argument" ref="Object To Face">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Facing Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, SetFacingPoint(vFacing));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; metres in direction &lt;Degrees&gt; degrees counterclockwise from East</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; metres in direction &lt;Degrees&gt; degrees counterclockwise from East</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>244</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Jumper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Degrees</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location jumperLocation = GetLocation(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>object area = GetAreaFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>vector jumperPosition = GetPositionFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>vector targetPosition = </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>*AngleToVector(</Literal>
              <Scope data="argument" ref="Degrees">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>) + jumperPosition;</Literal>
            </Line>
            <Line>
              <Literal>location targetLocation = Location(area, targetPosition, </Literal>
              <Scope data="argument" ref="Degrees">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, JumpToLocation(targetLocation));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subject jumps to &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject jumps to &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>246</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>JumpToObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Jumper&gt; jumps to &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Jumper&gt; jumps to &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>247</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Jumper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, JumpToObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subject jumps to &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject jumps to &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>248</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>JumpToLocation(</Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Jumper&gt; jumps to &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Jumper&gt; jumps to &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>249</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Jumper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, JumpToLocation(</Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; metres towards &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; metres towards &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>250</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Jumper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location jumperLocation;</Literal>
            </Line>
            <Line>
              <Literal>vector jumperPosition;</Literal>
            </Line>
            <Line>
              <Literal>float jumperFacing;</Literal>
            </Line>
            <Line>
              <Literal>object jumperArea;</Literal>
            </Line>
            <Line>
              <Literal>vector targetPosition;</Literal>
            </Line>
            <Line>
              <Literal>vector heading;</Literal>
            </Line>
            <Line>
              <Literal>jumperLocation = GetLocation(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>jumperPosition = GetPositionFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>jumperArea = GetAreaFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>jumperFacing = GetFacingFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>targetPosition = GetPositionFromLocation(</Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>heading = Vector(targetPosition.x - jumperPosition.x, targetPosition.y -   jumperPosition.y, targetPosition.z - jumperPosition.z);</Literal>
            </Line>
            <Line>
              <Literal>  heading = VectorNormalize(heading);</Literal>
            </Line>
            <Line>
              <Literal>jumperPosition = jumperPosition + </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>*heading;</Literal>
            </Line>
            <Line>
              <Literal>jumperLocation = Location(jumperArea, jumperPosition, jumperFacing);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, JumpToLocation(jumperLocation));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; metres towards &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Jumper&gt; jumps &lt;Distance&gt; metres towards &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>252</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Jumper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location jumperLocation;</Literal>
            </Line>
            <Line>
              <Literal>vector jumperPosition;</Literal>
            </Line>
            <Line>
              <Literal>float jumperFacing;</Literal>
            </Line>
            <Line>
              <Literal>object jumperArea;</Literal>
            </Line>
            <Line>
              <Literal>vector targetPosition;</Literal>
            </Line>
            <Line>
              <Literal>vector heading;</Literal>
            </Line>
            <Line>
              <Literal>jumperLocation = GetLocation(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>jumperPosition = GetPositionFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>jumperArea = GetAreaFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>jumperFacing = GetFacingFromLocation(jumperLocation);</Literal>
            </Line>
            <Line>
              <Literal>targetPosition = GetPosition(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>heading = Vector(targetPosition.x - jumperPosition.x, targetPosition.y -   jumperPosition.y, targetPosition.z - jumperPosition.z);</Literal>
            </Line>
            <Line>
              <Literal>heading = VectorNormalize(heading);</Literal>
            </Line>
            <Line>
              <Literal>jumperPosition = jumperPosition + </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>*heading;</Literal>
            </Line>
            <Line>
              <Literal>jumperLocation = Location(jumperArea, jumperPosition, jumperFacing);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Jumper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, JumpToLocation(jumperLocation));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Walker&gt; walks randomly</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Walker&gt; walks randomly</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>254</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Walker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Walker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionRandomWalk());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Walker&gt; walks its waypoints</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Walker&gt; walks its waypoints</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>255</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Walker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>x0_i0_walkway</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Walker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, WalkWayPoints());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Fleeing Creature&gt; &lt;walk&gt;s &lt;Range&gt; metres away from &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Fleeing Creature&gt; &lt;walk&gt;s &lt;Range&gt; metres away from &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>257</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Fleeing Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Range</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Fleeing Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionMoveAwayFromLocation(</Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Range">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Fleeing Creature&gt; &lt;walk&gt;s &lt;Range&gt; metres away from &lt;Repeller&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Fleeing Creature&gt; &lt;walk&gt;s &lt;Range&gt; metres away from &lt;Repeller&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>258</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Fleeing Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Range</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Repeller</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Fleeing Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionMoveAwayFromObject(</Literal>
              <Scope data="argument" ref="Repeller">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Range">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt;&lt;walk&gt;s to &lt;Location&gt; for &lt;Timeout&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt;&lt;walk&gt;s to &lt;Location&gt; for &lt;Timeout&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>259</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Timeout</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionForceMoveToLocation(</Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Timeout">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt;&lt;walk&gt;s to &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt;&lt;walk&gt;s to &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>260</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionMoveToLocation(</Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt; &lt;walk&gt;s within &lt;Distance&gt; metres of &lt;Target&gt; for &lt;Timeout&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt; &lt;walk&gt;s within &lt;Distance&gt; metres of &lt;Target&gt; for &lt;Timeout&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>261</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Timeout</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionForceMoveToObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Timeout">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt; &lt;walk&gt;s within &lt;Distance&gt; metres of &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt; &lt;walk&gt;s within &lt;Distance&gt; metres of &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>262</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionMoveToObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt; &lt;walk&gt;s to &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt; &lt;walk&gt;s to &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>263</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionMoveToObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt; &lt;walk&gt;s randomly within &lt;Distance&gt; metres of &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt; &lt;walk&gt;s randomly within &lt;Distance&gt; metres of &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>264</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location aLocation = </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>float rawDistance = </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>int randomDistance = Random(FloatToInt(rawDistance));</Literal>
            </Line>
            <Line>
              <Literal>float distance = IntToFloat(randomDistance) + (rawDistance - FloatToInt(rawDistance));</Literal>
            </Line>
            <Line>
              <Literal>vector aPosition = GetPositionFromLocation(aLocation);</Literal>
            </Line>
            <Line>
              <Literal>object area = GetAreaFromLocation(aLocation);</Literal>
            </Line>
            <Line>
              <Literal>float facing = IntToFloat(Random(361));</Literal>
            </Line>
            <Line>
              <Literal>vector facingVector = VectorNormalize(AngleToVector(facing));</Literal>
            </Line>
            <Line>
              <Literal>aPosition = aPosition + facingVector*distance;</Literal>
            </Line>
            <Line>
              <Literal>location newLocation = Location(area, aPosition, facing);</Literal>
            </Line>
            <Line>
              <Literal>SetFacingPoint(GetPositionFromLocation(newLocation));</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ActionMoveToLocation(newLocation, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt; &lt;walk&gt;s randomly within &lt;Distance&gt; metres of &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt; &lt;walk&gt;s randomly within &lt;Distance&gt; metres of &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>265</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location aLocation = GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>float rawDistance = </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>int randomDistance = Random(FloatToInt(rawDistance));</Literal>
            </Line>
            <Line>
              <Literal>float distance = IntToFloat(randomDistance) + (rawDistance - FloatToInt(rawDistance));</Literal>
            </Line>
            <Line>
              <Literal>vector aPosition = GetPositionFromLocation(aLocation);</Literal>
            </Line>
            <Line>
              <Literal>object area = GetAreaFromLocation(aLocation);</Literal>
            </Line>
            <Line>
              <Literal>float facing = IntToFloat(Random(361));</Literal>
            </Line>
            <Line>
              <Literal>vector facingVector = VectorNormalize(AngleToVector(facing));</Literal>
            </Line>
            <Line>
              <Literal>aPosition = aPosition + facingVector*distance;</Literal>
            </Line>
            <Line>
              <Literal>location newLocation = Location(area, aPosition, facing);</Literal>
            </Line>
            <Line>
              <Literal>SetFacingPoint(GetPositionFromLocation(newLocation));</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ActionMoveToLocation(newLocation, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt; &lt;walk&gt;s &lt;Distance&gt; metres towards &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt; &lt;walk&gt;s &lt;Distance&gt; metres towards &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>266</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location moverLocation;</Literal>
            </Line>
            <Line>
              <Literal>vector moverPosition;</Literal>
            </Line>
            <Line>
              <Literal>float moverFacing;</Literal>
            </Line>
            <Line>
              <Literal>object moverArea;</Literal>
            </Line>
            <Line>
              <Literal>vector targetPosition;</Literal>
            </Line>
            <Line>
              <Literal>vector heading;</Literal>
            </Line>
            <Line>
              <Literal>moverLocation = GetLocation(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>moverPosition = GetPositionFromLocation(moverLocation);</Literal>
            </Line>
            <Line>
              <Literal>moverArea = GetAreaFromLocation(moverLocation);</Literal>
            </Line>
            <Line>
              <Literal>moverFacing = GetFacingFromLocation(moverLocation);</Literal>
            </Line>
            <Line>
              <Literal>targetPosition = GetPositionFromLocation(</Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>heading = Vector(targetPosition.x - moverPosition.x, targetPosition.y -   moverPosition.y, targetPosition.z - moverPosition.z);</Literal>
            </Line>
            <Line>
              <Literal>heading = VectorNormalize(heading);</Literal>
            </Line>
            <Line>
              <Literal>moverPosition = moverPosition + </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>*heading;</Literal>
            </Line>
            <Line>
              <Literal>moverLocation = Location(moverArea, moverPosition, moverFacing);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionMoveToLocation(moverLocation));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Mover&gt; &lt;walk&gt;s &lt;Distance&gt; metres towards &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Mover&gt; &lt;walk&gt;s &lt;Distance&gt; metres towards &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>267</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Mover</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>walk</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>walk_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>walk_speed</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>location moverLocation;</Literal>
            </Line>
            <Line>
              <Literal>vector moverPosition;</Literal>
            </Line>
            <Line>
              <Literal>float moverFacing;</Literal>
            </Line>
            <Line>
              <Literal>object moverArea;</Literal>
            </Line>
            <Line>
              <Literal>vector targetPosition;</Literal>
            </Line>
            <Line>
              <Literal>vector heading;</Literal>
            </Line>
            <Line>
              <Literal>moverLocation = GetLocation(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>moverPosition = GetPositionFromLocation(moverLocation);</Literal>
            </Line>
            <Line>
              <Literal>moverArea = GetAreaFromLocation(moverLocation);</Literal>
            </Line>
            <Line>
              <Literal>moverFacing = GetFacingFromLocation(moverLocation);</Literal>
            </Line>
            <Line>
              <Literal>targetPosition = GetPositionFromLocation(GetLocation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>heading = Vector(targetPosition.x - moverPosition.x, targetPosition.y -   moverPosition.y, targetPosition.z - moverPosition.z);</Literal>
            </Line>
            <Line>
              <Literal>heading = VectorNormalize(heading);</Literal>
            </Line>
            <Line>
              <Literal>moverPosition = moverPosition + </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>*heading;</Literal>
            </Line>
            <Line>
              <Literal>moverLocation = Location(moverArea, moverPosition, moverFacing);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Mover">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionMoveToLocation(moverLocation, </Literal>
              <Scope data="argument" ref="walk">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Shift &lt;Creature&gt;&apos;s alignment towards &lt;Alignment Type&gt; by &lt;Alignment Shift&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Shift &lt;Creature&gt;&apos;s alignment towards &lt;Alignment Type&gt; by &lt;Alignment Shift&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>268</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Alignment Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>alignment</Type>
              </Types>
              <Binding flavour="constant">
                <Type>alignment</Type>
                <Value>ALIGNMENT_EVIL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Alignment Shift</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AdjustAlignment(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Alignment Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Alignment Shift">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Adjuster&gt; shifts &lt;Creature&gt;&apos;s alignment towards &lt;Alignment Type&gt; by &lt;Alignment Shift&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Adjuster&gt; shifts &lt;Creature&gt;&apos;s alignment towards &lt;Alignment Type&gt; by &lt;Alignment Shift&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>269</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Adjuster</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Alignment Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>alignment</Type>
              </Types>
              <Binding flavour="constant">
                <Type>alignment</Type>
                <Value>ALIGNMENT_EVIL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Alignment Shift</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Adjuster">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(AdjustAlignment(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Alignment Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Alignment Shift">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>))));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Clear all actions of &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Clear all actions of &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>271</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ClearAllActions(TRUE));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Interactor&gt; interacts with &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Interactor&gt; interacts with &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>272</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Interactor</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Interactor">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionInteractObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Resurrect the Player Character</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Resurrect the Player Character</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>275</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>object oPlayer = GetFirstPC();</Literal>
            </Line>
            <Line>
              <Literal>effect eVisual = EffectVisualEffect(VFX_IMP_RESTORATION);</Literal>
            </Line>
            <Line>
              <Literal>effect eBad = GetFirstEffect(oPlayer);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT,EffectResurrection(),oPlayer);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT,EffectHeal(GetMaxHitPoints(oPlayer)), oPlayer);</Literal>
            </Line>
            <Line>
              <Literal>while(GetIsEffectValid(eBad)){</Literal>
            </Line>
            <Line>
              <Literal>if (GetEffectType(eBad) == EFFECT_TYPE_ABILITY_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>        	GetEffectType(eBad) == EFFECT_TYPE_AC_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_ATTACK_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_DAMAGE_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_DAMAGE_IMMUNITY_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_SAVING_THROW_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_SPELL_RESISTANCE_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_SKILL_DECREASE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_BLINDNESS ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_DEAF ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_PARALYZE ||</Literal>
            </Line>
            <Line>
              <Literal>                GetEffectType(eBad) == EFFECT_TYPE_NEGATIVELEVEL)</Literal>
            </Line>
            <Line>
              <Literal>   {</Literal>
            </Line>
            <Line>
              <Literal>                    //Remove effect if it is negative.</Literal>
            </Line>
            <Line>
              <Literal>                    RemoveEffect(oPlayer, eBad);</Literal>
            </Line>
            <Line>
              <Literal>        }</Literal>
            </Line>
            <Line>
              <Literal>		eBad = GetNextEffect(oPlayer);</Literal>
            </Line>
            <Line>
              <Literal>SignalEvent(oPlayer, EventSpellCastAt(OBJECT_SELF, SPELL_RESTORATION, FALSE));</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, eVisual, oPlayer);
		</Literal>
            </Line>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Decrease &lt;Target&gt;&apos;s immunity to &lt;Damage Type&gt; by &lt;Amount&gt;%</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Decrease &lt;Target&gt;&apos;s immunity to &lt;Damage Type&gt; by &lt;Amount&gt;%</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>276</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Damage Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>damage_type</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect eImmunity = EffectDamageImmunityDecrease(</Literal>
              <Scope data="argument" ref="Damage Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, eImmunity, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; rests</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; rests</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>277</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionRest());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Reveal &lt;Area&gt; for &lt;Player&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Reveal &lt;Area&gt; for &lt;Player&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>278</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Player</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ExploreAreaForPlayer(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Player">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Reveal the map of &lt;Area&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Reveal the map of &lt;Area&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>279</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ExploreAreaForPlayer(</Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, GetFirstPC());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Allow&gt; subject to recieve commands</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Allow&gt; subject to recieve commands</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>280</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Allow</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>allow</Type>
              </Types>
              <Binding flavour="constant">
                <Type>allow</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCommandable(</Literal>
              <Scope data="argument" ref="Allow">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; sits on &lt;Placeable&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; sits on &lt;Placeable&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>282</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Placeable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionSit(</Literal>
              <Scope data="argument" ref="Placeable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Waiter&gt; waits for &lt;Duration&gt; seconds before performing its next action</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Waiter&gt; waits for &lt;Duration&gt; seconds before performing its next action</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>283</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Waiter</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Waiter">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionWait(</Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Destroy &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Destroy &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>284</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>DestroyObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Destroyer&gt; destroys &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Destroyer&gt; destroys &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>285</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Destroyer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Destroyer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(DestroyObject(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Destroy &lt;Target&gt; with its death animation</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Destroy &lt;Target&gt; with its death animation</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>286</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect death = EffectDeath(TRUE);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, death, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Destroyer&gt; destroys &lt;Target&gt; with its death animation</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Destroyer&gt; destroys &lt;Target&gt; with its death animation</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>287</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Destroyer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect death = EffectDeath(TRUE);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Destroyer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_INSTANT, death, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Allow&gt; &lt;Target&gt; to be destroyed</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Allow&gt; &lt;Target&gt; to be destroyed</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>288</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Allow</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>allow</Type>
              </Types>
              <Binding flavour="constant">
                <Type>allow</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, SetIsDestroyable(</Literal>
              <Scope data="argument" ref="Allow">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Turn &lt;Creature&gt; &lt;Immortal&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Turn &lt;Creature&gt; &lt;Immortal&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>304</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Immortal</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>immortal</Type>
              </Types>
              <Binding flavour="constant">
                <Type>immortal</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetImmortal(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Immortal">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Property Setter&gt; turns &lt;Creature&gt; &lt;Immortal&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Property Setter&gt; turns &lt;Creature&gt; &lt;Immortal&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>305</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Property Setter</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Immortal</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>immortal</Type>
              </Types>
              <Binding flavour="constant">
                <Type>immortal</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Property Setter">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetImmortal(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Immortal">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the plot property of &lt;Object&gt; to &lt;Plot&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the plot property of &lt;Object&gt; to &lt;Plot&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>306</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Plot</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetPlotFlag(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Plot">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Enable&gt; the plot property of &lt;Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Enable&gt; the plot property of &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>307</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Enable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>enable_disable</Type>
              </Types>
              <Binding flavour="constant">
                <Type>enable_disable</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetPlotFlag(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Enable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the &lt;Object&gt; to &lt;Lock or Unlock&gt;ed</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the &lt;Object&gt; to &lt;Lock or Unlock&gt;ed</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>308</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Lock or Unlock</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>lock_modify</Type>
              </Types>
              <Binding flavour="constant">
                <Type>lock_modify</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocked(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Lock or Unlock">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;User&gt; &lt;locks or unlock&gt;s &lt;Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;User&gt; &lt;locks or unlock&gt;s &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>309</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>locks or unlock</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>lock_modify</Type>
              </Types>
              <Binding flavour="constant">
                <Type>lock_modify</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetLocked(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="locks or unlock">
                <Fragment data="name"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;User&gt; &lt;locks or unlock&gt;s &lt;Object&gt; after &lt;Delay&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;User&gt; &lt;locks or unlock&gt;s &lt;Object&gt; after &lt;Delay&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>310</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>locks or unlock</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>lock_modify</Type>
              </Types>
              <Binding flavour="constant">
                <Type>lock_modify</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Delay</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>DelayCommand(</Literal>
              <Scope data="argument" ref="Delay">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetLocked(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="locks or unlock">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>))));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;User&gt; &lt;locks or unlock&gt;s &lt;Object&gt; using the Open Locks skill</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;User&gt; &lt;locks or unlock&gt;s &lt;Object&gt; using the Open Locks skill</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>311</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>locks or unlock</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>lock_modify</Type>
              </Types>
              <Binding flavour="constant">
                <Type>lock_modify</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if (</Literal>
              <Scope data="argument" ref="locks or unlock">
                <Fragment data="name"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Line>
              <Literal>	AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionLockObject(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>  else</Literal>
            </Line>
            <Line>
              <Literal>	AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionUnlockObject(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;User&gt; &lt;Close&gt;s &lt;Door&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;User&gt; &lt;Close&gt;s &lt;Door&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>315</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Close</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>open_close</Type>
              </Types>
              <Binding flavour="constant">
                <Type>open_close</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if (</Literal>
              <Scope data="argument" ref="Close">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Line>
              <Literal>    AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionOpenDoor(</Literal>
              <Scope data="argument" ref="Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>  else</Literal>
            </Line>
            <Line>
              <Literal>    AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCloseDoor(</Literal>
              <Scope data="argument" ref="Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;User&gt; &lt;close&gt;s &lt;Door&gt; after a delay of &lt;Delay&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;User&gt; &lt;close&gt;s &lt;Door&gt; after a delay of &lt;Delay&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>316</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>User</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Close</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>open_close</Type>
              </Types>
              <Binding flavour="constant">
                <Type>open_close</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Delay</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if (</Literal>
              <Scope data="argument" ref="Close">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Line>
              <Literal>	DelayCommand(</Literal>
              <Scope data="argument" ref="Delay">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionOpenDoor(</Literal>
              <Scope data="argument" ref="Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
            <Line>
              <Literal>	else</Literal>
            </Line>
            <Line>
              <Literal>	DelayCommand(</Literal>
              <Scope data="argument" ref="Delay">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, AssignCommand(</Literal>
              <Scope data="argument" ref="User">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionCloseDoor(</Literal>
              <Scope data="argument" ref="Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Disarm a trap on &lt;Trapped Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Disarm a trap on &lt;Trapped Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>319</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Trapped Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetTrapDisabled(</Literal>
              <Scope data="argument" ref="Trapped Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Disarmer&gt; disarms a trap on &lt;Trapped Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Disarmer&gt; disarms a trap on &lt;Trapped Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>320</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Disarmer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Trapped Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Disarmer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(SetTrapDisabled(</Literal>
              <Scope data="argument" ref="Trapped Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Creature&gt; &lt;Door Action&gt;s &lt;The Door&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Creature&gt; &lt;Door Action&gt;s &lt;The Door&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>321</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Door Action</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door_action</Type>
              </Types>
              <Binding flavour="constant">
                <Type>door_action</Type>
                <Value>DOOR_ACTION_OPEN</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>The Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(DoDoorAction(</Literal>
              <Scope data="argument" ref="The Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Door Action">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Attacker&gt; attacks &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Attacker&gt; attacks &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>323</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Attacker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Attacker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionAttack(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Deal &lt;Amount&gt; points of &lt;Damage Type&gt; damage to &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Deal &lt;Amount&gt; points of &lt;Damage Type&gt; damage to &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>324</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Damage Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>damage_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>damage_type</Type>
                <Value>DAMAGE_TYPE_MAGICAL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect dEff = EffectDamage(FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Damage Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, dEff, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Damager&gt; deals &lt;Amount&gt; points of &lt;Damage Type&gt; damage to &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Damager&gt; deals &lt;Amount&gt; points of &lt;Damage Type&gt; damage to &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>325</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Damager</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Damage Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>damage_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>damage_type</Type>
                <Value>DAMAGE_TYPE_MAGICAL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect dEff = EffectDamage(FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Damage Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Damager">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_INSTANT, dEff, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Heal &lt;Target&gt; for &lt;Amount&gt; hit points</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Heal &lt;Target&gt; for &lt;Amount&gt; hit points</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>327</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect hEff = EffectHeal(FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_INSTANT, hEff, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Healer&gt; Heals &lt;Target&gt; for &lt;Amount&gt; hit points</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Healer&gt; Heals &lt;Target&gt; for &lt;Amount&gt; hit points</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>328</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Healer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>effect hEff = EffectHeal(FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Healer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ApplyEffectToObject(DURATION_TYPE_INSTANT, hEff, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Disable&gt; &lt;Target&gt;&apos;s &lt;Action Mode&gt; mode</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Disable&gt; &lt;Target&gt;&apos;s &lt;Action Mode&gt; mode</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>329</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Disable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>enable_disable</Type>
              </Types>
              <Binding flavour="constant">
                <Type>enable_disable</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Action Mode</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>action_mode</Type>
              </Types>
              <Binding flavour="constant">
                <Type>action_mode</Type>
                <Value>ACTION_MODE_STEALTH</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetActionMode(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Action Mode">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Disable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Subject surrenders to its enemies</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Subject surrenders to its enemies</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>331</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>SurrenderToEnemies();</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Surrenderer&gt; surrenders to its enemies</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Surrenderer&gt; surrenders to its enemies</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>332</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Surrenderer</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Surrenderer">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, SurrenderToEnemies());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Speaker&gt; plays voice chat &lt;Voice Chat&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Speaker&gt; plays voice chat &lt;Voice Chat&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>333</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Speaker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Voice Chat</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>voice_chat</Type>
              </Types>
              <Binding flavour="constant">
                <Type>voice_chat</Type>
                <Value>VOICE_CHAT_LAUGH</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Speaker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(PlayVoiceChat(</Literal>
              <Scope data="argument" ref="Voice Chat">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Speaker&gt; speaks a one-liner conversation from &lt;Conversation&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Speaker&gt; speaks a one-liner conversation from &lt;Conversation&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>334</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Speaker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Conversation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>dialogue</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Speaker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, SpeakOneLinerConversation(</Literal>
              <Scope data="argument" ref="Conversation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Speaker&gt; speaks a string with reference number &lt;String Reference Number&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Speaker&gt; speaks a string with reference number &lt;String Reference Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>335</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Speaker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>String Reference Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Speaker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionSpeakStringByStrRef(FloatToInt(</Literal>
              <Scope data="argument" ref="String Reference Number">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Record &lt;Creature&gt;&apos;s current appearance type</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Record &lt;Creature&gt;&apos;s current appearance type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>336</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>i_se_aux</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>object aCreature = </Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>SetLocalInt(aCreature, &quot;SE_AUX_APPEARANCE_TYPE&quot;, GetAppearanceType(aCreature));</Literal>
            </Line>
            <Line>
              <Literal>SetLocalInt(aCreature, &quot;SE_AUX_APPEARANCE_TYPE_SET&quot;, 1);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Creature&gt;&apos;s appearance to &lt;Appearance&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Creature&gt;&apos;s appearance to &lt;Appearance&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>337</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Appearance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCreatureAppearanceType(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Appearance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Creature&gt;&apos;s portrait to &lt;Portrait Reference&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Creature&gt;&apos;s portrait to &lt;Portrait Reference&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>339</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Portrait Reference</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetPortraitResRef(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Portrait Reference">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Creature&gt;&apos;s &lt;Body Part&gt;&apos;s model to &lt;Model Type&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Creature&gt;&apos;s &lt;Body Part&gt;&apos;s model to &lt;Model Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>340</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Body Part</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>body_part</Type>
              </Types>
              <Binding flavour="constant">
                <Type>body_part</Type>
                <Value>CREATURE_PART_HEAD</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Model Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>model_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>model_type</Type>
                <Value>CREATURE_MODEL_TYPE_NONE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCreatureBodyPart(</Literal>
              <Scope data="argument" ref="Body Part">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Model Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Apply cutscene ghost effect to &lt;The Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Apply cutscene ghost effect to &lt;The Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>341</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneGhost(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Apply cutscene ghost effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Apply cutscene ghost effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>342</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneGhost(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="The Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Activator&gt; triggers a cutscene ghost effect to &lt;The Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Activator&gt; triggers a cutscene ghost effect to &lt;The Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>343</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Activator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Activator">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneGhost(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Activator&gt; triggers a cutscene ghost effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Activator&gt; triggers a cutscene ghost effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>344</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Activator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Activator">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneGhost(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="The Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Apply cutscene immobilize effect to &lt;The Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Apply cutscene immobilize effect to &lt;The Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>345</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneImmobilize(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Activator&gt; triggers a cutscene immobilize to &lt;The Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Activator&gt; triggers a cutscene immobilize to &lt;The Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>346</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Activator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Activator">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneImmobilize(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Activator&gt; triggers a cutscene immobilize effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Activator&gt; triggers a cutscene immobilize effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>347</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Activator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Activator">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneImmobilize(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="The Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Apply cutscene paralyze effect to &lt;The Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Apply cutscene paralyze effect to &lt;The Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>348</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneParalyze(),</Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Apply cutscene paralyze effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Apply cutscene paralyze effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>349</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneParalyze(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="The Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Activator&gt; triggers a cutscene paralyze effect to &lt;The Target&gt; permanently</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Activator&gt; triggers a cutscene paralyze effect to &lt;The Target&gt; permanently</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>350</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Activator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Activator">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_PERMANENT, EffectCutsceneParalyze(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Activator&gt; triggers a cutscene paralyze effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Activator&gt; triggers a cutscene paralyze effect to &lt;The Target&gt; for &lt;The Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>351</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Activator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Activator">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionDoCommand(ApplyEffectToObject(DURATION_TYPE_TEMPORARY, EffectCutsceneParalyze(), </Literal>
              <Scope data="argument" ref="The Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="The Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Store the Player Character&apos;s current camera direction</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Store the Player Character&apos;s current camera direction</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>352</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>AssignCommand(GetFirstPC() , StoreCameraFacing());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Restore the Player Character&apos;s camera to the stored camera direction</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Restore the Player Character&apos;s camera to the stored camera direction</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>353</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>AssignCommand(GetFirstPC(), RestoreCameraFacing());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Fade the screen from black at &lt;Fade Speed&gt; speed</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Fade the screen from black at &lt;Fade Speed&gt; speed</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>354</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Fade Speed</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>fade_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>fade_speed</Type>
                <Value>FADE_SPEED_MEDIUM</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>FadeFromBlack(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Fade Speed">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Fade the screen to black at &lt;Fade Speed&gt; speed</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Fade the screen to black at &lt;Fade Speed&gt; speed</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>355</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Fade Speed</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>fade_speed</Type>
              </Types>
              <Binding flavour="constant">
                <Type>fade_speed</Type>
                <Value>FADE_SPEED_MEDIUM</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>FadeToBlack(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Fade Speed">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Immediately set the screen to black</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Immediately set the screen to black</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>356</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>BlackScreen(GetFirstPC());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the height of the camera to &lt;Height&gt; metres</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the height of the camera to &lt;Height&gt; metres</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>357</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Height</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCameraHeight(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Height">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set Player Character&apos;s camera mode to &lt;Camera Mode&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set Player Character&apos;s camera mode to &lt;Camera Mode&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>358</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Camera Mode</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>camera_mode</Type>
              </Types>
              <Binding flavour="constant">
                <Type>camera_mode</Type>
                <Value>CAMERA_MODE_CHASE_CAMERA</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCameraMode(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Camera Mode">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the camera to &lt;Camera Mode&gt; mode</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the camera to &lt;Camera Mode&gt; mode</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>359</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Camera Mode</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>camera_mode</Type>
              </Types>
              <Binding flavour="constant">
                <Type>camera_mode</Type>
                <Value>CAMERA_MODE_CHASE_CAMERA</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCameraMode(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Camera Mode">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the cutscene movement rate to &lt;Movement speed&gt; between 0.1 to 2.0</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the cutscene movement rate to &lt;Movement speed&gt; between 0.1 to 2.0</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>360</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Movement speed</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCutsceneCameraMoveRate(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Movement speed">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Enable&gt; cutscene mode with left-clicking &lt;Disable&gt;d</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Enable&gt; cutscene mode with left-clicking &lt;Disable&gt;d</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>361</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Enable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>enable_disable</Type>
              </Types>
              <Binding flavour="constant">
                <Type>enable_disable</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Disable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>enable_disable</Type>
              </Types>
              <Binding flavour="constant">
                <Type>enable_disable</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCutsceneMode(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Enable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Disable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Stop all fade effects</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Stop all fade effects</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>362</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>StopFade(GetFirstPC());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the story to night in &lt;Transition Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the story to night in &lt;Transition Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>363</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Transition Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if( GetIsDay() == TRUE ) {</Literal>
            </Line>
            <Line>
              <Literal>DayToNight(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Transition Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the story to day in &lt;Transition Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the story to day in &lt;Transition Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>364</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Transition Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if( GetIsNight() == TRUE ) {</Literal>
            </Line>
            <Line>
              <Literal>NightToDay(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Transition Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Area&gt;&apos;s sky to &lt;Sky&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Area&gt;&apos;s sky to &lt;Sky&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>367</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Sky</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>skybox</Type>
              </Types>
              <Binding flavour="constant">
                <Type>skybox</Type>
                <Value>SKYBOX_GRASS_CLEAR</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetSkyBox(</Literal>
              <Scope data="argument" ref="Sky">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the weather for &lt;Target Area&gt; to &lt;Type of Weather&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the weather for &lt;Target Area&gt; to &lt;Type of Weather&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>368</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>module</Type>
                <Type>area</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Type of Weather</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>weather</Type>
              </Types>
              <Binding flavour="constant">
                <Type>weather</Type>
                <Value>WEATHER_RAIN</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetWeather(</Literal>
              <Scope data="argument" ref="Target Area">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Type of Weather">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Turn &lt;Placeable&gt;&apos;s illumination &lt;off&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Turn &lt;Placeable&gt;&apos;s illumination &lt;off&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>369</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Placeable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>off</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>onoroff</Type>
              </Types>
              <Binding flavour="constant">
                <Type>onoroff</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>  int anim;</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal>  if( </Literal>
              <Scope data="argument" ref="off">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal> == TRUE ) {</Literal>
            </Line>
            <Line>
              <Literal>    anim = ANIMATION_PLACEABLE_ACTIVATE;</Literal>
            </Line>
            <Line>
              <Literal>  } </Literal>
            </Line>
            <Line>
              <Literal>  else {</Literal>
            </Line>
            <Line>
              <Literal>    anim = ANIMATION_PLACEABLE_DEACTIVATE;</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Placeable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, PlayAnimation(anim));</Literal>
            </Line>
            <Line>
              <Literal>SetPlaceableIllumination(</Literal>
              <Scope data="argument" ref="Placeable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="off">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>RecomputeStaticLighting(GetArea(</Literal>
              <Scope data="argument" ref="Placeable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Adjust &lt;Target&gt;&apos;s reputation with respect to &lt;Faction Member&gt;&apos;s faction by &lt;Change&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Adjust &lt;Target&gt;&apos;s reputation with respect to &lt;Faction Member&gt;&apos;s faction by &lt;Change&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>370</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Faction Member</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Change</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AdjustReputation(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Faction Member">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Change">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Enemy&gt; as an enemy of &lt;Creature&gt; for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Enemy&gt; as an enemy of &lt;Creature&gt; for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>371</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Enemy</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetIsTemporaryEnemy(</Literal>
              <Scope data="argument" ref="Enemy">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, TRUE, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>End the module with movie &lt;End Movie&gt; after &lt;Delay Time&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>End the module with movie &lt;End Movie&gt; after &lt;Delay Time&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>372</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>End Movie</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Delay Time</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>DelayCommand(</Literal>
              <Scope data="argument" ref="Delay Time">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, EndGame(</Literal>
              <Scope data="argument" ref="End Movie">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Assign &lt;Object&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Assign &lt;Object&gt; to &lt;Target&gt;&apos;s variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>373</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalObject(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Label">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Destroy &lt;Target&gt; in &lt;Container&gt;&apos;s inventory</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Destroy &lt;Target&gt; in &lt;Container&gt;&apos;s inventory</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>374</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Container</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>object InvItem = GetItemPossessedBy(</Literal>
              <Scope data="argument" ref="Container">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, GetTag(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal> if(GetIsObjectValid(InvItem))</Literal>
            </Line>
            <Line>
              <Literal>  {</Literal>
            </Line>
            <Line>
              <Literal>    DestroyObject(InvItem);</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Remove a spell effect &lt;Effect Type&gt; from &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Remove a spell effect &lt;Effect Type&gt; from &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>375</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Effect Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>effect_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>effect_type</Type>
                <Value>EFFECT_TYPE_CONFUSED</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int effectRemoved = </Literal>
              <Scope data="argument" ref="Effect Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>object target = </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>effect eLoop = GetFirstEffect(target);</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal>  while (GetIsEffectValid(eLoop)){</Literal>
            </Line>
            <Line>
              <Literal>    if (GetEffectType(eLoop) == effectRemoved){</Literal>
            </Line>
            <Line>
              <Literal>          RemoveEffect(target, eLoop);</Literal>
            </Line>
            <Line>
              <Literal>    }</Literal>
            </Line>
            <Line>
              <Literal>    eLoop=GetNextEffect(target);</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Make &lt;Creature&gt; drunk losing &lt;Intelligence Lost&gt; points for &lt;Duration&gt; seconds</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Make &lt;Creature&gt; drunk losing &lt;Intelligence Lost&gt; points for &lt;Duration&gt; seconds</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>376</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Intelligence Lost</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Duration</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if (Random(100) + 1 &lt; 40)</Literal>
            </Line>
            <Line>
              <Literal>        AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionPlayAnimation(ANIMATION_LOOPING_TALK_LAUGHING));</Literal>
            </Line>
            <Line>
              <Literal>    else</Literal>
            </Line>
            <Line>
              <Literal>        AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionPlayAnimation(ANIMATION_LOOPING_PAUSE_DRUNK));</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal>effect eDumb = EffectAbilityDecrease(ABILITY_INTELLIGENCE, FloatToInt(</Literal>
              <Scope data="argument" ref="Intelligence Lost">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>    ApplyEffectToObject(DURATION_TYPE_TEMPORARY, eDumb, </Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Duration">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Starter&gt; starts &lt;Conversation&gt; with &lt;Partner&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Starter&gt; starts &lt;Conversation&gt; with &lt;Partner&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>377</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Starter</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Conversation</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>dialogue</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Partner</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Starter">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionStartConversation(</Literal>
              <Scope data="argument" ref="Partner">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Conversation">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>) );</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Face the camera to &lt;Direction&gt; degrees from the East and &lt;Distance&gt; metres from the character at a &lt;Pitch&gt; degree angle with &lt;Transition Type&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Face the camera to &lt;Direction&gt; degrees from the East and &lt;Distance&gt; metres from the character at a &lt;Pitch&gt; degree angle with &lt;Transition Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>378</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Direction</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Pitch</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Transition Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>camera_transition</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCameraFacing(</Literal>
              <Scope data="argument" ref="Direction">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Pitch">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Transition Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Face the camera &lt;Direction&gt; degrees from the East and &lt;Distance&gt; metres from the character at a &lt;Pitch&gt; degree angle with &lt;Transition Type&gt; transition</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Face the camera &lt;Direction&gt; degrees from the East and &lt;Distance&gt; metres from the character at a &lt;Pitch&gt; degree angle with &lt;Transition Type&gt; transition</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>379</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Direction</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Pitch</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Transition Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>camera_transition</Type>
              </Types>
              <Binding flavour="constant">
                <Type>camera_transition</Type>
                <Value>CAMERA_TRANSITION_TYPE_MEDIUM</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetCameraFacing(</Literal>
              <Scope data="argument" ref="Direction">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Pitch">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Transition Type">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Start new module with filename &lt;Module Name&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Start new module with filename &lt;Module Name&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>380</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Module Name</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>StartNewModule(</Literal>
              <Scope data="argument" ref="Module Name">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Give &lt;Amount&gt; gold pieces to &lt;Recipient&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Give &lt;Amount&gt; gold pieces to &lt;Recipient&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>381</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Recipient</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Recipient">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, GiveGoldToCreature(</Literal>
              <Scope data="argument" ref="Recipient">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Give &lt;Amount&gt; XP to &lt;Recipient&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Give &lt;Amount&gt; XP to &lt;Recipient&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>382</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Recipient</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>GiveXPToCreature(</Literal>
              <Scope data="argument" ref="Recipient">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;Recipient&gt;&apos;s XP to &lt;XP Amount&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;Recipient&gt;&apos;s XP to &lt;XP Amount&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>384</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Recipient</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>XP Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetXP(</Literal>
              <Scope data="argument" ref="Recipient">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="XP Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Take &lt;Amount&gt; gold pieces from &lt;Creature&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Take &lt;Amount&gt; gold pieces from &lt;Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>385</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, TakeGoldFromCreature(FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, TRUE));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Take all gold pieces from &lt;Creature&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Take all gold pieces from &lt;Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>386</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, TakeGoldFromCreature(GetGold(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, TRUE));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Take &lt;Amount&gt; XP from &lt;Creature&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Take &lt;Amount&gt; XP from &lt;Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>387</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Amount</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetXP(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, GetXP(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>) - FloatToInt(</Literal>
              <Scope data="argument" ref="Amount">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Make &lt;Creature&gt; become the Player Character&apos;s henchman</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Make &lt;Creature&gt; become the Player Character&apos;s henchman</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>388</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AddHenchman(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Follower&gt; follows &lt;Followed&gt; from &lt;Distance&gt; metres away</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Follower&gt; follows &lt;Followed&gt; from &lt;Distance&gt; metres away</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>389</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Follower</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Followed</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Distance</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Follower">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionForceFollowObject(</Literal>
              <Scope data="argument" ref="Followed">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Distance">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Make &lt;The Henchman&gt; stop being the henchman of &lt;The PC&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Make &lt;The Henchman&gt; stop being the henchman of &lt;The PC&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>390</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Henchman</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The PC</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>RemoveHenchman(</Literal>
              <Scope data="argument" ref="The Henchman">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="The PC">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the max number of henchmen to be &lt;Number of Henchmen&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the max number of henchmen to be &lt;Number of Henchmen&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>391</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number of Henchmen</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetMaxHenchmen(FloatToInt(</Literal>
              <Scope data="argument" ref="Number of Henchmen">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Destroy &lt;The Number&gt; items of type &lt;The Item Blueprint&gt; in the inventory of &lt;The Container&gt;, &lt;not including its equipped items&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Destroy &lt;The Number&gt; items of type &lt;The Item Blueprint&gt; in the inventory of &lt;The Container&gt;, &lt;not including its equipped items&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>392</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Item Blueprint</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Container</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>not including its equipped items</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int left = FloatToInt(</Literal>
              <Scope data="argument" ref="The Number">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>object owner = </Literal>
              <Scope data="argument" ref="The Container">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>string resref = GetResRef(</Literal>
              <Scope data="argument" ref="The Item Blueprint">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>object oItem = GetFirstItemInInventory(owner);</Literal>
            </Line>
            <Line>
              <Literal>int stacksize;</Literal>
            </Line>
            <Line>
              <Literal>int i;</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal>  while( GetIsObjectValid(oItem) ) {</Literal>
            </Line>
            <Line>
              <Literal>        if( GetResRef(oItem) == resref ) {</Literal>
            </Line>
            <Line>
              <Literal>            stacksize = GetItemStackSize(oItem);</Literal>
            </Line>
            <Line>
              <Literal>            if(  stacksize &lt;= left ) {</Literal>
            </Line>
            <Line>
              <Literal>                DestroyObject(oItem,0.1f);</Literal>
            </Line>
            <Line>
              <Literal>                left -= stacksize;</Literal>
            </Line>
            <Line>
              <Literal>            } else {</Literal>
            </Line>
            <Line>
              <Literal>                SetItemStackSize(oItem, stacksize - left);</Literal>
            </Line>
            <Line>
              <Literal>                return;</Literal>
            </Line>
            <Line>
              <Literal>            }</Literal>
            </Line>
            <Line>
              <Literal>        }</Literal>
            </Line>
            <Line>
              <Literal>        oItem = GetNextItemInInventory(owner);</Literal>
            </Line>
            <Line>
              <Literal>    }</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal> if(FloatToInt(</Literal>
              <Scope data="argument" ref="not including its equipped items">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>))</Literal>
            </Line>
            <Line>
              <Literal>    {</Literal>
            </Line>
            <Line>
              <Literal>	for(i = 0; i &lt; NUM_INVENTORY_SLOTS; i ++)</Literal>
            </Line>
            <Line>
              <Literal>	{</Literal>
            </Line>
            <Line>
              <Literal>	    oItem = GetItemInSlot(i, owner);</Literal>
            </Line>
            <Line>
              <Literal>	    </Literal>
            </Line>
            <Line>
              <Literal>	    if(	GetIsObjectValid(oItem) &amp;&amp;</Literal>
            </Line>
            <Line>
              <Literal>		GetResRef(oItem) == resref )</Literal>
            </Line>
            <Line>
              <Literal>	    {</Literal>
            </Line>
            <Line>
              <Literal>		stacksize = GetItemStackSize(oItem);</Literal>
            </Line>
            <Line>
              <Literal>		if(stacksize &lt;= left)</Literal>
            </Line>
            <Line>
              <Literal>		{</Literal>
            </Line>
            <Line>
              <Literal>		    DestroyObject(oItem,0.1f);</Literal>
            </Line>
            <Line>
              <Literal>		    left -= stacksize;</Literal>
            </Line>
            <Line>
              <Literal>		}</Literal>
            </Line>
            <Line>
              <Literal>		else</Literal>
            </Line>
            <Line>
              <Literal>		{</Literal>
            </Line>
            <Line>
              <Literal>		    SetItemStackSize(oItem, stacksize - left);</Literal>
            </Line>
            <Line>
              <Literal>		    return;</Literal>
            </Line>
            <Line>
              <Literal>		}</Literal>
            </Line>
            <Line>
              <Literal>	    }</Literal>
            </Line>
            <Line>
              <Literal>	}</Literal>
            </Line>
            <Line>
              <Literal>    }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; equips &lt;Equipment&gt; on &lt;Slot&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; equips &lt;Equipment&gt; on &lt;Slot&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>393</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Equipment</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Slot</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>inventory_slot</Type>
              </Types>
              <Binding flavour="constant">
                <Type>inventory_slot</Type>
                <Value>INVENTORY_SLOT_CHEST</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionEquipItem(</Literal>
              <Scope data="argument" ref="Equipment">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Slot">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; equips its most effective melee weapon against &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; equips its most effective melee weapon against &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>394</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal> AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionEquipMostDamagingMelee(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; equips its most effective armor</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; equips its most effective armor</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>395</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionEquipMostEffectiveArmor());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; equips its most effective ranged weapon against &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; equips its most effective ranged weapon against &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>396</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionEquipMostDamagingRanged(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; equips its most effective weapons against &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; equips its most effective weapons against &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>397</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>x0_i0_equip</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, EquipAppropriateWeapons(</Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Giver&gt; gives &lt;Item&gt; to &lt;Receiver&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Giver&gt; gives &lt;Item&gt; to &lt;Receiver&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>398</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Giver</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Receiver</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Giver">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionGiveItem(</Literal>
              <Scope data="argument" ref="Item">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Receiver">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Picker&gt; picks up &lt;Item&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Picker&gt; picks up &lt;Item&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>399</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Picker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Picker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionPickUpItem(</Literal>
              <Scope data="argument" ref="Item">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Dropper&gt; puts down &lt;Item&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Dropper&gt; puts down &lt;Item&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>400</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Dropper</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Dropper">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionPutDownItem(</Literal>
              <Scope data="argument" ref="Item">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Allow&gt; &lt;Item&gt; to be dropped</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Allow&gt; &lt;Item&gt; to be dropped</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>401</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Allow</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>allow</Type>
              </Types>
              <Binding flavour="constant">
                <Type>allow</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetDroppableFlag(</Literal>
              <Scope data="argument" ref="Item">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Allow">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set the stack size of &lt;The Item&gt; to &lt;The Stack Size&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set the stack size of &lt;The Item&gt; to &lt;The Stack Size&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>402</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>The Stack Size</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetItemStackSize(</Literal>
              <Scope data="argument" ref="The Item">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="The Stack Size">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Set &lt;The Item&gt;&apos;s charges to &lt;Charges&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Set &lt;The Item&gt;&apos;s charges to &lt;Charges&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>404</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Charges</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetItemCharges(</Literal>
              <Scope data="argument" ref="The Item">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="argument" ref="Charges">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;The Taker&gt; takes &lt;Item&gt; from &lt;Loser&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;The Taker&gt; takes &lt;Item&gt; from &lt;Loser&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>405</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Taker</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Loser</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="The Taker">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionTakeItem(</Literal>
              <Scope data="argument" ref="Item">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Loser">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt; unequips &lt;Equipment&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt; unequips &lt;Equipment&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>406</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Equipment</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AssignCommand(</Literal>
              <Scope data="argument" ref="Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionUnequipItem(</Literal>
              <Scope data="argument" ref="Equipment">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Disable&gt; all encounters with same tag as &lt;Encounter&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Disable&gt; all encounters with same tag as &lt;Encounter&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>407</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Disable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>enable_disable</Type>
              </Types>
              <Binding flavour="constant">
                <Type>enable_disable</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Encounter</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>encounter</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nth = 0;</Literal>
            </Line>
            <Line>
              <Literal>string tag = GetTag(</Literal>
              <Scope data="argument" ref="Encounter">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>object anEncounter = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>while (GetIsObjectValid(anEncounter))</Literal>
            </Line>
            <Line>
              <Literal>{</Literal>
            </Line>
            <Line>
              <Literal>	SetEncounterActive(</Literal>
              <Scope data="argument" ref="Disable">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, anEncounter);</Literal>
            </Line>
            <Line>
              <Literal>	nth++;</Literal>
            </Line>
            <Line>
              <Literal>	anEncounter = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Destroy all equipped items of &lt;The Creature&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Destroy all equipped items of &lt;The Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>408</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nSlot;</Literal>
            </Line>
            <Line>
              <Literal>object oItem;</Literal>
            </Line>
            <Line>
              <Literal>  for(nSlot = 0; nSlot &lt; NUM_INVENTORY_SLOTS; nSlot++){</Literal>
            </Line>
            <Line>
              <Literal>      oItem = GetItemInSlot(nSlot, </Literal>
              <Scope data="argument" ref="The Creature">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);      </Literal>
            </Line>
            <Line>
              <Literal>      DestroyObject(oItem, 0.1f);</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Destroy all objects with same tag as &lt;The Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Destroy all objects with same tag as &lt;The Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>409</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>  int nth = 0;</Literal>
            </Line>
            <Line>
              <Literal>  string tag = GetTag(</Literal>
              <Scope data="argument" ref="The Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>  object anObject = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>  while (GetIsObjectValid(anObject) &amp;&amp; ! GetIsPC(anObject))</Literal>
            </Line>
            <Line>
              <Literal>  {</Literal>
            </Line>
            <Line>
              <Literal>    SetPlotFlag(anObject, FALSE);</Literal>
            </Line>
            <Line>
              <Literal>    DestroyObject(anObject);</Literal>
            </Line>
            <Line>
              <Literal>    nth++;</Literal>
            </Line>
            <Line>
              <Literal>    anObject = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Destroy all objects in the inventory of &lt;The Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Destroy all objects in the inventory of &lt;The Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>410</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>object oItem = GetFirstItemInInventory(</Literal>
              <Scope data="argument" ref="The Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>  while (GetIsObjectValid(oItem) == TRUE)</Literal>
            </Line>
            <Line>
              <Literal>  {</Literal>
            </Line>
            <Line>
              <Literal>    DestroyObject(oItem, 0.1f);</Literal>
            </Line>
            <Line>
              <Literal>    oItem = GetNextItemInInventory(</Literal>
              <Scope data="argument" ref="The Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Apply the death effect to all objects with the same tag as &lt;The Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Apply the death effect to all objects with the same tag as &lt;The Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>412</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>  int nth = 0;</Literal>
            </Line>
            <Line>
              <Literal>  string tag = GetTag(</Literal>
              <Scope data="argument" ref="The Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>  effect eDeath = EffectDeath(FALSE, FALSE);</Literal>
            </Line>
            <Line>
              <Literal>  object anObject = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>  while (GetIsObjectValid(anObject) &amp;&amp; ! GetIsPC(anObject))</Literal>
            </Line>
            <Line>
              <Literal>  {</Literal>
            </Line>
            <Line>
              <Literal>    SetPlotFlag(anObject, FALSE);</Literal>
            </Line>
            <Line>
              <Literal>    ApplyEffectToObject(DURATION_TYPE_INSTANT, eDeath, anObject);</Literal>
            </Line>
            <Line>
              <Literal>    nth++;</Literal>
            </Line>
            <Line>
              <Literal>    anObject = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Move all items from &lt;Object&gt;&apos;s inventory to &lt;Receiver&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Move all items from &lt;Object&gt;&apos;s inventory to &lt;Receiver&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>413</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Receiver</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>  object oitem = GetFirstItemInInventory(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>  while (GetIsObjectValid(oitem)) {</Literal>
            </Line>
            <Line>
              <Literal>    AssignCommand(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, ActionGiveItem(oitem, </Literal>
              <Scope data="argument" ref="Receiver">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>    oitem = GetNextItemInInventory(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>  }</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Open all doors with the same tag as &lt;The Door&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Open all doors with the same tag as &lt;The Door&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>414</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>The Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nth = 0;</Literal>
            </Line>
            <Line>
              <Literal>string tag = GetTag(</Literal>
              <Scope data="argument" ref="The Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>object aDoor = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>while (GetIsObjectValid(aDoor) &amp;&amp; ! GetIsPC(aDoor))</Literal>
            </Line>
            <Line>
              <Literal>{</Literal>
            </Line>
            <Line>
              <Literal>  SetLocked(aDoor, FALSE);</Literal>
            </Line>
            <Line>
              <Literal>  AssignCommand(aDoor, ActionOpenDoor(aDoor));</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal>  nth++;</Literal>
            </Line>
            <Line>
              <Literal>  aDoor = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;lock and close&gt; all doors with same tag as &lt;Door&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;lock and close&gt; all doors with same tag as &lt;Door&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>415</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>lock and close</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>lock_close</Type>
              </Types>
              <Binding flavour="constant">
                <Type>lock_close</Type>
                <Value>TRUE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nth = 0;</Literal>
            </Line>
            <Line>
              <Literal>int lock = !</Literal>
              <Scope data="argument" ref="lock and close">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>string tag = GetTag(</Literal>
              <Scope data="argument" ref="Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>object aDoor = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>while (GetIsObjectValid(aDoor) &amp;&amp; ! GetIsPC(aDoor))</Literal>
            </Line>
            <Line>
              <Literal>{</Literal>
            </Line>
            <Line>
              <Literal>  SetLocked(aDoor, lock);</Literal>
            </Line>
            <Line>
              <Literal>  if (lock)</Literal>
            </Line>
            <Line>
              <Literal>    AssignCommand(aDoor, ActionCloseDoor(aDoor));</Literal>
            </Line>
            <Line>
              <Literal>  else</Literal>
            </Line>
            <Line>
              <Literal>    AssignCommand(aDoor, ActionOpenDoor(aDoor));</Literal>
            </Line>
            <Line>
              <Literal>  nth++;</Literal>
            </Line>
            <Line>
              <Literal>  aDoor = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Toggle all doors with same tag as &lt;Door&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>TODO</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Toggle all doors with same tag as &lt;Door&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>416</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nth = 0;</Literal>
            </Line>
            <Line>
              <Literal>string tag = GetTag(</Literal>
              <Scope data="argument" ref="Door">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>object aDoor = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>int lock = ! GetLocked(aDoor);</Literal>
            </Line>
            <Line>
              <Literal>while (GetIsObjectValid(aDoor) &amp;&amp; ! GetIsPC(aDoor))</Literal>
            </Line>
            <Line>
              <Literal>{</Literal>
            </Line>
            <Line>
              <Literal>  SetLocked(aDoor, lock);</Literal>
            </Line>
            <Line>
              <Literal>  if (lock)</Literal>
            </Line>
            <Line>
              <Literal>    AssignCommand(aDoor, ActionCloseDoor(aDoor));</Literal>
            </Line>
            <Line>
              <Literal>  else</Literal>
            </Line>
            <Line>
              <Literal>    AssignCommand(aDoor, ActionOpenDoor(aDoor));</Literal>
            </Line>
            <Line>
              <Literal>  nth++;</Literal>
            </Line>
            <Line>
              <Literal>  aDoor = GetObjectByTag(tag, nth);</Literal>
            </Line>
            <Line>
              <Literal>}</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Execute the script &quot;&lt;Script&gt;&quot; on &lt;Target&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Execute the script &quot;&lt;Script&gt;&quot; on &lt;Target&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>417</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Script</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
                <Type>item</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ExecuteScript(</Literal>
              <Scope data="argument" ref="Script">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="argument" ref="Target">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Execute the script &quot;&lt;Script&gt;&quot; on subject</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Execute the script &quot;&lt;Script&gt;&quot; on subject</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>418</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Script</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>ExecuteScript(</Literal>
              <Scope data="argument" ref="Script">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>, OBJECT_SELF);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the Current Hit Points of &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the Current Hit Points of &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>419</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetCurrentHitPoints(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the Maximum Hit Points of &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the Maximum Hit Points of &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>420</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetMaxHitPoints(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;X&gt; is &lt;Number Operator&gt; &lt;Y&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;X&gt; is &lt;Number Operator&gt; &lt;Y&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>421</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>X</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Y</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Number Operator</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>number_operator</Type>
              </Types>
              <Binding flavour="constant">
                <Type>number_operator</Type>
                <Value>0</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int numberOperator = </Literal>
              <Scope data="argument" ref="Number Operator">
                <Fragment data="name"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>if(numberOperator == 0)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return </Literal>
                <Scope data="argument" ref="X">
                  <Fragment data="name"/>
                </Scope>
                <Literal> &gt; </Literal>
                <Scope data="argument" ref="Y">
                  <Fragment data="name"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(numberOperator == 1)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return </Literal>
                <Scope data="argument" ref="X">
                  <Fragment data="name"/>
                </Scope>
                <Literal> &lt; </Literal>
                <Scope data="argument" ref="Y">
                  <Fragment data="name"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(numberOperator == 2)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return </Literal>
                <Scope data="argument" ref="X">
                  <Fragment data="name"/>
                </Scope>
                <Literal> == </Literal>
                <Scope data="argument" ref="Y">
                  <Fragment data="name"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(numberOperator == 3)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return </Literal>
                <Scope data="argument" ref="X">
                  <Fragment data="name"/>
                </Scope>
                <Literal> &gt;= </Literal>
                <Scope data="argument" ref="Y">
                  <Fragment data="name"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else if(numberOperator == 4)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return </Literal>
                <Scope data="argument" ref="X">
                  <Fragment data="name"/>
                </Scope>
                <Literal> &lt;= </Literal>
                <Scope data="argument" ref="Y">
                  <Fragment data="name"/>
                </Scope>
                <Literal>;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return FALSE;</Literal>
              </Line>
            </Indent>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Random Creature &lt;with Object Tag&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Random Creature &lt;with Object Tag&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>422</Id>
          <Types>
            <Type>creature</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>with Object Tag</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>i_se_aux</Include>
          </Includes>
          <Code>
            <Line>
              <Literal>return SE_AUX_GetRandomObjectWithoutSelf(</Literal>
              <Scope data="argument" ref="with Object Tag">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Enable&gt; &lt;dialogue line&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Enable&gt; &lt;dialogue line&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>430</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Enable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>enable_disable</Type>
              </Types>
              <Binding flavour="constant">
                <Type>enable_disable</Type>
                <Value>FALSE</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>dialogue line</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>dialogue_line</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalInt(GetModule(), </Literal>
              <Scope data="argument" ref="dialogue line">
                <Fragment data="name"/>
              </Scope>
              <Literal>, abs(1-</Literal>
              <Scope data="argument" ref="Enable">
                <Fragment data="name"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
        <CodeBlockSource>
          <Name>&lt;Enable&gt; &lt;dialogue line&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Subject>dialogue line</Subject>
          <Slot>Active</Slot>
          <Id>431</Id>
          <Types>
            <Type>int</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return abs(1-GetLocalInt(GetModule(), </Literal>
              <Scope data="argument" ref="dialogue line">
                <Scope data="binding">
                  <Fragment data="formattedValue"/>
                </Scope>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Succeed &lt;Story Point&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Succeed &lt;Story Point&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>432</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SE2_Story_SetState(GetFirstPC(),</Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>, STORY_POINT_STATE_SUCCESS);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Fail &lt;Story Point&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Fail &lt;Story Point&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>433</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SE2_Story_SetState(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>, STORY_POINT_STATE_FAIL);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name> Remember &lt;Text&gt; as attribute &lt;Name&gt; in &lt;Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name> Remember &lt;Text&gt; as attribute &lt;Name&gt; in &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>435</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Name</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalString(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name"/>
              </Scope>
              <Literal>,</Literal>
              <Scope data="argument" ref="Name">
                <Fragment data="name"/>
              </Scope>
              <Literal>,</Literal>
              <Scope data="argument" ref="Text">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name> Remember &lt;Number&gt; as attribute &lt;Name&gt; in &lt;Object&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name> Remember &lt;Number&gt; as attribute &lt;Name&gt; in &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>437</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Name</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SetLocalFloat(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name"/>
              </Scope>
              <Literal>,</Literal>
              <Scope data="argument" ref="Name">
                <Fragment data="name"/>
              </Scope>
              <Literal>,</Literal>
              <Scope data="argument" ref="Number">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>The Player Character</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>The Player Character</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>439</Id>
          <Types>
            <Type>creature</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return GetFirstPC();</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Get Nearest Object Without Self</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Get Nearest Object Without Self</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>440</Id>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Tag</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>i_se_aux</Include>
          </Includes>
          <Code>
            <Literal>SE_AUX_GetNearestObjectWithoutSelf(&quot;</Literal>
            <Scope data="argument" ref="Tag">
              <Fragment data="name"/>
            </Scope>
            <Literal>&quot;)</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Get Random Object Without Self</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Get Random Object Without Self</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>441</Id>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Tag</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>i_se_aux</Include>
          </Includes>
          <Code>
            <Literal>SE_AUX_GetRandomObjectWithoutSelf(&quot;</Literal>
            <Scope data="argument" ref="Tag">
              <Fragment data="name"/>
            </Scope>
            <Literal>&quot;)</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Get Nearest Object By Tag Include Self</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Get Nearest Object By Tag Include Self</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>442</Id>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
            <Type>item</Type>
            <Type>module</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Tag</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>i_se_aux</Include>
          </Includes>
          <Code>
            <Literal>SE_AUX_GetNearestObjectByTagIncludeSelf(&quot;</Literal>
            <Scope data="argument" ref="Tag">
              <Fragment data="name"/>
            </Scope>
            <Literal>&quot;)</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Get Random Object With Self</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Get Random Object With Self</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>443</Id>
          <Types>
            <Type>creature</Type>
            <Type>placeable</Type>
            <Type>door</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Tag</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>i_se_aux</Include>
          </Includes>
          <Code>
            <Literal>SE_AUX_GetRandomObjectWithSelf(&quot;</Literal>
            <Scope data="argument" ref="Tag">
              <Fragment data="name"/>
            </Scope>
            <Literal>&quot;)</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Get Module</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Get Module</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>444</Id>
          <Types>
            <Type>module</Type>
          </Types>
          <Code>
            <Literal>GetModule()</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;First Object&gt; is &lt;Second Object&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;First Object&gt; is &lt;Second Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>445</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return </Literal>
              <Scope data="argument" ref="First Object">
                <Fragment data="name"/>
              </Scope>
              <Literal> == </Literal>
              <Scope data="argument" ref="Second Object">
                <Fragment data="name"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the location of &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the location of &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>446</Id>
          <Types>
            <Type>location</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetLocation(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Create a new &lt;Object&gt; at &lt;Location&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Create a new &lt;Object&gt; at &lt;Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>447</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>store</Type>
                <Type>waypoint</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>string templateID = &quot;</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="templateID"/>
              </Scope>
              <Literal>&quot;;</Literal>
            </Line>
            <Line>
              <Literal>int dotLoc = FindSubString(templateID, &quot;.&quot;);</Literal>
            </Line>
            <Line>
              <Literal>string resref = GetStringLeft(templateID, dotLoc);</Literal>
            </Line>
            <Line>
              <Literal>string typeExt = GetStringRight(templateID, GetStringLength(templateID) - (dotLoc + 1));</Literal>
            </Line>
            <Line>
              <Literal>int type;</Literal>
            </Line>
            <Line>
              <Literal>// Cleverly determine that pesky constant from the template id (resref) extension.</Literal>
            </Line>
            <Line>
              <Literal>if(typeExt == &quot;utc&quot; || typeExt == &quot;UTC&quot;){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>// this little piggy was a piggy</Literal>
              </Line>
              <Line>
                <Literal>type = OBJECT_TYPE_CREATURE;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>} else if(typeExt == &quot;uti&quot; || typeExt == &quot;UTI&quot;){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>// this little piggy was a meal</Literal>
              </Line>
              <Line>
                <Literal>type = OBJECT_TYPE_ITEM;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>} else if(typeExt == &quot;utp&quot; || typeExt == &quot;UTP&quot;){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>// this little piggy was a statue</Literal>
              </Line>
              <Line>
                <Literal>type = OBJECT_TYPE_PLACEABLE;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>} else if(typeExt == &quot;uts&quot; || typeExt == &quot;UTS&quot;){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>// this little piggy was a butcher&apos;s shop</Literal>
              </Line>
              <Line>
                <Literal>type = OBJECT_TYPE_STORE;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>} else if(typeExt == &quot;utw&quot; || typeExt == &quot;UTW&quot;){</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>// and this little piggy went wee wee wee, to the waypoint home.</Literal>
              </Line>
              <Line>
                <Literal>type = OBJECT_TYPE_WAYPOINT;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
            <Line>
              <Literal>// Now we can actually do the thing with the stuff.</Literal>
            </Line>
            <Line>
              <Literal>CreateObject(type, resref, </Literal>
              <Scope data="argument" ref="Location">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Continue story at &lt;Story Point&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Continue story at &lt;Story Point&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>448</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>SE2_Story_ResetAtStoryPoint(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Story Point&gt; is active</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Story Point&gt; is active</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>455</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return SE2_Story_GetState(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>) == STORY_POINT_STATE_ENABLED;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Story Point&gt; has succeeded</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Story Point&gt; has succeeded</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>456</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return SE2_Story_GetState(GetFirstPC(), </Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name" legalValues="^[a-zA-Z]+[0-9a-zA-Z]*"/>
              </Scope>
              <Literal>) == STORY_POINT_STATE_SUCCESS;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>attribute &lt;Text&gt; in &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>attribute &lt;Text&gt; in &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>457</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
                <Type>door</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetLocalFloat(</Literal>
              <Scope data="argument" ref="Object">
                <Fragment data="name"/>
              </Scope>
              <Literal>,</Literal>
              <Scope data="argument" ref="Text">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the nearest &lt;Object Type&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the nearest &lt;Object Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>458</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetNearestObject(</Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the &lt;Number&gt; nearest &lt;Object Type&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the &lt;Number&gt; nearest &lt;Object Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>459</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetNearestObject(</Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, OBJECT_SELF, FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the different nearest &lt;Object Type&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the different nearest &lt;Object Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>460</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>if(GetObjectType(OBJECT_SELF) ==</Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return GetNearestObject(</Literal>
                <Scope data="ARGUMENT" ref="Object Type">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>, OBJECT_SELF, 2);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return GetNearestObject(</Literal>
                <Scope data="ARGUMENT" ref="Object Type">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>);</Literal>
              </Line>
            </Indent>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the nearest &lt;Object Type&gt; to &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the nearest &lt;Object Type&gt; to &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>461</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetNearestObject(</Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, 1);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the &lt;Number&gt; nearest &lt;Object Type&gt; to &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the &lt;Number&gt; nearest &lt;Object Type&gt; to &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>462</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetNearestObject(</Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the different nearest &lt;Object Type&gt; to &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the different nearest &lt;Object Type&gt; to &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>463</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>object oCloseTo = </Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>if(GetObjectType(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>) == </Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return GetNearestObject(</Literal>
                <Scope data="ARGUMENT" ref="Object Type">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>, oCloseTo, 2);</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return GetNearestObject(</Literal>
                <Scope data="ARGUMENT" ref="Object Type">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>, oCloseTo, 1);</Literal>
              </Line>
            </Indent>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the nearest &lt;Object Type&gt; to &lt;Object&gt; with same tag as &lt;Other Object&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the nearest &lt;Object Type&gt; to &lt;Object&gt; with same tag as &lt;Other Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>464</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Other Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>object nearestObject = GetNearestObjectByTag(GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Other Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, 1);</Literal>
            </Line>
            <Line>
              <Literal>if(GetObjectType(nearestObject) == </Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return nearestObject;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return OBJECT_INVALID;</Literal>
              </Line>
            </Indent>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the &lt;Number&gt; nearest &lt;Object Type&gt; to &lt;Object&gt; with same tag as &lt;Other Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the &lt;Number&gt; nearest &lt;Object Type&gt; to &lt;Object&gt; with same tag as &lt;Other Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>465</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Other Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>object nearestObject = GetNearestObjectByTag(GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Other Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
            <Line>
              <Literal>if(GetObjectType(nearestObject) == </Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return nearestObject;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return OBJECT_INVALID;</Literal>
              </Line>
            </Indent>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the different nearest &lt;Object Type&gt; to &lt;Object&gt; with same tag as &lt;Other Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the different nearest &lt;Object Type&gt; to &lt;Object&gt; with same tag as &lt;Other Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>466</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>object_type</Type>
                <Value>OBJECT_TYPE_ALL</Value>
              </Binding>
            </KnowIt>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Other Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int number = 1;</Literal>
            </Line>
            <Line>
              <Literal>if(GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>) == GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Other Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>))</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>number = 2;</Literal>
              </Line>
            </Indent>
            <Line/>
            <Line>
              <Literal>object creature = GetNearestObjectByTag(GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Other Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>), </Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, number);</Literal>
            </Line>
            <Line>
              <Literal>if(GetObjectType(creature) == </Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return creature;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>else</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>return OBJECT_INVALID;</Literal>
              </Line>
            </Indent>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Add Journal Record for &lt;Story Point&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Add Journal Record for &lt;Story Point&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>467</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code/>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Add Journal Point to Journal Record of &lt;Story Point&gt; with text &lt;Text&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Add Journal Point to Journal Record of &lt;Story Point&gt; with text &lt;Text&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>468</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>string entryText = GetLocalString(GetFirstPC(), &quot;CT_&quot;+</Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>string newEntryText = entryText;</Literal>
            </Line>
            <Line>
              <Literal>if(GetStringLength(newEntryText) &gt; 0)</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>newEntryText += &quot;\n\n&quot;;</Literal>
              </Line>
            </Indent>
            <Line>
              <Literal>newEntryText += </Literal>
              <Scope data="argument" ref="Text">
                <Fragment data="name"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>SetLocalString(GetFirstPC(), &quot;CT_&quot;+</Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name"/>
              </Scope>
              <Literal>, newEntryText);</Literal>
            </Line>
            <Line>
              <Literal>SetCustomToken(10+</Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="uniqueID"/>
              </Scope>
              <Literal>, newEntryText);</Literal>
            </Line>
            <Line/>
            <Line>
              <Literal>RemoveJournalQuestEntry(</Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name"/>
              </Scope>
              <Literal>, GetFirstPC());</Literal>
            </Line>
            <Line>
              <Literal>AddJournalQuestEntry(</Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name"/>
              </Scope>
              <Literal>, 1, GetFirstPC());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Finish Journal Record of &lt;Story Point&gt;</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Finish Journal Record of &lt;Story Point&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>469</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>AddJournalQuestEntry(</Literal>
              <Scope data="argument" ref="Story Point">
                <Fragment data="name"/>
              </Scope>
              <Literal>, 2, GetFirstPC());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;First Creature&gt; is a henchman of &lt;Second Creature&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;First Creature&gt; is a henchman of &lt;Second Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>471</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int nLoop;</Literal>
            </Line>
            <Line>
              <Literal>for (nLoop=1; nLoop&lt;=GetMaxHenchmen(); nLoop++) {</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>object aHenchman = GetHenchman(</Literal>
                <Scope data="ARGUMENT" ref="First Creature">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>, nLoop);</Literal>
              </Line>
              <Line>
                <Literal>if (GetIsObjectValid( aHenchman ) &amp;&amp; aHenchman == </Literal>
                <Scope data="ARGUMENT" ref="Second Creature">
                  <Fragment data="NAME"/>
                </Scope>
                <Literal>)</Literal>
              </Line>
              <Indent>
                <Line>
                  <Literal>return TRUE;</Literal>
                </Line>
              </Indent>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
            <Line>
              <Literal>return FALSE;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;First Creature&gt; is an enemy of &lt;Second Creature&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;First Creature&gt; is an enemy of &lt;Second Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>472</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>return GetIsEnemy(</Literal>
            <Scope data="ARGUMENT" ref="First Creature">
              <Fragment data="NAME"/>
              <Literal>, </Literal>
            </Scope>
            <Scope data="ARGUMENT" ref="Second Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>);</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; can cast &lt;Spell&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; can cast &lt;Spell&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>474</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>return GetHasSpell(</Literal>
            <Scope data="ARGUMENT" ref="Spell">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>, </Literal>
            <Scope data="ARGUMENT" ref="Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>);</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;First Creature&gt; can see &lt;Second Creature&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;First Creature&gt; can see &lt;Second Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>475</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>return GetObjectSeen(</Literal>
            <Scope data="ARGUMENT" ref="Second Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>, </Literal>
            <Scope data="ARGUMENT" ref="First Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>);</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; has appearance type &lt;Type&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; has appearance type &lt;Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>476</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>appearance_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>appearance_type</Type>
                <Value>APPEARANCE_TYPE_DOG</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>return GetAppearanceType(</Literal>
            <Scope data="ARGUMENT" ref="Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>) == </Literal>
            <Scope data="ARGUMENT" ref="Type">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>;</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; has class type &lt;Class Type&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; has class type &lt;Class Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>477</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Class Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>class_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>class_type</Type>
                <Value>CLASS_TYPE_ASSASSIN</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>return GetLevelByClass(</Literal>
            <Scope data="ARGUMENT" ref="Class Type">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>, </Literal>
            <Scope data="ARGUMENT" ref="Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>) &gt; 0;</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; has effect &lt;Effect Type&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; has effect &lt;Effect Type&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>478</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Effect Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>effect_type</Type>
              </Types>
              <Binding flavour="constant">
                <Type>effect_type</Type>
                <Value>EFFECT_TYPE_CONFUSED</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Includes>
            <Include>x0_i0_match</Include>
          </Includes>
          <Code>
            <Literal>return GetHasEffect(</Literal>
            <Scope data="ARGUMENT" ref="Effect Type">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>, </Literal>
            <Scope data="ARGUMENT" ref="Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>);</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; has &lt;Item&gt; equipped on &lt;Slot&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; has &lt;Item&gt; equipped on &lt;Slot&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>479</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Slot</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>inventory_slot</Type>
              </Types>
              <Binding flavour="constant">
                <Type>inventory_slot</Type>
                <Value>INVENTORY_SLOT_CHEST</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>if ( </Literal>
            <Scope data="ARGUMENT" ref="Item">
              <Fragment data="NAME"/>
            </Scope>
            <Literal> == OBJECT_INVALID) return FALSE; return GetItemInSlot(</Literal>
            <Scope data="ARGUMENT" ref="Slot">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>, </Literal>
            <Scope data="ARGUMENT" ref="Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>) == </Literal>
            <Scope data="ARGUMENT" ref="Item">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>;</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; is dead</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; is dead</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>480</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>return GetIsDead(</Literal>
            <Scope data="ARGUMENT" ref="Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>);</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; is Immortal</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; is Immortal</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>481</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Literal>return GetImmortal(</Literal>
            <Scope data="ARGUMENT" ref="Creature">
              <Fragment data="NAME"/>
            </Scope>
            <Literal>);</Literal>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; is engaged in combat</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; is engaged in combat</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>482</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetIsInCombat(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; is engaged in conversation</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; is engaged in conversation</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>483</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IsInConversation(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; is gender &lt;Gender&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; is gender &lt;Gender&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>484</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Gender</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>gender</Type>
              </Types>
              <Binding flavour="constant">
                <Type>gender</Type>
                <Value>GENDER_NONE</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetGender(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>) == </Literal>
              <Scope data="ARGUMENT" ref="Gender">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; has spell effect &lt;Spell&gt; cast on them</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; has spell effect &lt;Spell&gt; cast on them</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>485</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Spell</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>spell</Type>
              </Types>
              <Binding flavour="constant">
                <Type>spell</Type>
                <Value>SPELL_RAY_OF_FROST</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetHasSpellEffect(</Literal>
              <Scope data="ARGUMENT" ref="Spell">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Creature&gt; has &lt;Item&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Creature&gt; has &lt;Item&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>486</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetIsObjectValid(GetItemPossessedBy(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Item">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Lockable&gt; requires key</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Lockable&gt; requires key</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>487</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Lockable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetLockKeyRequired(</Literal>
              <Scope data="ARGUMENT" ref="Lockable">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Object&gt; exists in module</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Object&gt; exists in module</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>488</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>store</Type>
                <Type>door</Type>
                <Type>dialogue</Type>
                <Type>encounter</Type>
                <Type>placeable</Type>
                <Type>area</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetIsObjectValid(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Object&gt; has blueprint &lt;Blueprint&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Object&gt; has blueprint &lt;Blueprint&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>489</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>store</Type>
                <Type>door</Type>
                <Type>dialogue</Type>
                <Type>encounter</Type>
                <Type>placeable</Type>
                <Type>area</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Blueprint</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetResRef(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>) == </Literal>
              <Scope data="ARGUMENT" ref="Blueprint">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Target&gt; is a PC</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Target&gt; is a PC</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>490</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Target</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetIsPC(</Literal>
              <Scope data="ARGUMENT" ref="Target">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Openable&gt; is open</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Openable&gt; is open</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>491</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Openable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetIsOpen(</Literal>
              <Scope data="ARGUMENT" ref="Openable">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Door&gt; can be &lt;Action&gt;ed</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Door&gt; can be &lt;Action&gt;ed</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>492</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Door</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Action</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door_action</Type>
              </Types>
              <Binding flavour="constant">
                <Type>door_action</Type>
                <Value>DOOR_ACTION_OPEN</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetIsDoorActionPossible(</Literal>
              <Scope data="ARGUMENT" ref="Door">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="Action">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;First Object&gt; blueprint matches &lt;Second Object&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;First Object&gt; blueprint matches &lt;Second Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>496</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetResRef(</Literal>
              <Scope data="ARGUMENT" ref="First Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>) == GetResRef(</Literal>
              <Scope data="ARGUMENT" ref="First Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;First Object&gt; tag matches &lt;Second Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;First Object&gt; tag matches &lt;Second Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>497</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetTag(</Literal>
              <Scope data="ARGUMENT" ref="First Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>) == GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Second Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Object&gt; is a plot object</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Object&gt; is a plot object</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>499</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetPlotFlag(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Placeable&gt; has &lt;Item&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Placeable&gt; has &lt;Item&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>500</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Placeable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetIsObjectValid(GetItemPossessedBy(</Literal>
              <Scope data="ARGUMENT" ref="Placeable">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Item">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;Lockable&gt; is locked</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;Lockable&gt; is locked</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>503</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Lockable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetLocked(</Literal>
              <Scope data="ARGUMENT" ref="Lockable">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the combination of &lt;First Text&gt; with &lt;Second Text&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the combination of &lt;First Text&gt; with &lt;Second Text&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>505</Id>
          <Types>
            <Type>string</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return </Literal>
              <Scope data="ARGUMENT" ref="First Text">
                <Fragment data="NAME"/>
              </Scope>
              <Literal> + </Literal>
              <Scope data="ARGUMENT" ref="Second Text">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the value of the global variable labelled &lt;Label&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the value of the global variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>506</Id>
          <Types>
            <Type>string</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetLocalString(GetModule(), </Literal>
              <Scope data="ARGUMENT" ref="Label">
                <Fragment data="NAME" legalValues="^[a-zA-Z]+[0-9a-zA-Z_]*"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the name of &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the name of &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>507</Id>
          <Types>
            <Type>string</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>store</Type>
                <Type>door</Type>
                <Type>dialogue</Type>
                <Type>encounter</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>area</Type>
                <Type>trigger</Type>
                <Type>module</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetName(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the portrait reference of &lt;Creature&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the portrait reference of &lt;Creature&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>508</Id>
          <Types>
            <Type>string</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetPortraitResRef(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the tag of &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the tag of &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>509</Id>
          <Types>
            <Type>string</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>store</Type>
                <Type>door</Type>
                <Type>dialogue</Type>
                <Type>encounter</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>area</Type>
                <Type>trigger</Type>
                <Type>module</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>if &lt;First Text&gt; equals &lt;Second Text&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>if &lt;First Text&gt; equals &lt;Second Text&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>510</Id>
          <Types>
            <Type>question</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return </Literal>
              <Scope data="ARGUMENT" ref="First Text">
                <Fragment data="NAME"/>
              </Scope>
              <Literal> == </Literal>
              <Scope data="ARGUMENT" ref="Second Text">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>creature that possesses &lt;Item&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>creature that possesses &lt;Item&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>511</Id>
          <Types>
            <Type>creature</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetItemPossessor(</Literal>
              <Scope data="ARGUMENT" ref="Item">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>area that &lt;Object&gt; is located in</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>area that &lt;Object&gt; is located in</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>512</Id>
          <Types>
            <Type>area</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>store</Type>
                <Type>door</Type>
                <Type>encounter</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetArea(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Number&gt; as Text</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Number&gt; as Text</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>513</Id>
          <Types>
            <Type>string</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToString(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the value of the global variable labelled &lt;Label&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the value of the global variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>514</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetLocalFloat(GetModule(), </Literal>
              <Scope data="ARGUMENT" ref="Label">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt;&apos;s gender</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt;&apos;s gender</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>515</Id>
          <Types>
            <Type>gender</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetGender(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;First Number&gt; plus &lt;Second Number&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;First Number&gt; plus &lt;Second Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>517</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return </Literal>
              <Scope data="ARGUMENT" ref="First Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>+</Literal>
              <Scope data="ARGUMENT" ref="Second Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;First Number&gt; minus &lt;Second Number&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;First Number&gt; minus &lt;Second Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>518</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return </Literal>
              <Scope data="ARGUMENT" ref="First Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>-</Literal>
              <Scope data="ARGUMENT" ref="Second Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;First Number&gt; times &lt;Second Number&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;First Number&gt; times &lt;Second Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>519</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return </Literal>
              <Scope data="ARGUMENT" ref="First Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>*</Literal>
              <Scope data="ARGUMENT" ref="Second Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;First Number&gt; divided by &lt;Second Number&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;First Number&gt; divided by &lt;Second Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>520</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return </Literal>
              <Scope data="ARGUMENT" ref="First Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>/</Literal>
              <Scope data="ARGUMENT" ref="Second Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;First Number&gt; to the power of &lt;Second Number&gt;</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;First Number&gt; to the power of &lt;Second Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>521</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return pow(</Literal>
              <Scope data="ARGUMENT" ref="First Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>,</Literal>
              <Scope data="ARGUMENT" ref="Second Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the value of the global variable labelled &lt;Label&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the value of the global variable labelled &lt;Label&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>522</Id>
          <Types>
            <Type>store</Type>
            <Type>door</Type>
            <Type>placeable</Type>
            <Type>waypoint</Type>
            <Type>trigger</Type>
            <Type>creature</Type>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Label</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetLocalObject(GetModule(), </Literal>
              <Scope data="ARGUMENT" ref="Label">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>item equipped on &lt;Creature&gt;&apos;s &lt;Slot&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>item equipped on &lt;Creature&gt;&apos;s &lt;Slot&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>523</Id>
          <Types>
            <Type>item</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Slot</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>inventory_slot</Type>
              </Types>
              <Binding flavour="constant">
                <Type>inventory_slot</Type>
                <Value>INVENTORY_SLOT_CHEST</Value>
              </Binding>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetItemInSlot(</Literal>
              <Scope data="ARGUMENT" ref="Slot">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the &lt;Creature&gt;&apos;s appearance type</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the &lt;Creature&gt;&apos;s appearance type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>524</Id>
          <Types>
            <Type>appearance_type</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetAppearanceType(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the &lt;Creature&gt;&apos;s gender</Name>
      <Visible>false</Visible>
      <Labels>
        <Label></Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the &lt;Creature&gt;&apos;s gender</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>525</Id>
          <Types>
            <Type>gender</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetGender(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the &lt;Creature&gt;&apos;s racial type</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the &lt;Creature&gt;&apos;s racial type</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>527</Id>
          <Types>
            <Type>racial_type</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetRacialType(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the &lt;Area&gt;&apos;s weather</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the &lt;Area&gt;&apos;s weather</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>528</Id>
          <Types>
            <Type>weather</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetWeather(</Literal>
              <Scope data="ARGUMENT" ref="Area">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the arccosine of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the arccosine of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>529</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return acos(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the arcsine of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the arcsine of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>530</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return asin(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the arctangent of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the arctangent of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>531</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return atan(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the cosine of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the cosine of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>532</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return cos(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sine of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sine of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>533</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return sin(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the tangent of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the tangent of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>534</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return tan(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the logarithm of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the logarithm of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>535</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return log(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the square root of &lt;Number&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the square root of &lt;Number&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>536</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return sqrt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>a random number with maximum &lt;Maximum&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>a random number with maximum &lt;Maximum&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>537</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Maximum</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(Random(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Maximum">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the distance between &lt;First Object&gt; and &lt;Second Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the distance between &lt;First Object&gt; and &lt;Second Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>538</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>store</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>store</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetDistanceBetween(</Literal>
              <Scope data="ARGUMENT" ref="First Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="Second Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the direction &lt;Object&gt; is facing</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the direction &lt;Object&gt; is facing</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>539</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetFacing(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the distance between &lt;First Location&gt; and &lt;Second Location&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the distance between &lt;First Location&gt; and &lt;Second Location&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>540</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>First Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Second Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetDistanceBetweenLocations(</Literal>
              <Scope data="ARGUMENT" ref="First Location">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="Second Location">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the direction &lt;Location&gt; is facing</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the direction &lt;Location&gt; is facing</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>541</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return GetFacingFromLocation(</Literal>
              <Scope data="ARGUMENT" ref="Location">
                <Fragment data="VALUE"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the number of characters in &lt;Text&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the number of characters in &lt;Text&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>542</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Text</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>string</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetStringLength(</Literal>
              <Scope data="ARGUMENT" ref="Text">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the amount of gold that &lt;Object&gt; has</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the amount of gold that &lt;Object&gt; has</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>543</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetGold(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt;&apos;s Ability Score</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt;&apos;s Ability Score</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>544</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetAbilityScore(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt;&apos;s AC</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt;&apos;s AC</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>545</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetAC(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt;&apos;s age</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt;&apos;s age</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>546</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetAge(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt;&apos;s level</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt;&apos;s level</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>547</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetCharacterLevel(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>&lt;Creature&gt;&apos;s XP</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>&lt;Creature&gt;&apos;s XP</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>548</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetXP(</Literal>
              <Scope data="ARGUMENT" ref="Creature">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the number of stacked items in the stack of &lt;Item&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the number of stacked items in the stack of &lt;Item&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>549</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Item</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>item</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetItemStackSize(</Literal>
              <Scope data="ARGUMENT" ref="Item">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the current hour</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the current hour</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>550</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetTimeHour());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the current minute</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the current minute</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>551</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetTimeMinute());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the current second</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the current second</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>552</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetTimeSecond());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the current millisecond</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the current millisecond</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>553</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetTimeMillisecond());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the current day</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the current day</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>554</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetCalendarDay());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the current month</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the current month</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>555</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetCalendarMonth());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the current year</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the current year</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>556</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Code>
            <Line>
              <Literal>return IntToFloat(GetCalendarYear());</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; two sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; two sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>557</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d2(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; three sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; three sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>558</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d3(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; four sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; four sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>559</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d4(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; six sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; six sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>560</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d6(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; eight sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; eight sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>561</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d8(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; ten sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; ten sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>562</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d10(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; twelve sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; twelve sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>563</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d12(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; twenty sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; twenty sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>564</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d20(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the sum of rolling &lt;Number&gt; one hundred sided dice</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the sum of rolling &lt;Number&gt; one hundred sided dice</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>565</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>return IntToFloat(d100(FloatToInt(</Literal>
              <Scope data="ARGUMENT" ref="Number">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>)));</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the number of &lt;Object Type&gt;s in the current area with same tag as &lt;Object&gt;</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the number of &lt;Object Type&gt;s in the current area with same tag as &lt;Object&gt;</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>567</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>store</Type>
                <Type>door</Type>
                <Type>dialogue</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>area</Type>
                <Type>trigger</Type>
                <Type>creature</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int numOfObjects = 0;</Literal>
            </Line>
            <Line>
              <Literal>object oFound = GetFirstObjectInArea();</Literal>
            </Line>
            <Line>
              <Literal>int objectType = </Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>string stringTag = GetTag(</Literal>
              <Scope data="ARGUMENT" ref="Object">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>while(oFound != OBJECT_INVALID) {</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>if(objectType == OBJECT_TYPE_ALL &amp;&amp; GetTag(oFound) == stringTag) </Literal>
              </Line>
              <Indent>
                <Line>
                  <Literal>numOfObjects++;</Literal>
                </Line>
              </Indent>
              <Literal>else if(GetObjectType(oFound) == objectType &amp;&amp; GetTag(oFound) == stringTag)</Literal>
              <Indent>
                <Literal>numOfObjects++;</Literal>
              </Indent>
              <Literal>oFound = GetNextObjectInArea();</Literal>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
            <Line>
              <Literal>return IntToFloat(numOfObjects);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>the number of &lt;Object Type&gt;s in the current area</Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>the number of &lt;Object Type&gt;s in the current area</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>569</Id>
          <Types>
            <Type>float</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>int numOfObjects = 0;</Literal>
            </Line>
            <Line>
              <Literal>object oFound = GetFirstObjectInArea();</Literal>
            </Line>
            <Line>
              <Literal>int objectType = </Literal>
              <Scope data="ARGUMENT" ref="Object Type">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>;</Literal>
            </Line>
            <Line>
              <Literal>while(oFound != OBJECT_INVALID) {</Literal>
            </Line>
            <Indent>
              <Line>
                <Literal>if(objectType == OBJECT_TYPE_ALL) </Literal>
              </Line>
              <Indent>
                <Line>
                  <Literal>numOfObjects++;</Literal>
                </Line>
              </Indent>
              <Literal>else if(GetObjectType(oFound) == objectType)</Literal>
              <Indent>
                <Literal>numOfObjects++;</Literal>
              </Indent>
              <Literal>oFound = GetNextObjectInArea();</Literal>
            </Indent>
            <Line>
              <Literal>}</Literal>
            </Line>
            <Line>
              <Literal>return numOfObjects;</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>a new location in &lt;Area&gt; at position x = &lt;x&gt;, y = &lt;y&gt;, z = &lt;z&gt;, with an orientation of &lt;degrees&gt; degrees </Name>
      <Visible>false</Visible>
      <Labels/>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>a new location in &lt;Area&gt; at position x = &lt;x&gt;, y = &lt;y&gt;, z = &lt;z&gt;, with an orientation of &lt;degrees&gt; degrees </Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>570</Id>
          <Types>
            <Type>location</Type>
          </Types>
          <Parameters>
            <KnowIt>
              <Name>Area</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>area</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>x</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>y</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>z</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <KnowIt>
              <Name>degrees</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
          </Parameters>
          <Code>
            <Line>
              <Literal>vector vPosition = Vector(</Literal>
              <Scope data="ARGUMENT" ref="x">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="y">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, </Literal>
              <Scope data="ARGUMENT" ref="z">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
            <Line>
              <Literal>return Location(</Literal>
              <Scope data="ARGUMENT" ref="Area">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>, vPosition,</Literal>
              <Scope data="ARGUMENT" ref="degrees">
                <Fragment data="NAME"/>
              </Scope>
              <Literal>);</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    <ScriptIt>
      <Name>Autosave the Story</Name>
      <Visible>true</Visible>
      <Labels>
        <Label>NOW</Label>
      </Labels>
      <Children/>
      <CodeBlocks>
        <CodeBlockSource>
          <Name>Autosave the Story</Name>
          <Visible>true</Visible>
          <Labels/>
          <Id>571</Id>
          <Types>
            <Type>void</Type>
          </Types>
          <Code>
            <Line>
              <Literal>DoSinglePlayerAutoSave();</Literal>
            </Line>
          </Code>
        </CodeBlockSource>
      </CodeBlocks>
    </ScriptIt>
    
  </Effects>
  <DescribeIts>
    <DescribeIt>
      <Name>Equipped Item</Name>
      <Types>
        <Type>item</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[292]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Has Appearance</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[2]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[253]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>In Combat</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[3]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[259]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Locked</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[4]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[274]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Door Action Allowed</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[5]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[269]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Henchman</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[6]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[249]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>The Player Character</Name>
      <Types>
        <Type>creature</Type>
      </Types>
      <DescribeItNode>
        <Name>The Player Character</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[7]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[224]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Has Effect</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[8]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[255]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Text Value</Name>
      <Types>
        <Type>string</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[9]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[276]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Time Value</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>the current</Name>
        <Successors>
          <DescribeItNode>
            <Name>millisecond</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>month</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>minute</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>second</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>day</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>hour</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>year</Name>
            <Successors/>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode/Successors/DescribeItNode[4]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[320]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode/Successors/DescribeItNode[7]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[324]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode/Successors/DescribeItNode[3]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[319]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[321]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode/Successors/DescribeItNode[5]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[322]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode/Successors/DescribeItNode[6]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[318]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[10]/DescribeItNode/Successors/DescribeItNode[2]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[323]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Combined Text</Name>
      <Types>
        <Type>string</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[11]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[275]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Difference</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[12]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[287]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Item Stack Size</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[13]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[317]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Texts are Equal</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[14]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[280]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Enemy</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[15]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[250]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Square Root</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[16]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[304]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Gender</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[17]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[261]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Product</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[18]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[288]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Object Value</Name>
      <Types>
        <Type>store</Type>
        <Type>door</Type>
        <Type>placeable</Type>
        <Type>waypoint</Type>
        <Type>trigger</Type>
        <Type>creature</Type>
        <Type>item</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <KnowIt>
          <Name>Placeholder Node</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types/>
        </KnowIt>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[19]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[291]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Sum</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[20]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[286]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Statistic Value</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Creature&apos;s</Name>
        <KnowIt>
          <Name>Creature&apos;s</Name>
          <Visible>true</Visible>
          <Labels/>
          <Types>
            <Type>creature</Type>
          </Types>
        </KnowIt>
        <Successors>
          <DescribeItNode>
            <Name>XP</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>level</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>Ability Score</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>AC</Name>
            <Successors/>
          </DescribeItNode>
          <DescribeItNode>
            <Name>age</Name>
            <Successors/>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode/Successors/DescribeItNode[3]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[312]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode/Successors/DescribeItNode[4]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[313]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[316]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode/Successors/DescribeItNode[2]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[315]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[21]/DescribeItNode/Successors/DescribeItNode[5]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[314]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Object Exists</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[22]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[265]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Power</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[23]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[290]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Immortal</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[24]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[258]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Quotient</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[25]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[289]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Weather</Name>
      <Types>
        <Type>weather</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[26]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[296]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Racial Type</Name>
      <Types>
        <Type>racial_type</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[27]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[295]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Facing</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>the direction</Name>
        <Successors>
          <DescribeItNode>
            <Name>Object</Name>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>waypoint</Type>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>is facing</Name>
                <Successors/>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>Location</Name>
            <KnowIt>
              <Name>Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[28]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[28]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[28]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[28]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[307]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[28]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[28]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[28]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[309]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Dead</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[29]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[257]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Distance</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>the distance between</Name>
        <Successors>
          <DescribeItNode>
            <Name>New Node 80</Name>
            <KnowIt>
              <Name>First Location</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>location</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>and</Name>
                <Successors>
                  <DescribeItNode>
                    <Name>New Node 82</Name>
                    <KnowIt>
                      <Name>Second Location</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>location</Type>
                      </Types>
                    </KnowIt>
                    <Successors/>
                  </DescribeItNode>
                </Successors>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>New Node 83</Name>
            <KnowIt>
              <Name>First Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>store</Type>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>creature</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>and</Name>
                <Successors>
                  <DescribeItNode>
                    <Name>New Node 85</Name>
                    <KnowIt>
                      <Name>Second Object</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>store</Type>
                        <Type>door</Type>
                        <Type>placeable</Type>
                        <Type>sound</Type>
                        <Type>waypoint</Type>
                        <Type>trigger</Type>
                        <Type>creature</Type>
                        <Type>item</Type>
                      </Types>
                    </KnowIt>
                    <Successors/>
                  </DescribeItNode>
                </Successors>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[308]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode/Successors/DescribeItNode[2]/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[30]/DescribeItNode/Successors/DescribeItNode[2]/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[306]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Text Length</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[31]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[310]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Hitpoints</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>the</Name>
        <Successors>
          <DescribeItNode>
            <Name>Current</Name>
            <Successors>
              <DescribeItNode>
                <Name>Hit Points of</Name>
                <Successors>
                  <DescribeItNode>
                    <Name>Object</Name>
                    <KnowIt>
                      <Name>Object</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>door</Type>
                        <Type>placeable</Type>
                        <Type>creature</Type>
                      </Types>
                    </KnowIt>
                    <Successors/>
                  </DescribeItNode>
                </Successors>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>Maximum</Name>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[215]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[32]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[216]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Tag</Name>
      <Types>
        <Type>string</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[33]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[279]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Number Value</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[34]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[284]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Trigonometric Value</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>the</Name>
        <Successors>
          <DescribeItNode>
            <Name>sine of</Name>
            <Successors>
              <DescribeItNode>
                <Name>Number</Name>
                <KnowIt>
                  <Name>Number</Name>
                  <Visible>true</Visible>
                  <Labels/>
                  <Types>
                    <Type>float</Type>
                  </Types>
                </KnowIt>
                <Successors/>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>tangent of</Name>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>cosine of</Name>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>arccossine of</Name>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>arctangent of</Name>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>arcsine of</Name>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[301]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode[3]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[300]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode[5]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[299]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[302]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode[6]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[298]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode[4]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[35]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[297]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Portrait Reference</Name>
      <Types>
        <Type>string</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[36]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[278]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Gender</Name>
      <Types>
        <Type>gender</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[37]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[294]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Random Number</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[38]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[305]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Objects are Equal</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>if</Name>
        <Successors>
          <DescribeItNode>
            <Name>Object</Name>
            <KnowIt>
              <Name>First Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>creature</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>is</Name>
                <Successors>
                  <DescribeItNode>
                    <Name>New Node 19</Name>
                    <KnowIt>
                      <Name>Second Object</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>door</Type>
                        <Type>placeable</Type>
                        <Type>sound</Type>
                        <Type>waypoint</Type>
                        <Type>trigger</Type>
                        <Type>creature</Type>
                        <Type>item</Type>
                      </Types>
                    </KnowIt>
                    <Successors/>
                  </DescribeItNode>
                </Successors>
              </DescribeItNode>
              <DescribeItNode>
                <Name>&apos;s blueprint matches</Name>
                <Successors>
                  <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
                </Successors>
              </DescribeItNode>
              <DescribeItNode>
                <Name>&apos;s tag matches</Name>
                <Successors>
                  <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
                </Successors>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[3]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[271]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[230]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[39]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[270]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Item Possessor</Name>
      <Types>
        <Type>creature</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[40]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[281]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Area</Name>
      <Types>
        <Type>area</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[41]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[282]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Can Cast</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[42]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[251]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>In Conversation</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[43]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[260]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Has Item</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>if</Name>
        <Successors>
          <DescribeItNode>
            <Name>New Node 22</Name>
            <KnowIt>
              <Name>Creature</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>creature</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>has</Name>
                <Successors>
                  <DescribeItNode>
                    <Name>Item</Name>
                    <KnowIt>
                      <Name>Item</Name>
                      <Visible>true</Visible>
                      <Labels/>
                      <Types>
                        <Type>item</Type>
                      </Types>
                    </KnowIt>
                    <Successors>
                      <DescribeItNode>
                        <Name>equipped on</Name>
                        <Successors>
                          <DescribeItNode>
                            <Name>New Node 28</Name>
                            <KnowIt>
                              <Name>Slot</Name>
                              <Visible>true</Visible>
                              <Labels/>
                              <Types>
                                <Type>inventory_slot</Type>
                              </Types>
                            </KnowIt>
                            <Successors/>
                          </DescribeItNode>
                        </Successors>
                      </DescribeItNode>
                    </Successors>
                  </DescribeItNode>
                </Successors>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>Placeable</Name>
            <KnowIt>
              <Name>Placeable</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>placeable</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[256]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[263]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[44]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[273]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Number of Objects</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>the number of </Name>
        <Successors>
          <DescribeItNode>
            <Name>New Node 126</Name>
            <KnowIt>
              <Name>Object Type</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>object_type</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>in the current area</Name>
                <Successors>
                  <DescribeItNode>
                    <Name>with same tag as</Name>
                    <Successors>
                      <DescribeItNode>
                        <Name>New Node 129</Name>
                        <KnowIt>
                          <Name>Object</Name>
                          <Visible>true</Visible>
                          <Labels/>
                          <Types>
                            <Type>store</Type>
                            <Type>door</Type>
                            <Type>dialogue</Type>
                            <Type>placeable</Type>
                            <Type>sound</Type>
                            <Type>waypoint</Type>
                            <Type>area</Type>
                            <Type>trigger</Type>
                            <Type>creature</Type>
                            <Type>item</Type>
                          </Types>
                        </KnowIt>
                        <Successors/>
                      </DescribeItNode>
                    </Successors>
                  </DescribeItNode>
                </Successors>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[334]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[45]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[335]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Number Comparison</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Number Comparison</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[46]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[217]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Plot</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[47]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[272]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Text</Name>
      <Types>
        <Type>string</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[48]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[283]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Dice Value</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>the sum of rolling</Name>
        <Successors>
          <DescribeItNode>
            <Name>New Node 116</Name>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>eight sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>one hundred sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>twenty sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>three sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>two sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>ten sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>six sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>four sided dice</Name>
                <Successors/>
              </DescribeItNode>
              <DescribeItNode>
                <Name>twelve sided dice</Name>
                <Successors/>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[7]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[328]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[3]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[332]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[4]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[326]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[329]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[8]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[327]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[9]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[331]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[2]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[333]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[5]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[325]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[49]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode[6]"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[330]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Location</Name>
      <Types>
        <Type>location</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[50]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[336]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Class</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[51]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[254]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Open</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[52]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[268]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Location</Name>
      <Types>
        <Type>location</Type>
      </Types>
      <DescribeItNode>
        <Name>the location of</Name>
        <Successors>
          <DescribeItNode>
            <Name>Object</Name>
            <KnowIt>
              <Name>Object</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>door</Type>
                <Type>placeable</Type>
                <Type>sound</Type>
                <Type>waypoint</Type>
                <Type>trigger</Type>
                <Type>creature</Type>
                <Type>item</Type>
              </Types>
            </KnowIt>
            <Successors/>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[53]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[53]/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[231]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Has Blueprint</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[54]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[266]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Can See</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[55]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[252]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Nearest Object</Name>
      <Types>
        <Type>store</Type>
        <Type>door</Type>
        <Type>placeable</Type>
        <Type>waypoint</Type>
        <Type>trigger</Type>
        <Type>creature</Type>
        <Type>item</Type>
      </Types>
      <DescribeItNode>
        <Name>the</Name>
        <Successors>
          <DescribeItNode>
            <Name>nearest</Name>
            <Successors>
              <DescribeItNode>
                <Name>Object</Name>
                <Successors>
                  <DescribeItNode>
                    <Name>to</Name>
                    <Successors>
                      <DescribeItNode>
                        <Name>New Node 62</Name>
                        <KnowIt>
                          <Name>Object</Name>
                          <Visible>true</Visible>
                          <Labels/>
                          <Types>
                            <Type>store</Type>
                            <Type>door</Type>
                            <Type>placeable</Type>
                            <Type>waypoint</Type>
                            <Type>trigger</Type>
                            <Type>creature</Type>
                            <Type>item</Type>
                          </Types>
                        </KnowIt>
                        <Successors>
                          <DescribeItNode>
                            <Name>with same tag as</Name>
                            <Successors>
                              <DescribeItNode>
                                <Name>New Node 64</Name>
                                <KnowIt>
                                  <Name>Other Object</Name>
                                  <Visible>true</Visible>
                                  <Labels/>
                                  <Types>
                                    <Type>store</Type>
                                    <Type>door</Type>
                                    <Type>placeable</Type>
                                    <Type>waypoint</Type>
                                    <Type>trigger</Type>
                                    <Type>creature</Type>
                                    <Type>item</Type>
                                  </Types>
                                </KnowIt>
                                <Successors/>
                              </DescribeItNode>
                            </Successors>
                          </DescribeItNode>
                        </Successors>
                      </DescribeItNode>
                    </Successors>
                  </DescribeItNode>
                </Successors>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>different</Name>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
          <DescribeItNode>
            <Name>New Node 59</Name>
            <KnowIt>
              <Name>Number</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>float</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode[3]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[238]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[243]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode[3]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[241]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode[3]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[244]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[240]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[245]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[237]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[242]"/>
        </Entry>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode[2]"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[56]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[239]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Requires Key</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[57]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[264]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Name</Name>
      <Types>
        <Type>string</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[58]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[277]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Appearance Type</Name>
      <Types>
        <Type>appearance_type</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[59]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[293]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Has Spell Effect</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[60]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[262]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Gold</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[61]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[311]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Has Succeeded</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>if</Name>
        <Successors>
          <DescribeItNode>
            <Name>New Node 16</Name>
            <KnowIt>
              <Name>Story Point</Name>
              <Visible>true</Visible>
              <Labels/>
              <Types>
                <Type>storyPoint</Type>
              </Types>
            </KnowIt>
            <Successors>
              <DescribeItNode>
                <Name>has succeeded</Name>
                <Successors/>
              </DescribeItNode>
            </Successors>
          </DescribeItNode>
        </Successors>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[62]/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[62]/DescribeItNode/Successors/DescribeItNode"/>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[62]/DescribeItNode/Successors/DescribeItNode/Successors/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[235]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Is Active</Name>
      <Types>
        <Type>question</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[63]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[234]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
    <DescribeIt>
      <Name>Logarithm</Name>
      <Types>
        <Type>float</Type>
      </Types>
      <DescribeItNode>
        <Name>Placeholder Node</Name>
        <Successors/>
      </DescribeItNode>
      <PathMap>
        <Entry>
          <Path>
            <DescribeItNode reference="/APIDictionary/DescribeIts/DescribeIt[64]/DescribeItNode"/>
          </Path>
          <ScriptIt reference="/APIDictionary/Effects/ScriptIt[303]"/>
        </Entry>
      </PathMap>
    </DescribeIt>
  </DescribeIts>
  <TypeConverters/>
</APIDictionary>