<!-- LanguageDictionary name (attribute) author (attribute) IndentString 
	ReservedWords Maps Formats -->
<LanguageDictionary name="DefaultNWNLanguageDictionary"
	author="ScriptEase2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation='../../../scriptease2/scriptease/resources/schema/LanguageDictionarySchema.xsd'>
	<!-- Four space characters. Space = ASCII 32 -->
	<IndentString>&#32;&#32;&#32;&#32;</IndentString>
	<ReservedWords>
		<Word>if</Word>
		<Word>else</Word>
		<Word>return</Word>
		<Word>for</Word>
		<Word>while</Word>
		<Word>do</Word>
		<Word>struct</Word>
		<Word>const</Word>
		<Word>switch</Word>
		<Word>case</Word>
		<Word>break</Word>
		<Word>action</Word>
		<Word>command</Word>
		<Word>const</Word>
		<Word>effect</Word>
		<Word>event</Word>
		<Word>float</Word>
		<Word>int</Word>
		<Word>itemproperty</Word>
		<Word>location</Word>
		<Word>Location</Word>
		<Word>object</Word>
		<Word>string</Word>
		<Word>struct</Word>
		<Word>talent</Word>
		<Word>vector</Word>
		<Word>void</Word>
		<Word caseSensitive="false">true</Word>
		<Word caseSensitive="false">false</Word>
	</ReservedWords>
	<Maps>
	</Maps>
	<Formats>
		<!-- Variables -->
		<!-- Adds the type of the variable in front of it -->
		<Format id="variableWithType">
			<Fragment data="type" default="void" />
			<Literal> </Literal>
			<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
		</Format>
		<!-- Declares a variable with type -->
		<Format id="variableDeclaration">
			<Line>
				<FormatRef ref="variableWithType" />
				<Literal>;</Literal>
			</Line>
		</Format>
		<!-- Declares all variables in the series -->
		<Format id="variablesDeclaration">
			<Line>
				<Literal>// Variables Declaration</Literal>
			</Line>
			<Series data="variables">
				<FormatRef ref="variableDeclaration" />
			</Series>
		</Format>
		<!-- Defines the variable with its value -->
		<Format id="variableDefinition">
			<Line>
				<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
				<Literal> = </Literal>
				<Fragment data="formattedValue" />
				<Literal>;</Literal>
			</Line>
		</Format>


		<!-- Implicits -->
		<!-- Declares all implicits -->
		<Format id="implicitsDeclaration">
			<Line>
				<Literal>// Implicits Declaration</Literal>
			</Line>
			<Series data="implicits">
				<FormatRef ref="variableDeclaration" />
			</Series>
		</Format>
		<!-- Defines all implicits -->
		<Format id="implicitsDefinition">
			<Line>
				<Literal>// Implicits Definition</Literal>
			</Line>
			<Series data="implicits">
				<FormatRef ref="variableDefinition" />
			</Series>
		</Format>

		<!-- Functions -->
		<!-- Function signature with type in front -->
		<Format id="functionSignature">
			<FormatRef ref="variableWithType" />
			<Literal>(</Literal>
			<Series data="parameters" unique="true" separator=", ">
				<!-- Parameters are just the type and the name -->
				<FormatRef ref="variableWithType" />
			</Series>
			<Literal>)</Literal>
		</Format>
		<!-- Declares the function, for the top of the file -->
		<Format id="functionDeclaration">
			<Line>
				<FormatRef ref="functionSignature" />
				<Literal>;</Literal>
			</Line>
		</Format>
		<!-- Used by ScriptEase to get the function name -->
		<Format id="function_as_value">
			<FormatRef ref="functionHeader" />
		</Format>
		<!-- Same as functionSignature, but without types. Used to call it -->
		<Format id="functionHeader">
			<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
			<Literal>(</Literal>
			<Series data="parameters" unique="true" separator=", ">
				<Fragment data="name" legalValues="[a-zA-Z_0-9]+" />
			</Series>
			<Literal>)</Literal>
		</Format>
		<!-- Defines the variables in codeblock and then calls the function -->
		<Format id="functionCall">
			<!-- Code block context -->
			<Scope data="mainCodeBlock">
				<Series data="parameters">
					<FormatRef ref="variableDefinition" />
				</Series>
				<Line>
					<FormatRef ref="functionHeader" />
					<Literal>;</Literal>
				</Line>
			</Scope>
		</Format>
		<!-- Writes the entire function with code inside it -->
		<Format id="functionDefinition">
			<Line>
				<FormatRef ref="functionSignature" />
				<Literal> {</Literal>
			</Line>
			<Indent>
				<Fragment data="code" />
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>
		<!-- Format to return a function header -->
		<Format id="returnFunction">
			<Series data="parameters">
				<FormatRef ref="variableDefinition" />
			</Series>
			<Line>
				<Literal>return </Literal>
				<FormatRef ref="functionHeader" />
				<Literal>;</Literal>
			</Line>
		</Format>

		<!-- Children -->
		<Format id="children">
			<FormatRef ref="implicitsDeclaration" />
			<FormatRef ref="implicitsDefinition" />
			<FormatRef ref="scriptItConditional" />
		</Format>
		<!-- Gets the appropriate format for the type -->
		<Format id="childrenWithoutImplicits">
			<FormatRef ref="variablesDeclaration" />
			<Line>
				<Literal>// Children</Literal>
			</Line>
			<!-- Actions and description definitions come last -->
			<Series data="children">
				<FormatRef data="scriptIt" ref="functionCall" />
				<FormatRef data="askIt" ref="askItConditional" />
				<FormatRef data="note" ref="noteFormat" />
				<FormatRef data="knowIt" ref="knowItDefinition" />
				<FormatRef data="controlIt" ref="controlItCall" />
			</Series>
		</Format>
		<!-- Format for control it children -->
		<Format id="controlItChildren">
			<Scope data="Cause">
				<FormatRef ref="implicitsDeclaration" />
				<FormatRef ref="implicitsDefinition" />
			</Scope>
			<FormatRef ref="childrenWithoutImplicits" />
		</Format>
		<!-- Finds the format for the ControlIt and uses it -->
		<Format id="controlItCall">
			<Fragment data="controlItFormat" />
		</Format>
		<!-- Defines all variables in the KnowIt -->
		<Format id="knowItDefinition">
			<Series data="variables">
				<FormatRef ref="variableDefinition" />
			</Series>
		</Format>
		<!-- Turns a Note into a comment -->
		<Format id="noteFormat">
			<Line>
				<Literal>// </Literal>
				<Fragment data="note" />
			</Line>
		</Format>

		<!-- Includes -->
		<!-- NWN format for include files -->
		<Format id="include">
			<Line>
				<Literal>#include "</Literal>
				<Fragment data="include" />
				<Literal>"</Literal>
			</Line>
		</Format>
		<!-- Series of all includes. i_se_story and i_se_aux are always included -->
		<Format id="includes">
			<Line>
				<Literal>// Includes</Literal>
			</Line>
			<Line>
				<Literal>#include "i_se_story"</Literal>
				<Literal>#include "i_se_aux"</Literal>
			</Line>
			<Series data="includes" unique="true">
				<FormatRef ref="include" />
			</Series>
		</Format>

		<!-- Format for the delay controller -->
		<Format id="delay">
			<Scope data="argument" ref="Number">
				<FormatRef ref="variableDefinition" />
			</Scope>
			<Line>
				<Literal>DelayCommand(</Literal>
				<Scope data="argument" ref="Number">
					<Fragment data="name" />
				</Scope>
				<Literal>, </Literal>
				<FormatRef ref="functionHeader" />
				<Literal>);</Literal>
			</Line>
		</Format>

		<!-- Format for the repeat controller -->
		<Format id="repeat">
			<Scope data="argument" ref="Number">
				<FormatRef ref="variableDefinition" />
			</Scope>
			<Line>
				<Literal>int i = 0;</Literal>
			</Line>
			<Line>
				<Literal>for(i; i &lt; FloatToInt(</Literal>
				<Scope data="argument" ref="Number">
					<Fragment data="name" />
				</Scope>
				<Literal>); i++) {</Literal>
			</Line>
			<Indent>
				<Line>
					<FormatRef ref="functionHeader" />
					<Literal>;</Literal>
				</Line>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>

		<!-- Format for ScriptIts -->
		<Format id="scriptItConditional">
			<Series data="identicalCauses">
				<Line>
					<Literal>if(SE2_Story_GetState(GetFirstPC(), "</Literal>
					<Fragment data="currentstorypoint" />
					<Literal>") == STORY_POINT_STATE_ENABLED){</Literal>
				</Line>
				<Indent>
					<Scope data="activeChild">
						<FormatRef ref="childrenWithoutImplicits" />
					</Scope>
				</Indent>
				<Line>
					<Literal>} else {</Literal>
				</Line>
				<Indent>
					<Scope data="inactiveChild">
						<FormatRef ref="childrenWithoutImplicits" />
					</Scope>
				</Indent>
				<Line>
					<Literal>}</Literal>
				</Line>
				<Line>
					<Scope data="alwaysChild">
						<FormatRef ref="childrenWithoutImplicits" />
					</Scope>
				</Line>
			</Series>
		</Format>

		<!-- Format for askits -->
		<Format id="askItConditional">
			<Line>
				<Literal>//Condition Variables</Literal>
			</Line>
			<Series data="variables">
				<FormatRef ref="variableDefinition" />
			</Series>
			<Line />
			<Line>
				<Literal>if(</Literal>
				<Fragment data="condition" />
				<Literal>){</Literal>
			</Line>
			<Indent>
				<Scope data="ifChild">
					<FormatRef ref="childrenWithoutImplicits" />
				</Scope>
			</Indent>
			<Line>
				<Literal>} else {</Literal>
			</Line>
			<Indent>
				<Scope data="elseChild">
					<FormatRef ref="childrenWithoutImplicits" />
				</Scope>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>

		<!-- Format for the main method in normal script files -->
		<Format id="main">
			<Line>
				<Literal>void main() {</Literal>
			</Line>
			<Indent>
				<Line>
					<Literal>//Variable Declarations</Literal>
				</Line>
				<Series data="causes" unique="true">
					<FormatRef ref="variablesDeclaration" />
				</Series>
				<Line>
					<Literal>//Function Calls</Literal>
				</Line>
				<Series data="causes" unique="true">
					<FormatRef ref="functionCall" />
				</Series>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
		</Format>

		<!-- File formats -->
		<!-- Default format for most files -->
		<Format id="file">
			<!-- include files first -->
			<FormatRef ref="includes" />
			<Line />
			<Line>
				<Literal>// Function Declarations</Literal>
			</Line>
			<!-- Function declarations next -->
			<Series data="codeBlocks" unique="true">
				<FormatRef ref="functionDeclaration" />
			</Series>
			<Line />
			<Line>
				<Literal>// Main</Literal>
			</Line>
			<FormatRef ref="main" />
			<Line />
			<Line>
				<Literal>// Function Definitions</Literal>
			</Line>
			<!-- Function definitions last -->
			<Series data="codeBlocks" unique="true">
				<FormatRef ref="functionDefinition" />
			</Series>
			<Line />
			<!-- NWN likes a blank line all by itself. I think it's a C-ism that they 
				seem to want to keep? -->
			<Line />
		</Format>
		<!-- Used in the Active slot on Dialogue Lines -->
		<Format id="conversation_conditional">
			<!-- include files first -->
			<FormatRef ref="includes" />
			<Line />
			<Line>
				<Literal>//Function Declarations</Literal>
			</Line>
			<!-- Function declarations next -->
			<Series data="codeBlocks" unique="true">
				<FormatRef ref="functionDeclaration" />
			</Series>
			<Line />
			<Line>
				<Literal>//Starting Conditional</Literal>
			</Line>
			<Line>
				<Literal>int StartingConditional() {</Literal>
			</Line>
			<Indent>
				<Series data="codeBlocks" unique="true">
					<FormatRef ref="returnFunction" />
				</Series>
			</Indent>
			<Line>
				<Literal>}</Literal>
			</Line>
			<Line />
			<Line>
				<Literal>//Function Definitions</Literal>
			</Line>
			<!-- Function definitions last -->
			<Series data="codeBlocks" unique="true">
				<FormatRef ref="functionDefinition" />
			</Series>
			<Line />
		</Format>
	</Formats>
</LanguageDictionary>