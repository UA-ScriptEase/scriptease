package scriptease.translator.codegenerator.code.fragments;

import java.util.regex.Pattern;

import scriptease.controller.FragmentVisitor;
import scriptease.translator.codegenerator.CodeGenerationException;
import scriptease.translator.codegenerator.code.contexts.Context;
import scriptease.util.StringOp;

/**
 * Represents a location where a single special code token must be generated by
 * the code generator.
 * 
 * An example of these code tokens are a ScriptIt's name, type, etc that appear
 * in the language dictionary, although anything defined as a fragment in the
 * language dictionary is a simple fragment.
 * 
 * @author remiller
 */
public class SimpleDataFragment extends AbstractFragment {
	private String defaultText = "";
	private String legalRange = "";

	public static enum Type {
		CODE, CONDITION, CONTROLITFORMAT, ENABLED, FANIN, FORMATTEDVALUE, ID, INCLUDE, NAME, NOTE, PARENTNAME, SLOTCONDITIONAL, SPEAKER, SUBJECT, TEMPLATEID, TEXT, TYPE, UNIQUEID, UNIQUE32CHARNAME, DISPLAYTEXT, VALUE, CURRENTSTORYPOINT, TOTALCHOICEPROBABILITY, INDEX, CHOICEPROBABILITYLOWERBOUND, CHOICEPROBABILITYUPPERBOUND, PROBABILITYCOUNT, TASKPROBABILITYLOWERBOUND, TASKPROBABILITYUPPERBOUND, PRIORITY
	}

	public SimpleDataFragment() {
		super("");
	}

	/**
	 * See:
	 * {@link AbstractFragment#FormatFragment(String, CharacterRange, char[])}
	 * 
	 * @param label
	 *            The specific simple directive.
	 * @param legalRange
	 *            The allowed range of alphanumeric characters.
	 * @param defaultText
	 *            The default text of the fragment.
	 */
	public SimpleDataFragment(String label, String legalRange,
			String defaultText) {
		super(label);
		if (StringOp.exists(legalRange))
			this.legalRange = legalRange;
		if (StringOp.exists(defaultText))
			this.defaultText = defaultText;
	}

	/**
	 * Creates a clone of the given directive fragment.
	 * 
	 * @param other
	 *            the fragment to copy.
	 */
	public SimpleDataFragment(SimpleDataFragment other) {
		this(other.getDirectiveText(), other.getLegalRange(), other
				.getDefaultText());
	}

	@Override
	public SimpleDataFragment clone() {
		final SimpleDataFragment clone = (SimpleDataFragment) super.clone();
		clone.setDefaultText(this.defaultText);
		clone.setLegalRange(this.legalRange);
		return clone;
	}

	@Override
	public String resolve(Context context) {
		super.resolve(context);
		final String directiveText = this.getDirectiveText();

		final Type data;

		try {
			data = Type.valueOf(directiveText.toUpperCase());
		} catch (IllegalArgumentException e) {
			System.out.println("Couldn't find the value of : " + directiveText);
			return null;
		}

		try {
			switch (data) {
			case NAME:
				return context.getUniqueName(Pattern.compile(this.legalRange));
			case DISPLAYTEXT:
				return context.getDisplayText();
			case TYPE:
				try {
					return context.getType();
				} catch (CodeGenerationException e) {
					if (StringOp.exists(this.defaultText))
						return this.defaultText;
					else
						throw e;
				}
			case CODE:
				return context.getCode();
			case TEMPLATEID:
				return context.getTemplateID();
			case VALUE:
				return context.getValue();
			case CONDITION:
				return context.getCondition();
			case CONTROLITFORMAT:
				return context.getControlItFormat();
			case CURRENTSTORYPOINT:
				return context.getUnique32CharName();
			case FORMATTEDVALUE:
				return context.getFormattedValue();
			case INCLUDE:
				return context.getInclude();
			case SUBJECT:
				return context.getSubject().getBinding().getScriptValue();
			case SLOTCONDITIONAL:
				return context.getSlotConditional();
			case FANIN:
				return context.getFanIn();
			case NOTE:
				return context.getDisplayText();
			case PARENTNAME:
				return context.getParentName();
			case UNIQUEID:
				return context.getUniqueID();
			case UNIQUE32CHARNAME:
				return context.getUnique32CharName();
			case TEXT:
				return context.getText();
			case SPEAKER:
				return context.getSpeaker();
			case ENABLED:
				return context.getEnabled();
			case TOTALCHOICEPROBABILITY:
				return context.getTotalChoiceProbability();
			case CHOICEPROBABILITYLOWERBOUND:
				return context.getChoiceProbabilityLowerBound();
			case CHOICEPROBABILITYUPPERBOUND:
				return context.getChoiceProbabilityUpperBound();
			case INDEX:
				return context.getIndex();
			case PROBABILITYCOUNT:
				return context.getProbabilityCount();
			case TASKPROBABILITYLOWERBOUND:
				return context.getTaskProbabilityLowerBound();
			case TASKPROBABILITYUPPERBOUND:
				return context.getTaskProbabilityUpperBound();
			case PRIORITY:
				return context.getPriority();
			default:
				throw new CodeGenerationException(
						"Simple Data Fragment was unable to be resolved for data: "
								+ directiveText + ">");
			}
		} catch (CodeGenerationException e) {
			return "Error when inserting new simple fragment: " + directiveText
					+ " with message: " + e.getMessage();
		}
	}

	public final String getLegalRange() {
		return this.legalRange;
	}

	/**
	 * Set the legal range of the simple fragment. This needs to be in regex
	 * format.
	 * 
	 * @param legalRange
	 */
	public void setLegalRange(String legalRange) {
		this.legalRange = legalRange;
	}

	/**
	 * Sets the default text.
	 * 
	 * @param defaultText
	 *            The new text to use as a default.
	 */
	public void setDefaultText(String defaultText) {
		this.defaultText = defaultText;
	}

	public String getDefaultText() {
		return this.defaultText;
	}

	@Override
	public String toString() {
		return "SimpleFragment [" + this.getDirectiveText() + "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (obj instanceof SimpleDataFragment) {
			return this.hashCode() == obj.hashCode();
		}
		return false;
	}

	@Override
	public int hashCode() {
		return super.hashCode() + this.defaultText.hashCode()
				+ this.legalRange.hashCode();
	}

	@Override
	public void process(FragmentVisitor visitor) {
		visitor.processSimpleDataFragment(this);
	}
}
